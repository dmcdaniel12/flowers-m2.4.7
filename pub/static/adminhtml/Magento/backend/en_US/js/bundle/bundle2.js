require.config({"config": {
        "jsbuild":{"jquery/ui-modules/widgets/dialog.js":"/*!\n * jQuery UI Dialog 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Dialog\n//>>group: Widgets\n//>>description: Displays customizable dialog windows.\n//>>docs: http://api.jqueryui.com/dialog/\n//>>demos: http://jqueryui.com/dialog/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/dialog.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./button\",\n            \"./draggable\",\n            \"./mouse\",\n            \"./resizable\",\n            \"../focusable\",\n            \"../keycode\",\n            \"../position\",\n            \"../safe-active-element\",\n            \"../safe-blur\",\n            \"../tabbable\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.dialog\", {\n        version: \"1.13.2\",\n        options: {\n            appendTo: \"body\",\n            autoOpen: true,\n            buttons: [],\n            classes: {\n                \"ui-dialog\": \"ui-corner-all\",\n                \"ui-dialog-titlebar\": \"ui-corner-all\"\n            },\n            closeOnEscape: true,\n            closeText: \"Close\",\n            draggable: true,\n            hide: null,\n            height: \"auto\",\n            maxHeight: null,\n            maxWidth: null,\n            minHeight: 150,\n            minWidth: 150,\n            modal: false,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window,\n                collision: \"fit\",\n\n                // Ensure the titlebar is always visible\n                using: function( pos ) {\n                    var topOffset = $( this ).css( pos ).offset().top;\n                    if ( topOffset < 0 ) {\n                        $( this ).css( \"top\", pos.top - topOffset );\n                    }\n                }\n            },\n            resizable: true,\n            show: null,\n            title: null,\n            width: 300,\n\n            // Callbacks\n            beforeClose: null,\n            close: null,\n            drag: null,\n            dragStart: null,\n            dragStop: null,\n            focus: null,\n            open: null,\n            resize: null,\n            resizeStart: null,\n            resizeStop: null\n        },\n\n        sizeRelatedOptions: {\n            buttons: true,\n            height: true,\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true,\n            width: true\n        },\n\n        resizableRelatedOptions: {\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true\n        },\n\n        _create: function() {\n            this.originalCss = {\n                display: this.element[ 0 ].style.display,\n                width: this.element[ 0 ].style.width,\n                minHeight: this.element[ 0 ].style.minHeight,\n                maxHeight: this.element[ 0 ].style.maxHeight,\n                height: this.element[ 0 ].style.height\n            };\n            this.originalPosition = {\n                parent: this.element.parent(),\n                index: this.element.parent().children().index( this.element )\n            };\n            this.originalTitle = this.element.attr( \"title\" );\n            if ( this.options.title == null && this.originalTitle != null ) {\n                this.options.title = this.originalTitle;\n            }\n\n            // Dialogs can't be disabled\n            if ( this.options.disabled ) {\n                this.options.disabled = false;\n            }\n\n            this._createWrapper();\n\n            this.element\n                .show()\n                .removeAttr( \"title\" )\n                .appendTo( this.uiDialog );\n\n            this._addClass( \"ui-dialog-content\", \"ui-widget-content\" );\n\n            this._createTitlebar();\n            this._createButtonPane();\n\n            if ( this.options.draggable && $.fn.draggable ) {\n                this._makeDraggable();\n            }\n            if ( this.options.resizable && $.fn.resizable ) {\n                this._makeResizable();\n            }\n\n            this._isOpen = false;\n\n            this._trackFocus();\n        },\n\n        _init: function() {\n            if ( this.options.autoOpen ) {\n                this.open();\n            }\n        },\n\n        _appendTo: function() {\n            var element = this.options.appendTo;\n            if ( element && ( element.jquery || element.nodeType ) ) {\n                return $( element );\n            }\n            return this.document.find( element || \"body\" ).eq( 0 );\n        },\n\n        _destroy: function() {\n            var next,\n                originalPosition = this.originalPosition;\n\n            this._untrackInstance();\n            this._destroyOverlay();\n\n            this.element\n                .removeUniqueId()\n                .css( this.originalCss )\n\n                // Without detaching first, the following becomes really slow\n                .detach();\n\n            this.uiDialog.remove();\n\n            if ( this.originalTitle ) {\n                this.element.attr( \"title\", this.originalTitle );\n            }\n\n            next = originalPosition.parent.children().eq( originalPosition.index );\n\n            // Don't try to place the dialog next to itself (#8613)\n            if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {\n                next.before( this.element );\n            } else {\n                originalPosition.parent.append( this.element );\n            }\n        },\n\n        widget: function() {\n            return this.uiDialog;\n        },\n\n        disable: $.noop,\n        enable: $.noop,\n\n        close: function( event ) {\n            var that = this;\n\n            if ( !this._isOpen || this._trigger( \"beforeClose\", event ) === false ) {\n                return;\n            }\n\n            this._isOpen = false;\n            this._focusedElement = null;\n            this._destroyOverlay();\n            this._untrackInstance();\n\n            if ( !this.opener.filter( \":focusable\" ).trigger( \"focus\" ).length ) {\n\n                // Hiding a focused element doesn't trigger blur in WebKit\n                // so in case we have nothing to focus on, explicitly blur the active element\n                // https://bugs.webkit.org/show_bug.cgi?id=47182\n                $.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );\n            }\n\n            this._hide( this.uiDialog, this.options.hide, function() {\n                that._trigger( \"close\", event );\n            } );\n        },\n\n        isOpen: function() {\n            return this._isOpen;\n        },\n\n        moveToTop: function() {\n            this._moveToTop();\n        },\n\n        _moveToTop: function( event, silent ) {\n            var moved = false,\n                zIndices = this.uiDialog.siblings( \".ui-front:visible\" ).map( function() {\n                    return +$( this ).css( \"z-index\" );\n                } ).get(),\n                zIndexMax = Math.max.apply( null, zIndices );\n\n            if ( zIndexMax >= +this.uiDialog.css( \"z-index\" ) ) {\n                this.uiDialog.css( \"z-index\", zIndexMax + 1 );\n                moved = true;\n            }\n\n            if ( moved && !silent ) {\n                this._trigger( \"focus\", event );\n            }\n            return moved;\n        },\n\n        open: function() {\n            var that = this;\n            if ( this._isOpen ) {\n                if ( this._moveToTop() ) {\n                    this._focusTabbable();\n                }\n                return;\n            }\n\n            this._isOpen = true;\n            this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );\n\n            this._size();\n            this._position();\n            this._createOverlay();\n            this._moveToTop( null, true );\n\n            // Ensure the overlay is moved to the top with the dialog, but only when\n            // opening. The overlay shouldn't move after the dialog is open so that\n            // modeless dialogs opened after the modal dialog stack properly.\n            if ( this.overlay ) {\n                this.overlay.css( \"z-index\", this.uiDialog.css( \"z-index\" ) - 1 );\n            }\n\n            this._show( this.uiDialog, this.options.show, function() {\n                that._focusTabbable();\n                that._trigger( \"focus\" );\n            } );\n\n            // Track the dialog immediately upon opening in case a focus event\n            // somehow occurs outside of the dialog before an element inside the\n            // dialog is focused (#10152)\n            this._makeFocusTarget();\n\n            this._trigger( \"open\" );\n        },\n\n        _focusTabbable: function() {\n\n            // Set focus to the first match:\n            // 1. An element that was focused previously\n            // 2. First element inside the dialog matching [autofocus]\n            // 3. Tabbable element inside the content element\n            // 4. Tabbable element inside the buttonpane\n            // 5. The close button\n            // 6. The dialog itself\n            var hasFocus = this._focusedElement;\n            if ( !hasFocus ) {\n                hasFocus = this.element.find( \"[autofocus]\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.element.find( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialogButtonPane.find( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialogTitlebarClose.filter( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialog;\n            }\n            hasFocus.eq( 0 ).trigger( \"focus\" );\n        },\n\n        _restoreTabbableFocus: function() {\n            var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),\n                isActive = this.uiDialog[ 0 ] === activeElement ||\n                    $.contains( this.uiDialog[ 0 ], activeElement );\n            if ( !isActive ) {\n                this._focusTabbable();\n            }\n        },\n\n        _keepFocus: function( event ) {\n            event.preventDefault();\n            this._restoreTabbableFocus();\n\n            // support: IE\n            // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n            // so we check again later\n            this._delay( this._restoreTabbableFocus );\n        },\n\n        _createWrapper: function() {\n            this.uiDialog = $( \"<div>\" )\n                .hide()\n                .attr( {\n\n                    // Setting tabIndex makes the div focusable\n                    tabIndex: -1,\n                    role: \"dialog\"\n                } )\n                .appendTo( this._appendTo() );\n\n            this._addClass( this.uiDialog, \"ui-dialog\", \"ui-widget ui-widget-content ui-front\" );\n            this._on( this.uiDialog, {\n                keydown: function( event ) {\n                    if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&\n                        event.keyCode === $.ui.keyCode.ESCAPE ) {\n                        event.preventDefault();\n                        this.close( event );\n                        return;\n                    }\n\n                    // Prevent tabbing out of dialogs\n                    if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {\n                        return;\n                    }\n                    var tabbables = this.uiDialog.find( \":tabbable\" ),\n                        first = tabbables.first(),\n                        last = tabbables.last();\n\n                    if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&\n                        !event.shiftKey ) {\n                        this._delay( function() {\n                            first.trigger( \"focus\" );\n                        } );\n                        event.preventDefault();\n                    } else if ( ( event.target === first[ 0 ] ||\n                        event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {\n                        this._delay( function() {\n                            last.trigger( \"focus\" );\n                        } );\n                        event.preventDefault();\n                    }\n                },\n                mousedown: function( event ) {\n                    if ( this._moveToTop( event ) ) {\n                        this._focusTabbable();\n                    }\n                }\n            } );\n\n            // We assume that any existing aria-describedby attribute means\n            // that the dialog content is marked up properly\n            // otherwise we brute force the content as the description\n            if ( !this.element.find( \"[aria-describedby]\" ).length ) {\n                this.uiDialog.attr( {\n                    \"aria-describedby\": this.element.uniqueId().attr( \"id\" )\n                } );\n            }\n        },\n\n        _createTitlebar: function() {\n            var uiDialogTitle;\n\n            this.uiDialogTitlebar = $( \"<div>\" );\n            this._addClass( this.uiDialogTitlebar,\n                \"ui-dialog-titlebar\", \"ui-widget-header ui-helper-clearfix\" );\n            this._on( this.uiDialogTitlebar, {\n                mousedown: function( event ) {\n\n                    // Don't prevent click on close button (#8838)\n                    // Focusing a dialog that is partially scrolled out of view\n                    // causes the browser to scroll it into view, preventing the click event\n                    if ( !$( event.target ).closest( \".ui-dialog-titlebar-close\" ) ) {\n\n                        // Dialog isn't getting focus when dragging (#8063)\n                        this.uiDialog.trigger( \"focus\" );\n                    }\n                }\n            } );\n\n            // Support: IE\n            // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n            // dialog in IE (#9312)\n            this.uiDialogTitlebarClose = $( \"<button type='button'></button>\" )\n                .button( {\n                    label: $( \"<a>\" ).text( this.options.closeText ).html(),\n                    icon: \"ui-icon-closethick\",\n                    showLabel: false\n                } )\n                .appendTo( this.uiDialogTitlebar );\n\n            this._addClass( this.uiDialogTitlebarClose, \"ui-dialog-titlebar-close\" );\n            this._on( this.uiDialogTitlebarClose, {\n                click: function( event ) {\n                    event.preventDefault();\n                    this.close( event );\n                }\n            } );\n\n            uiDialogTitle = $( \"<span>\" ).uniqueId().prependTo( this.uiDialogTitlebar );\n            this._addClass( uiDialogTitle, \"ui-dialog-title\" );\n            this._title( uiDialogTitle );\n\n            this.uiDialogTitlebar.prependTo( this.uiDialog );\n\n            this.uiDialog.attr( {\n                \"aria-labelledby\": uiDialogTitle.attr( \"id\" )\n            } );\n        },\n\n        _title: function( title ) {\n            if ( this.options.title ) {\n                title.text( this.options.title );\n            } else {\n                title.html( \"&#160;\" );\n            }\n        },\n\n        _createButtonPane: function() {\n            this.uiDialogButtonPane = $( \"<div>\" );\n            this._addClass( this.uiDialogButtonPane, \"ui-dialog-buttonpane\",\n                \"ui-widget-content ui-helper-clearfix\" );\n\n            this.uiButtonSet = $( \"<div>\" )\n                .appendTo( this.uiDialogButtonPane );\n            this._addClass( this.uiButtonSet, \"ui-dialog-buttonset\" );\n\n            this._createButtons();\n        },\n\n        _createButtons: function() {\n            var that = this,\n                buttons = this.options.buttons;\n\n            // If we already have a button pane, remove it\n            this.uiDialogButtonPane.remove();\n            this.uiButtonSet.empty();\n\n            if ( $.isEmptyObject( buttons ) || ( Array.isArray( buttons ) && !buttons.length ) ) {\n                this._removeClass( this.uiDialog, \"ui-dialog-buttons\" );\n                return;\n            }\n\n            $.each( buttons, function( name, props ) {\n                var click, buttonOptions;\n                props = typeof props === \"function\" ?\n                    { click: props, text: name } :\n                    props;\n\n                // Default to a non-submitting button\n                props = $.extend( { type: \"button\" }, props );\n\n                // Change the context for the click callback to be the main element\n                click = props.click;\n                buttonOptions = {\n                    icon: props.icon,\n                    iconPosition: props.iconPosition,\n                    showLabel: props.showLabel,\n\n                    // Deprecated options\n                    icons: props.icons,\n                    text: props.text\n                };\n\n                delete props.click;\n                delete props.icon;\n                delete props.iconPosition;\n                delete props.showLabel;\n\n                // Deprecated options\n                delete props.icons;\n                if ( typeof props.text === \"boolean\" ) {\n                    delete props.text;\n                }\n\n                $( \"<button></button>\", props )\n                    .button( buttonOptions )\n                    .appendTo( that.uiButtonSet )\n                    .on( \"click\", function() {\n                        click.apply( that.element[ 0 ], arguments );\n                    } );\n            } );\n            this._addClass( this.uiDialog, \"ui-dialog-buttons\" );\n            this.uiDialogButtonPane.appendTo( this.uiDialog );\n        },\n\n        _makeDraggable: function() {\n            var that = this,\n                options = this.options;\n\n            function filteredUi( ui ) {\n                return {\n                    position: ui.position,\n                    offset: ui.offset\n                };\n            }\n\n            this.uiDialog.draggable( {\n                cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n                handle: \".ui-dialog-titlebar\",\n                containment: \"document\",\n                start: function( event, ui ) {\n                    that._addClass( $( this ), \"ui-dialog-dragging\" );\n                    that._blockFrames();\n                    that._trigger( \"dragStart\", event, filteredUi( ui ) );\n                },\n                drag: function( event, ui ) {\n                    that._trigger( \"drag\", event, filteredUi( ui ) );\n                },\n                stop: function( event, ui ) {\n                    var left = ui.offset.left - that.document.scrollLeft(),\n                        top = ui.offset.top - that.document.scrollTop();\n\n                    options.position = {\n                        my: \"left top\",\n                        at: \"left\" + ( left >= 0 ? \"+\" : \"\" ) + left + \" \" +\n                            \"top\" + ( top >= 0 ? \"+\" : \"\" ) + top,\n                        of: that.window\n                    };\n                    that._removeClass( $( this ), \"ui-dialog-dragging\" );\n                    that._unblockFrames();\n                    that._trigger( \"dragStop\", event, filteredUi( ui ) );\n                }\n            } );\n        },\n\n        _makeResizable: function() {\n            var that = this,\n                options = this.options,\n                handles = options.resizable,\n\n                // .ui-resizable has position: relative defined in the stylesheet\n                // but dialogs have to use absolute or fixed positioning\n                position = this.uiDialog.css( \"position\" ),\n                resizeHandles = typeof handles === \"string\" ?\n                    handles :\n                    \"n,e,s,w,se,sw,ne,nw\";\n\n            function filteredUi( ui ) {\n                return {\n                    originalPosition: ui.originalPosition,\n                    originalSize: ui.originalSize,\n                    position: ui.position,\n                    size: ui.size\n                };\n            }\n\n            this.uiDialog.resizable( {\n                cancel: \".ui-dialog-content\",\n                containment: \"document\",\n                alsoResize: this.element,\n                maxWidth: options.maxWidth,\n                maxHeight: options.maxHeight,\n                minWidth: options.minWidth,\n                minHeight: this._minHeight(),\n                handles: resizeHandles,\n                start: function( event, ui ) {\n                    that._addClass( $( this ), \"ui-dialog-resizing\" );\n                    that._blockFrames();\n                    that._trigger( \"resizeStart\", event, filteredUi( ui ) );\n                },\n                resize: function( event, ui ) {\n                    that._trigger( \"resize\", event, filteredUi( ui ) );\n                },\n                stop: function( event, ui ) {\n                    var offset = that.uiDialog.offset(),\n                        left = offset.left - that.document.scrollLeft(),\n                        top = offset.top - that.document.scrollTop();\n\n                    options.height = that.uiDialog.height();\n                    options.width = that.uiDialog.width();\n                    options.position = {\n                        my: \"left top\",\n                        at: \"left\" + ( left >= 0 ? \"+\" : \"\" ) + left + \" \" +\n                            \"top\" + ( top >= 0 ? \"+\" : \"\" ) + top,\n                        of: that.window\n                    };\n                    that._removeClass( $( this ), \"ui-dialog-resizing\" );\n                    that._unblockFrames();\n                    that._trigger( \"resizeStop\", event, filteredUi( ui ) );\n                }\n            } )\n                .css( \"position\", position );\n        },\n\n        _trackFocus: function() {\n            this._on( this.widget(), {\n                focusin: function( event ) {\n                    this._makeFocusTarget();\n                    this._focusedElement = $( event.target );\n                }\n            } );\n        },\n\n        _makeFocusTarget: function() {\n            this._untrackInstance();\n            this._trackingInstances().unshift( this );\n        },\n\n        _untrackInstance: function() {\n            var instances = this._trackingInstances(),\n                exists = $.inArray( this, instances );\n            if ( exists !== -1 ) {\n                instances.splice( exists, 1 );\n            }\n        },\n\n        _trackingInstances: function() {\n            var instances = this.document.data( \"ui-dialog-instances\" );\n            if ( !instances ) {\n                instances = [];\n                this.document.data( \"ui-dialog-instances\", instances );\n            }\n            return instances;\n        },\n\n        _minHeight: function() {\n            var options = this.options;\n\n            return options.height === \"auto\" ?\n                options.minHeight :\n                Math.min( options.minHeight, options.height );\n        },\n\n        _position: function() {\n\n            // Need to show the dialog to get the actual offset in the position plugin\n            var isVisible = this.uiDialog.is( \":visible\" );\n            if ( !isVisible ) {\n                this.uiDialog.show();\n            }\n            this.uiDialog.position( this.options.position );\n            if ( !isVisible ) {\n                this.uiDialog.hide();\n            }\n        },\n\n        _setOptions: function( options ) {\n            var that = this,\n                resize = false,\n                resizableOptions = {};\n\n            $.each( options, function( key, value ) {\n                that._setOption( key, value );\n\n                if ( key in that.sizeRelatedOptions ) {\n                    resize = true;\n                }\n                if ( key in that.resizableRelatedOptions ) {\n                    resizableOptions[ key ] = value;\n                }\n            } );\n\n            if ( resize ) {\n                this._size();\n                this._position();\n            }\n            if ( this.uiDialog.is( \":data(ui-resizable)\" ) ) {\n                this.uiDialog.resizable( \"option\", resizableOptions );\n            }\n        },\n\n        _setOption: function( key, value ) {\n            var isDraggable, isResizable,\n                uiDialog = this.uiDialog;\n\n            if ( key === \"disabled\" ) {\n                return;\n            }\n\n            this._super( key, value );\n\n            if ( key === \"appendTo\" ) {\n                this.uiDialog.appendTo( this._appendTo() );\n            }\n\n            if ( key === \"buttons\" ) {\n                this._createButtons();\n            }\n\n            if ( key === \"closeText\" ) {\n                this.uiDialogTitlebarClose.button( {\n\n                    // Ensure that we always pass a string\n                    label: $( \"<a>\" ).text( \"\" + this.options.closeText ).html()\n                } );\n            }\n\n            if ( key === \"draggable\" ) {\n                isDraggable = uiDialog.is( \":data(ui-draggable)\" );\n                if ( isDraggable && !value ) {\n                    uiDialog.draggable( \"destroy\" );\n                }\n\n                if ( !isDraggable && value ) {\n                    this._makeDraggable();\n                }\n            }\n\n            if ( key === \"position\" ) {\n                this._position();\n            }\n\n            if ( key === \"resizable\" ) {\n\n                // currently resizable, becoming non-resizable\n                isResizable = uiDialog.is( \":data(ui-resizable)\" );\n                if ( isResizable && !value ) {\n                    uiDialog.resizable( \"destroy\" );\n                }\n\n                // Currently resizable, changing handles\n                if ( isResizable && typeof value === \"string\" ) {\n                    uiDialog.resizable( \"option\", \"handles\", value );\n                }\n\n                // Currently non-resizable, becoming resizable\n                if ( !isResizable && value !== false ) {\n                    this._makeResizable();\n                }\n            }\n\n            if ( key === \"title\" ) {\n                this._title( this.uiDialogTitlebar.find( \".ui-dialog-title\" ) );\n            }\n        },\n\n        _size: function() {\n\n            // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n            // divs will both have width and height set, so we need to reset them\n            var nonContentHeight, minContentHeight, maxContentHeight,\n                options = this.options;\n\n            // Reset content sizing\n            this.element.show().css( {\n                width: \"auto\",\n                minHeight: 0,\n                maxHeight: \"none\",\n                height: 0\n            } );\n\n            if ( options.minWidth > options.width ) {\n                options.width = options.minWidth;\n            }\n\n            // Reset wrapper sizing\n            // determine the height of all the non-content elements\n            nonContentHeight = this.uiDialog.css( {\n                height: \"auto\",\n                width: options.width\n            } )\n                .outerHeight();\n            minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );\n            maxContentHeight = typeof options.maxHeight === \"number\" ?\n                Math.max( 0, options.maxHeight - nonContentHeight ) :\n                \"none\";\n\n            if ( options.height === \"auto\" ) {\n                this.element.css( {\n                    minHeight: minContentHeight,\n                    maxHeight: maxContentHeight,\n                    height: \"auto\"\n                } );\n            } else {\n                this.element.height( Math.max( 0, options.height - nonContentHeight ) );\n            }\n\n            if ( this.uiDialog.is( \":data(ui-resizable)\" ) ) {\n                this.uiDialog.resizable( \"option\", \"minHeight\", this._minHeight() );\n            }\n        },\n\n        _blockFrames: function() {\n            this.iframeBlocks = this.document.find( \"iframe\" ).map( function() {\n                var iframe = $( this );\n\n                return $( \"<div>\" )\n                    .css( {\n                        position: \"absolute\",\n                        width: iframe.outerWidth(),\n                        height: iframe.outerHeight()\n                    } )\n                    .appendTo( iframe.parent() )\n                    .offset( iframe.offset() )[ 0 ];\n            } );\n        },\n\n        _unblockFrames: function() {\n            if ( this.iframeBlocks ) {\n                this.iframeBlocks.remove();\n                delete this.iframeBlocks;\n            }\n        },\n\n        _allowInteraction: function( event ) {\n            if ( $( event.target ).closest( \".ui-dialog\" ).length ) {\n                return true;\n            }\n\n            // TODO: Remove hack when datepicker implements\n            // the .ui-front logic (#8989)\n            return !!$( event.target ).closest( \".ui-datepicker\" ).length;\n        },\n\n        _createOverlay: function() {\n            if ( !this.options.modal ) {\n                return;\n            }\n\n            var jqMinor = $.fn.jquery.substring( 0, 4 );\n\n            // We use a delay in case the overlay is created from an\n            // event that we're going to be cancelling (#2804)\n            var isOpening = true;\n            this._delay( function() {\n                isOpening = false;\n            } );\n\n            if ( !this.document.data( \"ui-dialog-overlays\" ) ) {\n\n                // Prevent use of anchors and inputs\n                // This doesn't use `_on()` because it is a shared event handler\n                // across all open modal dialogs.\n                this.document.on( \"focusin.ui-dialog\", function( event ) {\n                    if ( isOpening ) {\n                        return;\n                    }\n\n                    var instance = this._trackingInstances()[ 0 ];\n                    if ( !instance._allowInteraction( event ) ) {\n                        event.preventDefault();\n                        instance._focusTabbable();\n\n                        // Support: jQuery >=3.4 <3.6 only\n                        // Focus re-triggering in jQuery 3.4/3.5 makes the original element\n                        // have its focus event propagated last, breaking the re-targeting.\n                        // Trigger focus in a delay in addition if needed to avoid the issue\n                        // See https://github.com/jquery/jquery/issues/4382\n                        if ( jqMinor === \"3.4.\" || jqMinor === \"3.5.\" ) {\n                            instance._delay( instance._restoreTabbableFocus );\n                        }\n                    }\n                }.bind( this ) );\n            }\n\n            this.overlay = $( \"<div>\" )\n                .appendTo( this._appendTo() );\n\n            this._addClass( this.overlay, null, \"ui-widget-overlay ui-front\" );\n            this._on( this.overlay, {\n                mousedown: \"_keepFocus\"\n            } );\n            this.document.data( \"ui-dialog-overlays\",\n                ( this.document.data( \"ui-dialog-overlays\" ) || 0 ) + 1 );\n        },\n\n        _destroyOverlay: function() {\n            if ( !this.options.modal ) {\n                return;\n            }\n\n            if ( this.overlay ) {\n                var overlays = this.document.data( \"ui-dialog-overlays\" ) - 1;\n\n                if ( !overlays ) {\n                    this.document.off( \"focusin.ui-dialog\" );\n                    this.document.removeData( \"ui-dialog-overlays\" );\n                } else {\n                    this.document.data( \"ui-dialog-overlays\", overlays );\n                }\n\n                this.overlay.remove();\n                this.overlay = null;\n            }\n        }\n    } );\n\n// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for dialogClass option\n        $.widget( \"ui.dialog\", $.ui.dialog, {\n            options: {\n                dialogClass: \"\"\n            },\n            _createWrapper: function() {\n                this._super();\n                this.uiDialog.addClass( this.options.dialogClass );\n            },\n            _setOption: function( key, value ) {\n                if ( key === \"dialogClass\" ) {\n                    this.uiDialog\n                        .removeClass( this.options.dialogClass )\n                        .addClass( value );\n                }\n                this._superApply( arguments );\n            }\n        } );\n    }\n\n    return $.ui.dialog;\n\n} );\n","jquery/ui-modules/widgets/progressbar.js":"/*!\n * jQuery UI Progressbar 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Progressbar\n//>>group: Widgets\n/* eslint-disable max-len */\n//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.\n/* eslint-enable max-len */\n//>>docs: http://api.jqueryui.com/progressbar/\n//>>demos: http://jqueryui.com/progressbar/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/progressbar.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.progressbar\", {\n        version: \"1.13.2\",\n        options: {\n            classes: {\n                \"ui-progressbar\": \"ui-corner-all\",\n                \"ui-progressbar-value\": \"ui-corner-left\",\n                \"ui-progressbar-complete\": \"ui-corner-right\"\n            },\n            max: 100,\n            value: 0,\n\n            change: null,\n            complete: null\n        },\n\n        min: 0,\n\n        _create: function() {\n\n            // Constrain initial value\n            this.oldValue = this.options.value = this._constrainedValue();\n\n            this.element.attr( {\n\n                // Only set static values; aria-valuenow and aria-valuemax are\n                // set inside _refreshValue()\n                role: \"progressbar\",\n                \"aria-valuemin\": this.min\n            } );\n            this._addClass( \"ui-progressbar\", \"ui-widget ui-widget-content\" );\n\n            this.valueDiv = $( \"<div>\" ).appendTo( this.element );\n            this._addClass( this.valueDiv, \"ui-progressbar-value\", \"ui-widget-header\" );\n            this._refreshValue();\n        },\n\n        _destroy: function() {\n            this.element.removeAttr( \"role aria-valuemin aria-valuemax aria-valuenow\" );\n\n            this.valueDiv.remove();\n        },\n\n        value: function( newValue ) {\n            if ( newValue === undefined ) {\n                return this.options.value;\n            }\n\n            this.options.value = this._constrainedValue( newValue );\n            this._refreshValue();\n        },\n\n        _constrainedValue: function( newValue ) {\n            if ( newValue === undefined ) {\n                newValue = this.options.value;\n            }\n\n            this.indeterminate = newValue === false;\n\n            // Sanitize value\n            if ( typeof newValue !== \"number\" ) {\n                newValue = 0;\n            }\n\n            return this.indeterminate ? false :\n                Math.min( this.options.max, Math.max( this.min, newValue ) );\n        },\n\n        _setOptions: function( options ) {\n\n            // Ensure \"value\" option is set after other values (like max)\n            var value = options.value;\n            delete options.value;\n\n            this._super( options );\n\n            this.options.value = this._constrainedValue( value );\n            this._refreshValue();\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"max\" ) {\n\n                // Don't allow a max less than min\n                value = Math.max( this.min, value );\n            }\n            this._super( key, value );\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this.element.attr( \"aria-disabled\", value );\n            this._toggleClass( null, \"ui-state-disabled\", !!value );\n        },\n\n        _percentage: function() {\n            return this.indeterminate ?\n                100 :\n                100 * ( this.options.value - this.min ) / ( this.options.max - this.min );\n        },\n\n        _refreshValue: function() {\n            var value = this.options.value,\n                percentage = this._percentage();\n\n            this.valueDiv\n                .toggle( this.indeterminate || value > this.min )\n                .width( percentage.toFixed( 0 ) + \"%\" );\n\n            this\n                ._toggleClass( this.valueDiv, \"ui-progressbar-complete\", null,\n                    value === this.options.max )\n                ._toggleClass( \"ui-progressbar-indeterminate\", null, this.indeterminate );\n\n            if ( this.indeterminate ) {\n                this.element.removeAttr( \"aria-valuenow\" );\n                if ( !this.overlayDiv ) {\n                    this.overlayDiv = $( \"<div>\" ).appendTo( this.valueDiv );\n                    this._addClass( this.overlayDiv, \"ui-progressbar-overlay\" );\n                }\n            } else {\n                this.element.attr( {\n                    \"aria-valuemax\": this.options.max,\n                    \"aria-valuenow\": value\n                } );\n                if ( this.overlayDiv ) {\n                    this.overlayDiv.remove();\n                    this.overlayDiv = null;\n                }\n            }\n\n            if ( this.oldValue !== value ) {\n                this.oldValue = value;\n                this._trigger( \"change\" );\n            }\n            if ( value === this.options.max ) {\n                this._trigger( \"complete\" );\n            }\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/checkboxradio.js":"/*!\n * jQuery UI Checkboxradio 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Checkboxradio\n//>>group: Widgets\n//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.\n//>>docs: http://api.jqueryui.com/checkboxradio/\n//>>demos: http://jqueryui.com/checkboxradio/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.structure: ../../themes/base/checkboxradio.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../form-reset-mixin\",\n            \"../labels\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.checkboxradio\", [ $.ui.formResetMixin, {\n        version: \"1.13.2\",\n        options: {\n            disabled: null,\n            label: null,\n            icon: true,\n            classes: {\n                \"ui-checkboxradio-label\": \"ui-corner-all\",\n                \"ui-checkboxradio-icon\": \"ui-corner-all\"\n            }\n        },\n\n        _getCreateOptions: function() {\n            var disabled, labels, labelContents;\n            var options = this._super() || {};\n\n            // We read the type here, because it makes more sense to throw a element type error first,\n            // rather then the error for lack of a label. Often if its the wrong type, it\n            // won't have a label (e.g. calling on a div, btn, etc)\n            this._readType();\n\n            labels = this.element.labels();\n\n            // If there are multiple labels, use the last one\n            this.label = $( labels[ labels.length - 1 ] );\n            if ( !this.label.length ) {\n                $.error( \"No label found for checkboxradio widget\" );\n            }\n\n            this.originalLabel = \"\";\n\n            // We need to get the label text but this may also need to make sure it does not contain the\n            // input itself.\n            // The label contents could be text, html, or a mix. We wrap all elements\n            // and read the wrapper's `innerHTML` to get a string representation of\n            // the label, without the input as part of it.\n            labelContents = this.label.contents().not( this.element[ 0 ] );\n\n            if ( labelContents.length ) {\n                this.originalLabel += labelContents\n                    .clone()\n                    .wrapAll( \"<div></div>\" )\n                    .parent()\n                    .html();\n            }\n\n            // Set the label option if we found label text\n            if ( this.originalLabel ) {\n                options.label = this.originalLabel;\n            }\n\n            disabled = this.element[ 0 ].disabled;\n            if ( disabled != null ) {\n                options.disabled = disabled;\n            }\n            return options;\n        },\n\n        _create: function() {\n            var checked = this.element[ 0 ].checked;\n\n            this._bindFormResetHandler();\n\n            if ( this.options.disabled == null ) {\n                this.options.disabled = this.element[ 0 ].disabled;\n            }\n\n            this._setOption( \"disabled\", this.options.disabled );\n            this._addClass( \"ui-checkboxradio\", \"ui-helper-hidden-accessible\" );\n            this._addClass( this.label, \"ui-checkboxradio-label\", \"ui-button ui-widget\" );\n\n            if ( this.type === \"radio\" ) {\n                this._addClass( this.label, \"ui-checkboxradio-radio-label\" );\n            }\n\n            if ( this.options.label && this.options.label !== this.originalLabel ) {\n                this._updateLabel();\n            } else if ( this.originalLabel ) {\n                this.options.label = this.originalLabel;\n            }\n\n            this._enhance();\n\n            if ( checked ) {\n                this._addClass( this.label, \"ui-checkboxradio-checked\", \"ui-state-active\" );\n            }\n\n            this._on( {\n                change: \"_toggleClasses\",\n                focus: function() {\n                    this._addClass( this.label, null, \"ui-state-focus ui-visual-focus\" );\n                },\n                blur: function() {\n                    this._removeClass( this.label, null, \"ui-state-focus ui-visual-focus\" );\n                }\n            } );\n        },\n\n        _readType: function() {\n            var nodeName = this.element[ 0 ].nodeName.toLowerCase();\n            this.type = this.element[ 0 ].type;\n            if ( nodeName !== \"input\" || !/radio|checkbox/.test( this.type ) ) {\n                $.error( \"Can't create checkboxradio on element.nodeName=\" + nodeName +\n                    \" and element.type=\" + this.type );\n            }\n        },\n\n        // Support jQuery Mobile enhanced option\n        _enhance: function() {\n            this._updateIcon( this.element[ 0 ].checked );\n        },\n\n        widget: function() {\n            return this.label;\n        },\n\n        _getRadioGroup: function() {\n            var group;\n            var name = this.element[ 0 ].name;\n            var nameSelector = \"input[name='\" + $.escapeSelector( name ) + \"']\";\n\n            if ( !name ) {\n                return $( [] );\n            }\n\n            if ( this.form.length ) {\n                group = $( this.form[ 0 ].elements ).filter( nameSelector );\n            } else {\n\n                // Not inside a form, check all inputs that also are not inside a form\n                group = $( nameSelector ).filter( function() {\n                    return $( this )._form().length === 0;\n                } );\n            }\n\n            return group.not( this.element );\n        },\n\n        _toggleClasses: function() {\n            var checked = this.element[ 0 ].checked;\n            this._toggleClass( this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked );\n\n            if ( this.options.icon && this.type === \"checkbox\" ) {\n                this._toggleClass( this.icon, null, \"ui-icon-check ui-state-checked\", checked )\n                    ._toggleClass( this.icon, null, \"ui-icon-blank\", !checked );\n            }\n\n            if ( this.type === \"radio\" ) {\n                this._getRadioGroup()\n                    .each( function() {\n                        var instance = $( this ).checkboxradio( \"instance\" );\n\n                        if ( instance ) {\n                            instance._removeClass( instance.label,\n                                \"ui-checkboxradio-checked\", \"ui-state-active\" );\n                        }\n                    } );\n            }\n        },\n\n        _destroy: function() {\n            this._unbindFormResetHandler();\n\n            if ( this.icon ) {\n                this.icon.remove();\n                this.iconSpace.remove();\n            }\n        },\n\n        _setOption: function( key, value ) {\n\n            // We don't allow the value to be set to nothing\n            if ( key === \"label\" && !value ) {\n                return;\n            }\n\n            this._super( key, value );\n\n            if ( key === \"disabled\" ) {\n                this._toggleClass( this.label, null, \"ui-state-disabled\", value );\n                this.element[ 0 ].disabled = value;\n\n                // Don't refresh when setting disabled\n                return;\n            }\n            this.refresh();\n        },\n\n        _updateIcon: function( checked ) {\n            var toAdd = \"ui-icon ui-icon-background \";\n\n            if ( this.options.icon ) {\n                if ( !this.icon ) {\n                    this.icon = $( \"<span>\" );\n                    this.iconSpace = $( \"<span> </span>\" );\n                    this._addClass( this.iconSpace, \"ui-checkboxradio-icon-space\" );\n                }\n\n                if ( this.type === \"checkbox\" ) {\n                    toAdd += checked ? \"ui-icon-check ui-state-checked\" : \"ui-icon-blank\";\n                    this._removeClass( this.icon, null, checked ? \"ui-icon-blank\" : \"ui-icon-check\" );\n                } else {\n                    toAdd += \"ui-icon-blank\";\n                }\n                this._addClass( this.icon, \"ui-checkboxradio-icon\", toAdd );\n                if ( !checked ) {\n                    this._removeClass( this.icon, null, \"ui-icon-check ui-state-checked\" );\n                }\n                this.icon.prependTo( this.label ).after( this.iconSpace );\n            } else if ( this.icon !== undefined ) {\n                this.icon.remove();\n                this.iconSpace.remove();\n                delete this.icon;\n            }\n        },\n\n        _updateLabel: function() {\n\n            // Remove the contents of the label ( minus the icon, icon space, and input )\n            var contents = this.label.contents().not( this.element[ 0 ] );\n            if ( this.icon ) {\n                contents = contents.not( this.icon[ 0 ] );\n            }\n            if ( this.iconSpace ) {\n                contents = contents.not( this.iconSpace[ 0 ] );\n            }\n            contents.remove();\n\n            this.label.append( this.options.label );\n        },\n\n        refresh: function() {\n            var checked = this.element[ 0 ].checked,\n                isDisabled = this.element[ 0 ].disabled;\n\n            this._updateIcon( checked );\n            this._toggleClass( this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked );\n            if ( this.options.label !== null ) {\n                this._updateLabel();\n            }\n\n            if ( isDisabled !== this.options.disabled ) {\n                this._setOptions( { \"disabled\": isDisabled } );\n            }\n        }\n\n    } ] );\n\n    return $.ui.checkboxradio;\n\n} );\n","jquery/ui-modules/widgets/controlgroup.js":"/*!\n * jQuery UI Controlgroup 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Controlgroup\n//>>group: Widgets\n//>>description: Visually groups form control widgets\n//>>docs: http://api.jqueryui.com/controlgroup/\n//>>demos: http://jqueryui.com/controlgroup/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/controlgroup.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;\n\n    return $.widget( \"ui.controlgroup\", {\n        version: \"1.13.2\",\n        defaultElement: \"<div>\",\n        options: {\n            direction: \"horizontal\",\n            disabled: null,\n            onlyVisible: true,\n            items: {\n                \"button\": \"input[type=button], input[type=submit], input[type=reset], button, a\",\n                \"controlgroupLabel\": \".ui-controlgroup-label\",\n                \"checkboxradio\": \"input[type='checkbox'], input[type='radio']\",\n                \"selectmenu\": \"select\",\n                \"spinner\": \".ui-spinner-input\"\n            }\n        },\n\n        _create: function() {\n            this._enhance();\n        },\n\n        // To support the enhanced option in jQuery Mobile, we isolate DOM manipulation\n        _enhance: function() {\n            this.element.attr( \"role\", \"toolbar\" );\n            this.refresh();\n        },\n\n        _destroy: function() {\n            this._callChildMethod( \"destroy\" );\n            this.childWidgets.removeData( \"ui-controlgroup-data\" );\n            this.element.removeAttr( \"role\" );\n            if ( this.options.items.controlgroupLabel ) {\n                this.element\n                    .find( this.options.items.controlgroupLabel )\n                    .find( \".ui-controlgroup-label-contents\" )\n                    .contents().unwrap();\n            }\n        },\n\n        _initWidgets: function() {\n            var that = this,\n                childWidgets = [];\n\n            // First we iterate over each of the items options\n            $.each( this.options.items, function( widget, selector ) {\n                var labels;\n                var options = {};\n\n                // Make sure the widget has a selector set\n                if ( !selector ) {\n                    return;\n                }\n\n                if ( widget === \"controlgroupLabel\" ) {\n                    labels = that.element.find( selector );\n                    labels.each( function() {\n                        var element = $( this );\n\n                        if ( element.children( \".ui-controlgroup-label-contents\" ).length ) {\n                            return;\n                        }\n                        element.contents()\n                            .wrapAll( \"<span class='ui-controlgroup-label-contents'></span>\" );\n                    } );\n                    that._addClass( labels, null, \"ui-widget ui-widget-content ui-state-default\" );\n                    childWidgets = childWidgets.concat( labels.get() );\n                    return;\n                }\n\n                // Make sure the widget actually exists\n                if ( !$.fn[ widget ] ) {\n                    return;\n                }\n\n                // We assume everything is in the middle to start because we can't determine\n                // first / last elements until all enhancments are done.\n                if ( that[ \"_\" + widget + \"Options\" ] ) {\n                    options = that[ \"_\" + widget + \"Options\" ]( \"middle\" );\n                } else {\n                    options = { classes: {} };\n                }\n\n                // Find instances of this widget inside controlgroup and init them\n                that.element\n                    .find( selector )\n                    .each( function() {\n                        var element = $( this );\n                        var instance = element[ widget ]( \"instance\" );\n\n                        // We need to clone the default options for this type of widget to avoid\n                        // polluting the variable options which has a wider scope than a single widget.\n                        var instanceOptions = $.widget.extend( {}, options );\n\n                        // If the button is the child of a spinner ignore it\n                        // TODO: Find a more generic solution\n                        if ( widget === \"button\" && element.parent( \".ui-spinner\" ).length ) {\n                            return;\n                        }\n\n                        // Create the widget if it doesn't exist\n                        if ( !instance ) {\n                            instance = element[ widget ]()[ widget ]( \"instance\" );\n                        }\n                        if ( instance ) {\n                            instanceOptions.classes =\n                                that._resolveClassesValues( instanceOptions.classes, instance );\n                        }\n                        element[ widget ]( instanceOptions );\n\n                        // Store an instance of the controlgroup to be able to reference\n                        // from the outermost element for changing options and refresh\n                        var widgetElement = element[ widget ]( \"widget\" );\n                        $.data( widgetElement[ 0 ], \"ui-controlgroup-data\",\n                            instance ? instance : element[ widget ]( \"instance\" ) );\n\n                        childWidgets.push( widgetElement[ 0 ] );\n                    } );\n            } );\n\n            this.childWidgets = $( $.uniqueSort( childWidgets ) );\n            this._addClass( this.childWidgets, \"ui-controlgroup-item\" );\n        },\n\n        _callChildMethod: function( method ) {\n            this.childWidgets.each( function() {\n                var element = $( this ),\n                    data = element.data( \"ui-controlgroup-data\" );\n                if ( data && data[ method ] ) {\n                    data[ method ]();\n                }\n            } );\n        },\n\n        _updateCornerClass: function( element, position ) {\n            var remove = \"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all\";\n            var add = this._buildSimpleOptions( position, \"label\" ).classes.label;\n\n            this._removeClass( element, null, remove );\n            this._addClass( element, null, add );\n        },\n\n        _buildSimpleOptions: function( position, key ) {\n            var direction = this.options.direction === \"vertical\";\n            var result = {\n                classes: {}\n            };\n            result.classes[ key ] = {\n                \"middle\": \"\",\n                \"first\": \"ui-corner-\" + ( direction ? \"top\" : \"left\" ),\n                \"last\": \"ui-corner-\" + ( direction ? \"bottom\" : \"right\" ),\n                \"only\": \"ui-corner-all\"\n            }[ position ];\n\n            return result;\n        },\n\n        _spinnerOptions: function( position ) {\n            var options = this._buildSimpleOptions( position, \"ui-spinner\" );\n\n            options.classes[ \"ui-spinner-up\" ] = \"\";\n            options.classes[ \"ui-spinner-down\" ] = \"\";\n\n            return options;\n        },\n\n        _buttonOptions: function( position ) {\n            return this._buildSimpleOptions( position, \"ui-button\" );\n        },\n\n        _checkboxradioOptions: function( position ) {\n            return this._buildSimpleOptions( position, \"ui-checkboxradio-label\" );\n        },\n\n        _selectmenuOptions: function( position ) {\n            var direction = this.options.direction === \"vertical\";\n            return {\n                width: direction ? \"auto\" : false,\n                classes: {\n                    middle: {\n                        \"ui-selectmenu-button-open\": \"\",\n                        \"ui-selectmenu-button-closed\": \"\"\n                    },\n                    first: {\n                        \"ui-selectmenu-button-open\": \"ui-corner-\" + ( direction ? \"top\" : \"tl\" ),\n                        \"ui-selectmenu-button-closed\": \"ui-corner-\" + ( direction ? \"top\" : \"left\" )\n                    },\n                    last: {\n                        \"ui-selectmenu-button-open\": direction ? \"\" : \"ui-corner-tr\",\n                        \"ui-selectmenu-button-closed\": \"ui-corner-\" + ( direction ? \"bottom\" : \"right\" )\n                    },\n                    only: {\n                        \"ui-selectmenu-button-open\": \"ui-corner-top\",\n                        \"ui-selectmenu-button-closed\": \"ui-corner-all\"\n                    }\n\n                }[ position ]\n            };\n        },\n\n        _resolveClassesValues: function( classes, instance ) {\n            var result = {};\n            $.each( classes, function( key ) {\n                var current = instance.options.classes[ key ] || \"\";\n                current = String.prototype.trim.call( current.replace( controlgroupCornerRegex, \"\" ) );\n                result[ key ] = ( current + \" \" + classes[ key ] ).replace( /\\s+/g, \" \" );\n            } );\n            return result;\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"direction\" ) {\n                this._removeClass( \"ui-controlgroup-\" + this.options.direction );\n            }\n\n            this._super( key, value );\n            if ( key === \"disabled\" ) {\n                this._callChildMethod( value ? \"disable\" : \"enable\" );\n                return;\n            }\n\n            this.refresh();\n        },\n\n        refresh: function() {\n            var children,\n                that = this;\n\n            this._addClass( \"ui-controlgroup ui-controlgroup-\" + this.options.direction );\n\n            if ( this.options.direction === \"horizontal\" ) {\n                this._addClass( null, \"ui-helper-clearfix\" );\n            }\n            this._initWidgets();\n\n            children = this.childWidgets;\n\n            // We filter here because we need to track all childWidgets not just the visible ones\n            if ( this.options.onlyVisible ) {\n                children = children.filter( \":visible\" );\n            }\n\n            if ( children.length ) {\n\n                // We do this last because we need to make sure all enhancment is done\n                // before determining first and last\n                $.each( [ \"first\", \"last\" ], function( index, value ) {\n                    var instance = children[ value ]().data( \"ui-controlgroup-data\" );\n\n                    if ( instance && that[ \"_\" + instance.widgetName + \"Options\" ] ) {\n                        var options = that[ \"_\" + instance.widgetName + \"Options\" ](\n                            children.length === 1 ? \"only\" : value\n                        );\n                        options.classes = that._resolveClassesValues( options.classes, instance );\n                        instance.element[ instance.widgetName ]( options );\n                    } else {\n                        that._updateCornerClass( children[ value ](), value );\n                    }\n                } );\n\n                // Finally call the refresh method on each of the child widgets.\n                this._callChildMethod( \"refresh\" );\n            }\n        }\n    } );\n} );\n","jquery/ui-modules/widgets/tabs.js":"/*!\n * jQuery UI Tabs 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Tabs\n//>>group: Widgets\n//>>description: Transforms a set of container elements into a tab structure.\n//>>docs: http://api.jqueryui.com/tabs/\n//>>demos: http://jqueryui.com/tabs/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/tabs.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../keycode\",\n            \"../safe-active-element\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.tabs\", {\n        version: \"1.13.2\",\n        delay: 300,\n        options: {\n            active: null,\n            classes: {\n                \"ui-tabs\": \"ui-corner-all\",\n                \"ui-tabs-nav\": \"ui-corner-all\",\n                \"ui-tabs-panel\": \"ui-corner-bottom\",\n                \"ui-tabs-tab\": \"ui-corner-top\"\n            },\n            collapsible: false,\n            event: \"click\",\n            heightStyle: \"content\",\n            hide: null,\n            show: null,\n\n            // Callbacks\n            activate: null,\n            beforeActivate: null,\n            beforeLoad: null,\n            load: null\n        },\n\n        _isLocal: ( function() {\n            var rhash = /#.*$/;\n\n            return function( anchor ) {\n                var anchorUrl, locationUrl;\n\n                anchorUrl = anchor.href.replace( rhash, \"\" );\n                locationUrl = location.href.replace( rhash, \"\" );\n\n                // Decoding may throw an error if the URL isn't UTF-8 (#9518)\n                try {\n                    anchorUrl = decodeURIComponent( anchorUrl );\n                } catch ( error ) {}\n                try {\n                    locationUrl = decodeURIComponent( locationUrl );\n                } catch ( error ) {}\n\n                return anchor.hash.length > 1 && anchorUrl === locationUrl;\n            };\n        } )(),\n\n        _create: function() {\n            var that = this,\n                options = this.options;\n\n            this.running = false;\n\n            this._addClass( \"ui-tabs\", \"ui-widget ui-widget-content\" );\n            this._toggleClass( \"ui-tabs-collapsible\", null, options.collapsible );\n\n            this._processTabs();\n            options.active = this._initialActive();\n\n            // Take disabling tabs via class attribute from HTML\n            // into account and update option properly.\n            if ( Array.isArray( options.disabled ) ) {\n                options.disabled = $.uniqueSort( options.disabled.concat(\n                    $.map( this.tabs.filter( \".ui-state-disabled\" ), function( li ) {\n                        return that.tabs.index( li );\n                    } )\n                ) ).sort();\n            }\n\n            // Check for length avoids error when initializing empty list\n            if ( this.options.active !== false && this.anchors.length ) {\n                this.active = this._findActive( options.active );\n            } else {\n                this.active = $();\n            }\n\n            this._refresh();\n\n            if ( this.active.length ) {\n                this.load( options.active );\n            }\n        },\n\n        _initialActive: function() {\n            var active = this.options.active,\n                collapsible = this.options.collapsible,\n                locationHash = location.hash.substring( 1 );\n\n            if ( active === null ) {\n\n                // check the fragment identifier in the URL\n                if ( locationHash ) {\n                    this.tabs.each( function( i, tab ) {\n                        if ( $( tab ).attr( \"aria-controls\" ) === locationHash ) {\n                            active = i;\n                            return false;\n                        }\n                    } );\n                }\n\n                // Check for a tab marked active via a class\n                if ( active === null ) {\n                    active = this.tabs.index( this.tabs.filter( \".ui-tabs-active\" ) );\n                }\n\n                // No active tab, set to false\n                if ( active === null || active === -1 ) {\n                    active = this.tabs.length ? 0 : false;\n                }\n            }\n\n            // Handle numbers: negative, out of range\n            if ( active !== false ) {\n                active = this.tabs.index( this.tabs.eq( active ) );\n                if ( active === -1 ) {\n                    active = collapsible ? false : 0;\n                }\n            }\n\n            // Don't allow collapsible: false and active: false\n            if ( !collapsible && active === false && this.anchors.length ) {\n                active = 0;\n            }\n\n            return active;\n        },\n\n        _getCreateEventData: function() {\n            return {\n                tab: this.active,\n                panel: !this.active.length ? $() : this._getPanelForTab( this.active )\n            };\n        },\n\n        _tabKeydown: function( event ) {\n            var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( \"li\" ),\n                selectedIndex = this.tabs.index( focusedTab ),\n                goingForward = true;\n\n            if ( this._handlePageNav( event ) ) {\n                return;\n            }\n\n            switch ( event.keyCode ) {\n                case $.ui.keyCode.RIGHT:\n                case $.ui.keyCode.DOWN:\n                    selectedIndex++;\n                    break;\n                case $.ui.keyCode.UP:\n                case $.ui.keyCode.LEFT:\n                    goingForward = false;\n                    selectedIndex--;\n                    break;\n                case $.ui.keyCode.END:\n                    selectedIndex = this.anchors.length - 1;\n                    break;\n                case $.ui.keyCode.HOME:\n                    selectedIndex = 0;\n                    break;\n                case $.ui.keyCode.SPACE:\n\n                    // Activate only, no collapsing\n                    event.preventDefault();\n                    clearTimeout( this.activating );\n                    this._activate( selectedIndex );\n                    return;\n                case $.ui.keyCode.ENTER:\n\n                    // Toggle (cancel delayed activation, allow collapsing)\n                    event.preventDefault();\n                    clearTimeout( this.activating );\n\n                    // Determine if we should collapse or activate\n                    this._activate( selectedIndex === this.options.active ? false : selectedIndex );\n                    return;\n                default:\n                    return;\n            }\n\n            // Focus the appropriate tab, based on which key was pressed\n            event.preventDefault();\n            clearTimeout( this.activating );\n            selectedIndex = this._focusNextTab( selectedIndex, goingForward );\n\n            // Navigating with control/command key will prevent automatic activation\n            if ( !event.ctrlKey && !event.metaKey ) {\n\n                // Update aria-selected immediately so that AT think the tab is already selected.\n                // Otherwise AT may confuse the user by stating that they need to activate the tab,\n                // but the tab will already be activated by the time the announcement finishes.\n                focusedTab.attr( \"aria-selected\", \"false\" );\n                this.tabs.eq( selectedIndex ).attr( \"aria-selected\", \"true\" );\n\n                this.activating = this._delay( function() {\n                    this.option( \"active\", selectedIndex );\n                }, this.delay );\n            }\n        },\n\n        _panelKeydown: function( event ) {\n            if ( this._handlePageNav( event ) ) {\n                return;\n            }\n\n            // Ctrl+up moves focus to the current tab\n            if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {\n                event.preventDefault();\n                this.active.trigger( \"focus\" );\n            }\n        },\n\n        // Alt+page up/down moves focus to the previous/next tab (and activates)\n        _handlePageNav: function( event ) {\n            if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {\n                this._activate( this._focusNextTab( this.options.active - 1, false ) );\n                return true;\n            }\n            if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {\n                this._activate( this._focusNextTab( this.options.active + 1, true ) );\n                return true;\n            }\n        },\n\n        _findNextTab: function( index, goingForward ) {\n            var lastTabIndex = this.tabs.length - 1;\n\n            function constrain() {\n                if ( index > lastTabIndex ) {\n                    index = 0;\n                }\n                if ( index < 0 ) {\n                    index = lastTabIndex;\n                }\n                return index;\n            }\n\n            while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {\n                index = goingForward ? index + 1 : index - 1;\n            }\n\n            return index;\n        },\n\n        _focusNextTab: function( index, goingForward ) {\n            index = this._findNextTab( index, goingForward );\n            this.tabs.eq( index ).trigger( \"focus\" );\n            return index;\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"active\" ) {\n\n                // _activate() will handle invalid values and update this.options\n                this._activate( value );\n                return;\n            }\n\n            this._super( key, value );\n\n            if ( key === \"collapsible\" ) {\n                this._toggleClass( \"ui-tabs-collapsible\", null, value );\n\n                // Setting collapsible: false while collapsed; open first panel\n                if ( !value && this.options.active === false ) {\n                    this._activate( 0 );\n                }\n            }\n\n            if ( key === \"event\" ) {\n                this._setupEvents( value );\n            }\n\n            if ( key === \"heightStyle\" ) {\n                this._setupHeightStyle( value );\n            }\n        },\n\n        _sanitizeSelector: function( hash ) {\n            return hash ? hash.replace( /[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\" ) : \"\";\n        },\n\n        refresh: function() {\n            var options = this.options,\n                lis = this.tablist.children( \":has(a[href])\" );\n\n            // Get disabled tabs from class attribute from HTML\n            // this will get converted to a boolean if needed in _refresh()\n            options.disabled = $.map( lis.filter( \".ui-state-disabled\" ), function( tab ) {\n                return lis.index( tab );\n            } );\n\n            this._processTabs();\n\n            // Was collapsed or no tabs\n            if ( options.active === false || !this.anchors.length ) {\n                options.active = false;\n                this.active = $();\n\n                // was active, but active tab is gone\n            } else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {\n\n                // all remaining tabs are disabled\n                if ( this.tabs.length === options.disabled.length ) {\n                    options.active = false;\n                    this.active = $();\n\n                    // activate previous tab\n                } else {\n                    this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );\n                }\n\n                // was active, active tab still exists\n            } else {\n\n                // make sure active index is correct\n                options.active = this.tabs.index( this.active );\n            }\n\n            this._refresh();\n        },\n\n        _refresh: function() {\n            this._setOptionDisabled( this.options.disabled );\n            this._setupEvents( this.options.event );\n            this._setupHeightStyle( this.options.heightStyle );\n\n            this.tabs.not( this.active ).attr( {\n                \"aria-selected\": \"false\",\n                \"aria-expanded\": \"false\",\n                tabIndex: -1\n            } );\n            this.panels.not( this._getPanelForTab( this.active ) )\n                .hide()\n                .attr( {\n                    \"aria-hidden\": \"true\"\n                } );\n\n            // Make sure one tab is in the tab order\n            if ( !this.active.length ) {\n                this.tabs.eq( 0 ).attr( \"tabIndex\", 0 );\n            } else {\n                this.active\n                    .attr( {\n                        \"aria-selected\": \"true\",\n                        \"aria-expanded\": \"true\",\n                        tabIndex: 0\n                    } );\n                this._addClass( this.active, \"ui-tabs-active\", \"ui-state-active\" );\n                this._getPanelForTab( this.active )\n                    .show()\n                    .attr( {\n                        \"aria-hidden\": \"false\"\n                    } );\n            }\n        },\n\n        _processTabs: function() {\n            var that = this,\n                prevTabs = this.tabs,\n                prevAnchors = this.anchors,\n                prevPanels = this.panels;\n\n            this.tablist = this._getList().attr( \"role\", \"tablist\" );\n            this._addClass( this.tablist, \"ui-tabs-nav\",\n                \"ui-helper-reset ui-helper-clearfix ui-widget-header\" );\n\n            // Prevent users from focusing disabled tabs via click\n            this.tablist\n                .on( \"mousedown\" + this.eventNamespace, \"> li\", function( event ) {\n                    if ( $( this ).is( \".ui-state-disabled\" ) ) {\n                        event.preventDefault();\n                    }\n                } )\n\n                // Support: IE <9\n                // Preventing the default action in mousedown doesn't prevent IE\n                // from focusing the element, so if the anchor gets focused, blur.\n                // We don't have to worry about focusing the previously focused\n                // element since clicking on a non-focusable element should focus\n                // the body anyway.\n                .on( \"focus\" + this.eventNamespace, \".ui-tabs-anchor\", function() {\n                    if ( $( this ).closest( \"li\" ).is( \".ui-state-disabled\" ) ) {\n                        this.blur();\n                    }\n                } );\n\n            this.tabs = this.tablist.find( \"> li:has(a[href])\" )\n                .attr( {\n                    role: \"tab\",\n                    tabIndex: -1\n                } );\n            this._addClass( this.tabs, \"ui-tabs-tab\", \"ui-state-default\" );\n\n            this.anchors = this.tabs.map( function() {\n                return $( \"a\", this )[ 0 ];\n            } )\n                .attr( {\n                    tabIndex: -1\n                } );\n            this._addClass( this.anchors, \"ui-tabs-anchor\" );\n\n            this.panels = $();\n\n            this.anchors.each( function( i, anchor ) {\n                var selector, panel, panelId,\n                    anchorId = $( anchor ).uniqueId().attr( \"id\" ),\n                    tab = $( anchor ).closest( \"li\" ),\n                    originalAriaControls = tab.attr( \"aria-controls\" );\n\n                // Inline tab\n                if ( that._isLocal( anchor ) ) {\n                    selector = anchor.hash;\n                    panelId = selector.substring( 1 );\n                    panel = that.element.find( that._sanitizeSelector( selector ) );\n\n                    // remote tab\n                } else {\n\n                    // If the tab doesn't already have aria-controls,\n                    // generate an id by using a throw-away element\n                    panelId = tab.attr( \"aria-controls\" ) || $( {} ).uniqueId()[ 0 ].id;\n                    selector = \"#\" + panelId;\n                    panel = that.element.find( selector );\n                    if ( !panel.length ) {\n                        panel = that._createPanel( panelId );\n                        panel.insertAfter( that.panels[ i - 1 ] || that.tablist );\n                    }\n                    panel.attr( \"aria-live\", \"polite\" );\n                }\n\n                if ( panel.length ) {\n                    that.panels = that.panels.add( panel );\n                }\n                if ( originalAriaControls ) {\n                    tab.data( \"ui-tabs-aria-controls\", originalAriaControls );\n                }\n                tab.attr( {\n                    \"aria-controls\": panelId,\n                    \"aria-labelledby\": anchorId\n                } );\n                panel.attr( \"aria-labelledby\", anchorId );\n            } );\n\n            this.panels.attr( \"role\", \"tabpanel\" );\n            this._addClass( this.panels, \"ui-tabs-panel\", \"ui-widget-content\" );\n\n            // Avoid memory leaks (#10056)\n            if ( prevTabs ) {\n                this._off( prevTabs.not( this.tabs ) );\n                this._off( prevAnchors.not( this.anchors ) );\n                this._off( prevPanels.not( this.panels ) );\n            }\n        },\n\n        // Allow overriding how to find the list for rare usage scenarios (#7715)\n        _getList: function() {\n            return this.tablist || this.element.find( \"ol, ul\" ).eq( 0 );\n        },\n\n        _createPanel: function( id ) {\n            return $( \"<div>\" )\n                .attr( \"id\", id )\n                .data( \"ui-tabs-destroy\", true );\n        },\n\n        _setOptionDisabled: function( disabled ) {\n            var currentItem, li, i;\n\n            if ( Array.isArray( disabled ) ) {\n                if ( !disabled.length ) {\n                    disabled = false;\n                } else if ( disabled.length === this.anchors.length ) {\n                    disabled = true;\n                }\n            }\n\n            // Disable tabs\n            for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {\n                currentItem = $( li );\n                if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {\n                    currentItem.attr( \"aria-disabled\", \"true\" );\n                    this._addClass( currentItem, null, \"ui-state-disabled\" );\n                } else {\n                    currentItem.removeAttr( \"aria-disabled\" );\n                    this._removeClass( currentItem, null, \"ui-state-disabled\" );\n                }\n            }\n\n            this.options.disabled = disabled;\n\n            this._toggleClass( this.widget(), this.widgetFullName + \"-disabled\", null,\n                disabled === true );\n        },\n\n        _setupEvents: function( event ) {\n            var events = {};\n            if ( event ) {\n                $.each( event.split( \" \" ), function( index, eventName ) {\n                    events[ eventName ] = \"_eventHandler\";\n                } );\n            }\n\n            this._off( this.anchors.add( this.tabs ).add( this.panels ) );\n\n            // Always prevent the default action, even when disabled\n            this._on( true, this.anchors, {\n                click: function( event ) {\n                    event.preventDefault();\n                }\n            } );\n            this._on( this.anchors, events );\n            this._on( this.tabs, { keydown: \"_tabKeydown\" } );\n            this._on( this.panels, { keydown: \"_panelKeydown\" } );\n\n            this._focusable( this.tabs );\n            this._hoverable( this.tabs );\n        },\n\n        _setupHeightStyle: function( heightStyle ) {\n            var maxHeight,\n                parent = this.element.parent();\n\n            if ( heightStyle === \"fill\" ) {\n                maxHeight = parent.height();\n                maxHeight -= this.element.outerHeight() - this.element.height();\n\n                this.element.siblings( \":visible\" ).each( function() {\n                    var elem = $( this ),\n                        position = elem.css( \"position\" );\n\n                    if ( position === \"absolute\" || position === \"fixed\" ) {\n                        return;\n                    }\n                    maxHeight -= elem.outerHeight( true );\n                } );\n\n                this.element.children().not( this.panels ).each( function() {\n                    maxHeight -= $( this ).outerHeight( true );\n                } );\n\n                this.panels.each( function() {\n                    $( this ).height( Math.max( 0, maxHeight -\n                        $( this ).innerHeight() + $( this ).height() ) );\n                } )\n                    .css( \"overflow\", \"auto\" );\n            } else if ( heightStyle === \"auto\" ) {\n                maxHeight = 0;\n                this.panels.each( function() {\n                    maxHeight = Math.max( maxHeight, $( this ).height( \"\" ).height() );\n                } ).height( maxHeight );\n            }\n        },\n\n        _eventHandler: function( event ) {\n            var options = this.options,\n                active = this.active,\n                anchor = $( event.currentTarget ),\n                tab = anchor.closest( \"li\" ),\n                clickedIsActive = tab[ 0 ] === active[ 0 ],\n                collapsing = clickedIsActive && options.collapsible,\n                toShow = collapsing ? $() : this._getPanelForTab( tab ),\n                toHide = !active.length ? $() : this._getPanelForTab( active ),\n                eventData = {\n                    oldTab: active,\n                    oldPanel: toHide,\n                    newTab: collapsing ? $() : tab,\n                    newPanel: toShow\n                };\n\n            event.preventDefault();\n\n            if ( tab.hasClass( \"ui-state-disabled\" ) ||\n\n                // tab is already loading\n                tab.hasClass( \"ui-tabs-loading\" ) ||\n\n                // can't switch durning an animation\n                this.running ||\n\n                // click on active header, but not collapsible\n                ( clickedIsActive && !options.collapsible ) ||\n\n                // allow canceling activation\n                ( this._trigger( \"beforeActivate\", event, eventData ) === false ) ) {\n                return;\n            }\n\n            options.active = collapsing ? false : this.tabs.index( tab );\n\n            this.active = clickedIsActive ? $() : tab;\n            if ( this.xhr ) {\n                this.xhr.abort();\n            }\n\n            if ( !toHide.length && !toShow.length ) {\n                $.error( \"jQuery UI Tabs: Mismatching fragment identifier.\" );\n            }\n\n            if ( toShow.length ) {\n                this.load( this.tabs.index( tab ), event );\n            }\n            this._toggle( event, eventData );\n        },\n\n        // Handles show/hide for selecting tabs\n        _toggle: function( event, eventData ) {\n            var that = this,\n                toShow = eventData.newPanel,\n                toHide = eventData.oldPanel;\n\n            this.running = true;\n\n            function complete() {\n                that.running = false;\n                that._trigger( \"activate\", event, eventData );\n            }\n\n            function show() {\n                that._addClass( eventData.newTab.closest( \"li\" ), \"ui-tabs-active\", \"ui-state-active\" );\n\n                if ( toShow.length && that.options.show ) {\n                    that._show( toShow, that.options.show, complete );\n                } else {\n                    toShow.show();\n                    complete();\n                }\n            }\n\n            // Start out by hiding, then showing, then completing\n            if ( toHide.length && this.options.hide ) {\n                this._hide( toHide, this.options.hide, function() {\n                    that._removeClass( eventData.oldTab.closest( \"li\" ),\n                        \"ui-tabs-active\", \"ui-state-active\" );\n                    show();\n                } );\n            } else {\n                this._removeClass( eventData.oldTab.closest( \"li\" ),\n                    \"ui-tabs-active\", \"ui-state-active\" );\n                toHide.hide();\n                show();\n            }\n\n            toHide.attr( \"aria-hidden\", \"true\" );\n            eventData.oldTab.attr( {\n                \"aria-selected\": \"false\",\n                \"aria-expanded\": \"false\"\n            } );\n\n            // If we're switching tabs, remove the old tab from the tab order.\n            // If we're opening from collapsed state, remove the previous tab from the tab order.\n            // If we're collapsing, then keep the collapsing tab in the tab order.\n            if ( toShow.length && toHide.length ) {\n                eventData.oldTab.attr( \"tabIndex\", -1 );\n            } else if ( toShow.length ) {\n                this.tabs.filter( function() {\n                    return $( this ).attr( \"tabIndex\" ) === 0;\n                } )\n                    .attr( \"tabIndex\", -1 );\n            }\n\n            toShow.attr( \"aria-hidden\", \"false\" );\n            eventData.newTab.attr( {\n                \"aria-selected\": \"true\",\n                \"aria-expanded\": \"true\",\n                tabIndex: 0\n            } );\n        },\n\n        _activate: function( index ) {\n            var anchor,\n                active = this._findActive( index );\n\n            // Trying to activate the already active panel\n            if ( active[ 0 ] === this.active[ 0 ] ) {\n                return;\n            }\n\n            // Trying to collapse, simulate a click on the current active header\n            if ( !active.length ) {\n                active = this.active;\n            }\n\n            anchor = active.find( \".ui-tabs-anchor\" )[ 0 ];\n            this._eventHandler( {\n                target: anchor,\n                currentTarget: anchor,\n                preventDefault: $.noop\n            } );\n        },\n\n        _findActive: function( index ) {\n            return index === false ? $() : this.tabs.eq( index );\n        },\n\n        _getIndex: function( index ) {\n\n            // meta-function to give users option to provide a href string instead of a numerical index.\n            if ( typeof index === \"string\" ) {\n                index = this.anchors.index( this.anchors.filter( \"[href$='\" +\n                    $.escapeSelector( index ) + \"']\" ) );\n            }\n\n            return index;\n        },\n\n        _destroy: function() {\n            if ( this.xhr ) {\n                this.xhr.abort();\n            }\n\n            this.tablist\n                .removeAttr( \"role\" )\n                .off( this.eventNamespace );\n\n            this.anchors\n                .removeAttr( \"role tabIndex\" )\n                .removeUniqueId();\n\n            this.tabs.add( this.panels ).each( function() {\n                if ( $.data( this, \"ui-tabs-destroy\" ) ) {\n                    $( this ).remove();\n                } else {\n                    $( this ).removeAttr( \"role tabIndex \" +\n                        \"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded\" );\n                }\n            } );\n\n            this.tabs.each( function() {\n                var li = $( this ),\n                    prev = li.data( \"ui-tabs-aria-controls\" );\n                if ( prev ) {\n                    li\n                        .attr( \"aria-controls\", prev )\n                        .removeData( \"ui-tabs-aria-controls\" );\n                } else {\n                    li.removeAttr( \"aria-controls\" );\n                }\n            } );\n\n            this.panels.show();\n\n            if ( this.options.heightStyle !== \"content\" ) {\n                this.panels.css( \"height\", \"\" );\n            }\n        },\n\n        enable: function( index ) {\n            var disabled = this.options.disabled;\n            if ( disabled === false ) {\n                return;\n            }\n\n            if ( index === undefined ) {\n                disabled = false;\n            } else {\n                index = this._getIndex( index );\n                if ( Array.isArray( disabled ) ) {\n                    disabled = $.map( disabled, function( num ) {\n                        return num !== index ? num : null;\n                    } );\n                } else {\n                    disabled = $.map( this.tabs, function( li, num ) {\n                        return num !== index ? num : null;\n                    } );\n                }\n            }\n            this._setOptionDisabled( disabled );\n        },\n\n        disable: function( index ) {\n            var disabled = this.options.disabled;\n            if ( disabled === true ) {\n                return;\n            }\n\n            if ( index === undefined ) {\n                disabled = true;\n            } else {\n                index = this._getIndex( index );\n                if ( $.inArray( index, disabled ) !== -1 ) {\n                    return;\n                }\n                if ( Array.isArray( disabled ) ) {\n                    disabled = $.merge( [ index ], disabled ).sort();\n                } else {\n                    disabled = [ index ];\n                }\n            }\n            this._setOptionDisabled( disabled );\n        },\n\n        load: function( index, event ) {\n            index = this._getIndex( index );\n            var that = this,\n                tab = this.tabs.eq( index ),\n                anchor = tab.find( \".ui-tabs-anchor\" ),\n                panel = this._getPanelForTab( tab ),\n                eventData = {\n                    tab: tab,\n                    panel: panel\n                },\n                complete = function( jqXHR, status ) {\n                    if ( status === \"abort\" ) {\n                        that.panels.stop( false, true );\n                    }\n\n                    that._removeClass( tab, \"ui-tabs-loading\" );\n                    panel.removeAttr( \"aria-busy\" );\n\n                    if ( jqXHR === that.xhr ) {\n                        delete that.xhr;\n                    }\n                };\n\n            // Not remote\n            if ( this._isLocal( anchor[ 0 ] ) ) {\n                return;\n            }\n\n            this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );\n\n            // Support: jQuery <1.8\n            // jQuery <1.8 returns false if the request is canceled in beforeSend,\n            // but as of 1.8, $.ajax() always returns a jqXHR object.\n            if ( this.xhr && this.xhr.statusText !== \"canceled\" ) {\n                this._addClass( tab, \"ui-tabs-loading\" );\n                panel.attr( \"aria-busy\", \"true\" );\n\n                this.xhr\n                    .done( function( response, status, jqXHR ) {\n\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout( function() {\n                            panel.html( response );\n                            that._trigger( \"load\", event, eventData );\n\n                            complete( jqXHR, status );\n                        }, 1 );\n                    } )\n                    .fail( function( jqXHR, status ) {\n\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout( function() {\n                            complete( jqXHR, status );\n                        }, 1 );\n                    } );\n            }\n        },\n\n        _ajaxSettings: function( anchor, event, eventData ) {\n            var that = this;\n            return {\n\n                // Support: IE <11 only\n                // Strip any hash that exists to prevent errors with the Ajax request\n                url: anchor.attr( \"href\" ).replace( /#.*$/, \"\" ),\n                beforeSend: function( jqXHR, settings ) {\n                    return that._trigger( \"beforeLoad\", event,\n                        $.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );\n                }\n            };\n        },\n\n        _getPanelForTab: function( tab ) {\n            var id = $( tab ).attr( \"aria-controls\" );\n            return this.element.find( this._sanitizeSelector( \"#\" + id ) );\n        }\n    } );\n\n// DEPRECATED\n// TODO: Switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for ui-tab class (now ui-tabs-tab)\n        $.widget( \"ui.tabs\", $.ui.tabs, {\n            _processTabs: function() {\n                this._superApply( arguments );\n                this._addClass( this.tabs, \"ui-tab\" );\n            }\n        } );\n    }\n\n    return $.ui.tabs;\n\n} );\n","jquery/ui-modules/widgets/selectable.js":"/*!\n * jQuery UI Selectable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Selectable\n//>>group: Interactions\n//>>description: Allows groups of elements to be selected with the mouse.\n//>>docs: http://api.jqueryui.com/selectable/\n//>>demos: http://jqueryui.com/selectable/\n//>>css.structure: ../../themes/base/selectable.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.selectable\", $.ui.mouse, {\n        version: \"1.13.2\",\n        options: {\n            appendTo: \"body\",\n            autoRefresh: true,\n            distance: 0,\n            filter: \"*\",\n            tolerance: \"touch\",\n\n            // Callbacks\n            selected: null,\n            selecting: null,\n            start: null,\n            stop: null,\n            unselected: null,\n            unselecting: null\n        },\n        _create: function() {\n            var that = this;\n\n            this._addClass( \"ui-selectable\" );\n\n            this.dragged = false;\n\n            // Cache selectee children based on filter\n            this.refresh = function() {\n                that.elementPos = $( that.element[ 0 ] ).offset();\n                that.selectees = $( that.options.filter, that.element[ 0 ] );\n                that._addClass( that.selectees, \"ui-selectee\" );\n                that.selectees.each( function() {\n                    var $this = $( this ),\n                        selecteeOffset = $this.offset(),\n                        pos = {\n                            left: selecteeOffset.left - that.elementPos.left,\n                            top: selecteeOffset.top - that.elementPos.top\n                        };\n                    $.data( this, \"selectable-item\", {\n                        element: this,\n                        $element: $this,\n                        left: pos.left,\n                        top: pos.top,\n                        right: pos.left + $this.outerWidth(),\n                        bottom: pos.top + $this.outerHeight(),\n                        startselected: false,\n                        selected: $this.hasClass( \"ui-selected\" ),\n                        selecting: $this.hasClass( \"ui-selecting\" ),\n                        unselecting: $this.hasClass( \"ui-unselecting\" )\n                    } );\n                } );\n            };\n            this.refresh();\n\n            this._mouseInit();\n\n            this.helper = $( \"<div>\" );\n            this._addClass( this.helper, \"ui-selectable-helper\" );\n        },\n\n        _destroy: function() {\n            this.selectees.removeData( \"selectable-item\" );\n            this._mouseDestroy();\n        },\n\n        _mouseStart: function( event ) {\n            var that = this,\n                options = this.options;\n\n            this.opos = [ event.pageX, event.pageY ];\n            this.elementPos = $( this.element[ 0 ] ).offset();\n\n            if ( this.options.disabled ) {\n                return;\n            }\n\n            this.selectees = $( options.filter, this.element[ 0 ] );\n\n            this._trigger( \"start\", event );\n\n            $( options.appendTo ).append( this.helper );\n\n            // position helper (lasso)\n            this.helper.css( {\n                \"left\": event.pageX,\n                \"top\": event.pageY,\n                \"width\": 0,\n                \"height\": 0\n            } );\n\n            if ( options.autoRefresh ) {\n                this.refresh();\n            }\n\n            this.selectees.filter( \".ui-selected\" ).each( function() {\n                var selectee = $.data( this, \"selectable-item\" );\n                selectee.startselected = true;\n                if ( !event.metaKey && !event.ctrlKey ) {\n                    that._removeClass( selectee.$element, \"ui-selected\" );\n                    selectee.selected = false;\n                    that._addClass( selectee.$element, \"ui-unselecting\" );\n                    selectee.unselecting = true;\n\n                    // selectable UNSELECTING callback\n                    that._trigger( \"unselecting\", event, {\n                        unselecting: selectee.element\n                    } );\n                }\n            } );\n\n            $( event.target ).parents().addBack().each( function() {\n                var doSelect,\n                    selectee = $.data( this, \"selectable-item\" );\n                if ( selectee ) {\n                    doSelect = ( !event.metaKey && !event.ctrlKey ) ||\n                        !selectee.$element.hasClass( \"ui-selected\" );\n                    that._removeClass( selectee.$element, doSelect ? \"ui-unselecting\" : \"ui-selected\" )\n                        ._addClass( selectee.$element, doSelect ? \"ui-selecting\" : \"ui-unselecting\" );\n                    selectee.unselecting = !doSelect;\n                    selectee.selecting = doSelect;\n                    selectee.selected = doSelect;\n\n                    // selectable (UN)SELECTING callback\n                    if ( doSelect ) {\n                        that._trigger( \"selecting\", event, {\n                            selecting: selectee.element\n                        } );\n                    } else {\n                        that._trigger( \"unselecting\", event, {\n                            unselecting: selectee.element\n                        } );\n                    }\n                    return false;\n                }\n            } );\n\n        },\n\n        _mouseDrag: function( event ) {\n\n            this.dragged = true;\n\n            if ( this.options.disabled ) {\n                return;\n            }\n\n            var tmp,\n                that = this,\n                options = this.options,\n                x1 = this.opos[ 0 ],\n                y1 = this.opos[ 1 ],\n                x2 = event.pageX,\n                y2 = event.pageY;\n\n            if ( x1 > x2 ) {\n                tmp = x2; x2 = x1; x1 = tmp;\n            }\n            if ( y1 > y2 ) {\n                tmp = y2; y2 = y1; y1 = tmp;\n            }\n            this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );\n\n            this.selectees.each( function() {\n                var selectee = $.data( this, \"selectable-item\" ),\n                    hit = false,\n                    offset = {};\n\n                //prevent helper from being selected if appendTo: selectable\n                if ( !selectee || selectee.element === that.element[ 0 ] ) {\n                    return;\n                }\n\n                offset.left   = selectee.left   + that.elementPos.left;\n                offset.right  = selectee.right  + that.elementPos.left;\n                offset.top    = selectee.top    + that.elementPos.top;\n                offset.bottom = selectee.bottom + that.elementPos.top;\n\n                if ( options.tolerance === \"touch\" ) {\n                    hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||\n                        offset.bottom < y1 ) );\n                } else if ( options.tolerance === \"fit\" ) {\n                    hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&\n                        offset.bottom < y2 );\n                }\n\n                if ( hit ) {\n\n                    // SELECT\n                    if ( selectee.selected ) {\n                        that._removeClass( selectee.$element, \"ui-selected\" );\n                        selectee.selected = false;\n                    }\n                    if ( selectee.unselecting ) {\n                        that._removeClass( selectee.$element, \"ui-unselecting\" );\n                        selectee.unselecting = false;\n                    }\n                    if ( !selectee.selecting ) {\n                        that._addClass( selectee.$element, \"ui-selecting\" );\n                        selectee.selecting = true;\n\n                        // selectable SELECTING callback\n                        that._trigger( \"selecting\", event, {\n                            selecting: selectee.element\n                        } );\n                    }\n                } else {\n\n                    // UNSELECT\n                    if ( selectee.selecting ) {\n                        if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {\n                            that._removeClass( selectee.$element, \"ui-selecting\" );\n                            selectee.selecting = false;\n                            that._addClass( selectee.$element, \"ui-selected\" );\n                            selectee.selected = true;\n                        } else {\n                            that._removeClass( selectee.$element, \"ui-selecting\" );\n                            selectee.selecting = false;\n                            if ( selectee.startselected ) {\n                                that._addClass( selectee.$element, \"ui-unselecting\" );\n                                selectee.unselecting = true;\n                            }\n\n                            // selectable UNSELECTING callback\n                            that._trigger( \"unselecting\", event, {\n                                unselecting: selectee.element\n                            } );\n                        }\n                    }\n                    if ( selectee.selected ) {\n                        if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {\n                            that._removeClass( selectee.$element, \"ui-selected\" );\n                            selectee.selected = false;\n\n                            that._addClass( selectee.$element, \"ui-unselecting\" );\n                            selectee.unselecting = true;\n\n                            // selectable UNSELECTING callback\n                            that._trigger( \"unselecting\", event, {\n                                unselecting: selectee.element\n                            } );\n                        }\n                    }\n                }\n            } );\n\n            return false;\n        },\n\n        _mouseStop: function( event ) {\n            var that = this;\n\n            this.dragged = false;\n\n            $( \".ui-unselecting\", this.element[ 0 ] ).each( function() {\n                var selectee = $.data( this, \"selectable-item\" );\n                that._removeClass( selectee.$element, \"ui-unselecting\" );\n                selectee.unselecting = false;\n                selectee.startselected = false;\n                that._trigger( \"unselected\", event, {\n                    unselected: selectee.element\n                } );\n            } );\n            $( \".ui-selecting\", this.element[ 0 ] ).each( function() {\n                var selectee = $.data( this, \"selectable-item\" );\n                that._removeClass( selectee.$element, \"ui-selecting\" )\n                    ._addClass( selectee.$element, \"ui-selected\" );\n                selectee.selecting = false;\n                selectee.selected = true;\n                selectee.startselected = true;\n                that._trigger( \"selected\", event, {\n                    selected: selectee.element\n                } );\n            } );\n            this._trigger( \"stop\", event );\n\n            this.helper.remove();\n\n            return false;\n        }\n\n    } );\n\n} );\n","jquery/ui-modules/widgets/sortable.js":"/*!\n * jQuery UI Sortable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Sortable\n//>>group: Interactions\n//>>description: Enables items in a list to be sorted using the mouse.\n//>>docs: http://api.jqueryui.com/sortable/\n//>>demos: http://jqueryui.com/sortable/\n//>>css.structure: ../../themes/base/sortable.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../data\",\n            \"../ie\",\n            \"../scroll-parent\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.sortable\", $.ui.mouse, {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"sort\",\n        ready: false,\n        options: {\n            appendTo: \"parent\",\n            axis: false,\n            connectWith: false,\n            containment: false,\n            cursor: \"auto\",\n            cursorAt: false,\n            dropOnEmpty: true,\n            forcePlaceholderSize: false,\n            forceHelperSize: false,\n            grid: false,\n            handle: false,\n            helper: \"original\",\n            items: \"> *\",\n            opacity: false,\n            placeholder: false,\n            revert: false,\n            scroll: true,\n            scrollSensitivity: 20,\n            scrollSpeed: 20,\n            scope: \"default\",\n            tolerance: \"intersect\",\n            zIndex: 1000,\n\n            // Callbacks\n            activate: null,\n            beforeStop: null,\n            change: null,\n            deactivate: null,\n            out: null,\n            over: null,\n            receive: null,\n            remove: null,\n            sort: null,\n            start: null,\n            stop: null,\n            update: null\n        },\n\n        _isOverAxis: function( x, reference, size ) {\n            return ( x >= reference ) && ( x < ( reference + size ) );\n        },\n\n        _isFloating: function( item ) {\n            return ( /left|right/ ).test( item.css( \"float\" ) ) ||\n                ( /inline|table-cell/ ).test( item.css( \"display\" ) );\n        },\n\n        _create: function() {\n            this.containerCache = {};\n            this._addClass( \"ui-sortable\" );\n\n            //Get the items\n            this.refresh();\n\n            //Let's determine the parent's offset\n            this.offset = this.element.offset();\n\n            //Initialize mouse events for interaction\n            this._mouseInit();\n\n            this._setHandleClassName();\n\n            //We're ready to go\n            this.ready = true;\n\n        },\n\n        _setOption: function( key, value ) {\n            this._super( key, value );\n\n            if ( key === \"handle\" ) {\n                this._setHandleClassName();\n            }\n        },\n\n        _setHandleClassName: function() {\n            var that = this;\n            this._removeClass( this.element.find( \".ui-sortable-handle\" ), \"ui-sortable-handle\" );\n            $.each( this.items, function() {\n                that._addClass(\n                    this.instance.options.handle ?\n                        this.item.find( this.instance.options.handle ) :\n                        this.item,\n                    \"ui-sortable-handle\"\n                );\n            } );\n        },\n\n        _destroy: function() {\n            this._mouseDestroy();\n\n            for ( var i = this.items.length - 1; i >= 0; i-- ) {\n                this.items[ i ].item.removeData( this.widgetName + \"-item\" );\n            }\n\n            return this;\n        },\n\n        _mouseCapture: function( event, overrideHandle ) {\n            var currentItem = null,\n                validHandle = false,\n                that = this;\n\n            if ( this.reverting ) {\n                return false;\n            }\n\n            if ( this.options.disabled || this.options.type === \"static\" ) {\n                return false;\n            }\n\n            //We have to refresh the items data once first\n            this._refreshItems( event );\n\n            //Find out if the clicked node (or one of its parents) is a actual item in this.items\n            $( event.target ).parents().each( function() {\n                if ( $.data( this, that.widgetName + \"-item\" ) === that ) {\n                    currentItem = $( this );\n                    return false;\n                }\n            } );\n            if ( $.data( event.target, that.widgetName + \"-item\" ) === that ) {\n                currentItem = $( event.target );\n            }\n\n            if ( !currentItem ) {\n                return false;\n            }\n            if ( this.options.handle && !overrideHandle ) {\n                $( this.options.handle, currentItem ).find( \"*\" ).addBack().each( function() {\n                    if ( this === event.target ) {\n                        validHandle = true;\n                    }\n                } );\n                if ( !validHandle ) {\n                    return false;\n                }\n            }\n\n            this.currentItem = currentItem;\n            this._removeCurrentsFromItems();\n            return true;\n\n        },\n\n        _mouseStart: function( event, overrideHandle, noActivation ) {\n\n            var i, body,\n                o = this.options;\n\n            this.currentContainer = this;\n\n            //We only need to call refreshPositions, because the refreshItems call has been moved to\n            // mouseCapture\n            this.refreshPositions();\n\n            //Prepare the dragged items parent\n            this.appendTo = $( o.appendTo !== \"parent\" ?\n                o.appendTo :\n                this.currentItem.parent() );\n\n            //Create and append the visible helper\n            this.helper = this._createHelper( event );\n\n            //Cache the helper size\n            this._cacheHelperProportions();\n\n            /*\n             * - Position generation -\n             * This block generates everything position related - it's the core of draggables.\n             */\n\n            //Cache the margins of the original element\n            this._cacheMargins();\n\n            //The element's absolute position on the page minus margins\n            this.offset = this.currentItem.offset();\n            this.offset = {\n                top: this.offset.top - this.margins.top,\n                left: this.offset.left - this.margins.left\n            };\n\n            $.extend( this.offset, {\n                click: { //Where the click happened, relative to the element\n                    left: event.pageX - this.offset.left,\n                    top: event.pageY - this.offset.top\n                },\n\n                // This is a relative to absolute position minus the actual position calculation -\n                // only used for relative positioned helper\n                relative: this._getRelativeOffset()\n            } );\n\n            // After we get the helper offset, but before we get the parent offset we can\n            // change the helper's position to absolute\n            // TODO: Still need to figure out a way to make relative sorting possible\n            this.helper.css( \"position\", \"absolute\" );\n            this.cssPosition = this.helper.css( \"position\" );\n\n            //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n            if ( o.cursorAt ) {\n                this._adjustOffsetFromHelper( o.cursorAt );\n            }\n\n            //Cache the former DOM position\n            this.domPosition = {\n                prev: this.currentItem.prev()[ 0 ],\n                parent: this.currentItem.parent()[ 0 ]\n            };\n\n            // If the helper is not the original, hide the original so it's not playing any role during\n            // the drag, won't cause anything bad this way\n            if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {\n                this.currentItem.hide();\n            }\n\n            //Create the placeholder\n            this._createPlaceholder();\n\n            //Get the next scrolling parent\n            this.scrollParent = this.placeholder.scrollParent();\n\n            $.extend( this.offset, {\n                parent: this._getParentOffset()\n            } );\n\n            //Set a containment if given in the options\n            if ( o.containment ) {\n                this._setContainment();\n            }\n\n            if ( o.cursor && o.cursor !== \"auto\" ) { // cursor option\n                body = this.document.find( \"body\" );\n\n                // Support: IE\n                this.storedCursor = body.css( \"cursor\" );\n                body.css( \"cursor\", o.cursor );\n\n                this.storedStylesheet =\n                    $( \"<style>*{ cursor: \" + o.cursor + \" !important; }</style>\" ).appendTo( body );\n            }\n\n            // We need to make sure to grab the zIndex before setting the\n            // opacity, because setting the opacity to anything lower than 1\n            // causes the zIndex to change from \"auto\" to 0.\n            if ( o.zIndex ) { // zIndex option\n                if ( this.helper.css( \"zIndex\" ) ) {\n                    this._storedZIndex = this.helper.css( \"zIndex\" );\n                }\n                this.helper.css( \"zIndex\", o.zIndex );\n            }\n\n            if ( o.opacity ) { // opacity option\n                if ( this.helper.css( \"opacity\" ) ) {\n                    this._storedOpacity = this.helper.css( \"opacity\" );\n                }\n                this.helper.css( \"opacity\", o.opacity );\n            }\n\n            //Prepare scrolling\n            if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                this.scrollParent[ 0 ].tagName !== \"HTML\" ) {\n                this.overflowOffset = this.scrollParent.offset();\n            }\n\n            //Call callbacks\n            this._trigger( \"start\", event, this._uiHash() );\n\n            //Recache the helper size\n            if ( !this._preserveHelperProportions ) {\n                this._cacheHelperProportions();\n            }\n\n            //Post \"activate\" events to possible containers\n            if ( !noActivation ) {\n                for ( i = this.containers.length - 1; i >= 0; i-- ) {\n                    this.containers[ i ]._trigger( \"activate\", event, this._uiHash( this ) );\n                }\n            }\n\n            //Prepare possible droppables\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.current = this;\n            }\n\n            if ( $.ui.ddmanager && !o.dropBehaviour ) {\n                $.ui.ddmanager.prepareOffsets( this, event );\n            }\n\n            this.dragging = true;\n\n            this._addClass( this.helper, \"ui-sortable-helper\" );\n\n            //Move the helper, if needed\n            if ( !this.helper.parent().is( this.appendTo ) ) {\n                this.helper.detach().appendTo( this.appendTo );\n\n                //Update position\n                this.offset.parent = this._getParentOffset();\n            }\n\n            //Generate the original position\n            this.position = this.originalPosition = this._generatePosition( event );\n            this.originalPageX = event.pageX;\n            this.originalPageY = event.pageY;\n            this.lastPositionAbs = this.positionAbs = this._convertPositionTo( \"absolute\" );\n\n            this._mouseDrag( event );\n\n            return true;\n\n        },\n\n        _scroll: function( event ) {\n            var o = this.options,\n                scrolled = false;\n\n            if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                this.scrollParent[ 0 ].tagName !== \"HTML\" ) {\n\n                if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -\n                    event.pageY < o.scrollSensitivity ) {\n                    this.scrollParent[ 0 ].scrollTop =\n                        scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;\n                } else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {\n                    this.scrollParent[ 0 ].scrollTop =\n                        scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;\n                }\n\n                if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -\n                    event.pageX < o.scrollSensitivity ) {\n                    this.scrollParent[ 0 ].scrollLeft = scrolled =\n                        this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;\n                } else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {\n                    this.scrollParent[ 0 ].scrollLeft = scrolled =\n                        this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;\n                }\n\n            } else {\n\n                if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {\n                    scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );\n                } else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <\n                    o.scrollSensitivity ) {\n                    scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );\n                }\n\n                if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {\n                    scrolled = this.document.scrollLeft(\n                        this.document.scrollLeft() - o.scrollSpeed\n                    );\n                } else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <\n                    o.scrollSensitivity ) {\n                    scrolled = this.document.scrollLeft(\n                        this.document.scrollLeft() + o.scrollSpeed\n                    );\n                }\n\n            }\n\n            return scrolled;\n        },\n\n        _mouseDrag: function( event ) {\n            var i, item, itemElement, intersection,\n                o = this.options;\n\n            //Compute the helpers position\n            this.position = this._generatePosition( event );\n            this.positionAbs = this._convertPositionTo( \"absolute\" );\n\n            //Set the helper position\n            if ( !this.options.axis || this.options.axis !== \"y\" ) {\n                this.helper[ 0 ].style.left = this.position.left + \"px\";\n            }\n            if ( !this.options.axis || this.options.axis !== \"x\" ) {\n                this.helper[ 0 ].style.top = this.position.top + \"px\";\n            }\n\n            //Do scrolling\n            if ( o.scroll ) {\n                if ( this._scroll( event ) !== false ) {\n\n                    //Update item positions used in position checks\n                    this._refreshItemPositions( true );\n\n                    if ( $.ui.ddmanager && !o.dropBehaviour ) {\n                        $.ui.ddmanager.prepareOffsets( this, event );\n                    }\n                }\n            }\n\n            this.dragDirection = {\n                vertical: this._getDragVerticalDirection(),\n                horizontal: this._getDragHorizontalDirection()\n            };\n\n            //Rearrange\n            for ( i = this.items.length - 1; i >= 0; i-- ) {\n\n                //Cache variables and intersection, continue if no intersection\n                item = this.items[ i ];\n                itemElement = item.item[ 0 ];\n                intersection = this._intersectsWithPointer( item );\n                if ( !intersection ) {\n                    continue;\n                }\n\n                // Only put the placeholder inside the current Container, skip all\n                // items from other containers. This works because when moving\n                // an item from one container to another the\n                // currentContainer is switched before the placeholder is moved.\n                //\n                // Without this, moving items in \"sub-sortables\" can cause\n                // the placeholder to jitter between the outer and inner container.\n                if ( item.instance !== this.currentContainer ) {\n                    continue;\n                }\n\n                // Cannot intersect with itself\n                // no useless actions that have been done before\n                // no action if the item moved is the parent of the item checked\n                if ( itemElement !== this.currentItem[ 0 ] &&\n                    this.placeholder[ intersection === 1 ?\n                        \"next\" : \"prev\" ]()[ 0 ] !== itemElement &&\n                    !$.contains( this.placeholder[ 0 ], itemElement ) &&\n                    ( this.options.type === \"semi-dynamic\" ?\n                            !$.contains( this.element[ 0 ], itemElement ) :\n                            true\n                    )\n                ) {\n\n                    this.direction = intersection === 1 ? \"down\" : \"up\";\n\n                    if ( this.options.tolerance === \"pointer\" ||\n                        this._intersectsWithSides( item ) ) {\n                        this._rearrange( event, item );\n                    } else {\n                        break;\n                    }\n\n                    this._trigger( \"change\", event, this._uiHash() );\n                    break;\n                }\n            }\n\n            //Post events to containers\n            this._contactContainers( event );\n\n            //Interconnect with droppables\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.drag( this, event );\n            }\n\n            //Call callbacks\n            this._trigger( \"sort\", event, this._uiHash() );\n\n            this.lastPositionAbs = this.positionAbs;\n            return false;\n\n        },\n\n        _mouseStop: function( event, noPropagation ) {\n\n            if ( !event ) {\n                return;\n            }\n\n            //If we are using droppables, inform the manager about the drop\n            if ( $.ui.ddmanager && !this.options.dropBehaviour ) {\n                $.ui.ddmanager.drop( this, event );\n            }\n\n            if ( this.options.revert ) {\n                var that = this,\n                    cur = this.placeholder.offset(),\n                    axis = this.options.axis,\n                    animation = {};\n\n                if ( !axis || axis === \"x\" ) {\n                    animation.left = cur.left - this.offset.parent.left - this.margins.left +\n                        ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?\n                                0 :\n                                this.offsetParent[ 0 ].scrollLeft\n                        );\n                }\n                if ( !axis || axis === \"y\" ) {\n                    animation.top = cur.top - this.offset.parent.top - this.margins.top +\n                        ( this.offsetParent[ 0 ] === this.document[ 0 ].body ?\n                                0 :\n                                this.offsetParent[ 0 ].scrollTop\n                        );\n                }\n                this.reverting = true;\n                $( this.helper ).animate(\n                    animation,\n                    parseInt( this.options.revert, 10 ) || 500,\n                    function() {\n                        that._clear( event );\n                    }\n                );\n            } else {\n                this._clear( event, noPropagation );\n            }\n\n            return false;\n\n        },\n\n        cancel: function() {\n\n            if ( this.dragging ) {\n\n                this._mouseUp( new $.Event( \"mouseup\", { target: null } ) );\n\n                if ( this.options.helper === \"original\" ) {\n                    this.currentItem.css( this._storedCSS );\n                    this._removeClass( this.currentItem, \"ui-sortable-helper\" );\n                } else {\n                    this.currentItem.show();\n                }\n\n                //Post deactivating events to containers\n                for ( var i = this.containers.length - 1; i >= 0; i-- ) {\n                    this.containers[ i ]._trigger( \"deactivate\", null, this._uiHash( this ) );\n                    if ( this.containers[ i ].containerCache.over ) {\n                        this.containers[ i ]._trigger( \"out\", null, this._uiHash( this ) );\n                        this.containers[ i ].containerCache.over = 0;\n                    }\n                }\n\n            }\n\n            if ( this.placeholder ) {\n\n                //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n                // it unbinds ALL events from the original node!\n                if ( this.placeholder[ 0 ].parentNode ) {\n                    this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );\n                }\n                if ( this.options.helper !== \"original\" && this.helper &&\n                    this.helper[ 0 ].parentNode ) {\n                    this.helper.remove();\n                }\n\n                $.extend( this, {\n                    helper: null,\n                    dragging: false,\n                    reverting: false,\n                    _noFinalSort: null\n                } );\n\n                if ( this.domPosition.prev ) {\n                    $( this.domPosition.prev ).after( this.currentItem );\n                } else {\n                    $( this.domPosition.parent ).prepend( this.currentItem );\n                }\n            }\n\n            return this;\n\n        },\n\n        serialize: function( o ) {\n\n            var items = this._getItemsAsjQuery( o && o.connected ),\n                str = [];\n            o = o || {};\n\n            $( items ).each( function() {\n                var res = ( $( o.item || this ).attr( o.attribute || \"id\" ) || \"\" )\n                    .match( o.expression || ( /(.+)[\\-=_](.+)/ ) );\n                if ( res ) {\n                    str.push(\n                        ( o.key || res[ 1 ] + \"[]\" ) +\n                        \"=\" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );\n                }\n            } );\n\n            if ( !str.length && o.key ) {\n                str.push( o.key + \"=\" );\n            }\n\n            return str.join( \"&\" );\n\n        },\n\n        toArray: function( o ) {\n\n            var items = this._getItemsAsjQuery( o && o.connected ),\n                ret = [];\n\n            o = o || {};\n\n            items.each( function() {\n                ret.push( $( o.item || this ).attr( o.attribute || \"id\" ) || \"\" );\n            } );\n            return ret;\n\n        },\n\n        /* Be careful with the following core functions */\n        _intersectsWith: function( item ) {\n\n            var x1 = this.positionAbs.left,\n                x2 = x1 + this.helperProportions.width,\n                y1 = this.positionAbs.top,\n                y2 = y1 + this.helperProportions.height,\n                l = item.left,\n                r = l + item.width,\n                t = item.top,\n                b = t + item.height,\n                dyClick = this.offset.click.top,\n                dxClick = this.offset.click.left,\n                isOverElementHeight = ( this.options.axis === \"x\" ) || ( ( y1 + dyClick ) > t &&\n                    ( y1 + dyClick ) < b ),\n                isOverElementWidth = ( this.options.axis === \"y\" ) || ( ( x1 + dxClick ) > l &&\n                    ( x1 + dxClick ) < r ),\n                isOverElement = isOverElementHeight && isOverElementWidth;\n\n            if ( this.options.tolerance === \"pointer\" ||\n                this.options.forcePointerForContainers ||\n                ( this.options.tolerance !== \"pointer\" &&\n                    this.helperProportions[ this.floating ? \"width\" : \"height\" ] >\n                    item[ this.floating ? \"width\" : \"height\" ] )\n            ) {\n                return isOverElement;\n            } else {\n\n                return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half\n                    x2 - ( this.helperProportions.width / 2 ) < r && // Left Half\n                    t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half\n                    y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half\n\n            }\n        },\n\n        _intersectsWithPointer: function( item ) {\n            var verticalDirection, horizontalDirection,\n                isOverElementHeight = ( this.options.axis === \"x\" ) ||\n                    this._isOverAxis(\n                        this.positionAbs.top + this.offset.click.top, item.top, item.height ),\n                isOverElementWidth = ( this.options.axis === \"y\" ) ||\n                    this._isOverAxis(\n                        this.positionAbs.left + this.offset.click.left, item.left, item.width ),\n                isOverElement = isOverElementHeight && isOverElementWidth;\n\n            if ( !isOverElement ) {\n                return false;\n            }\n\n            verticalDirection = this.dragDirection.vertical;\n            horizontalDirection = this.dragDirection.horizontal;\n\n            return this.floating ?\n                ( ( horizontalDirection === \"right\" || verticalDirection === \"down\" ) ? 2 : 1 ) :\n                ( verticalDirection && ( verticalDirection === \"down\" ? 2 : 1 ) );\n\n        },\n\n        _intersectsWithSides: function( item ) {\n\n            var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +\n                    this.offset.click.top, item.top + ( item.height / 2 ), item.height ),\n                isOverRightHalf = this._isOverAxis( this.positionAbs.left +\n                    this.offset.click.left, item.left + ( item.width / 2 ), item.width ),\n                verticalDirection = this.dragDirection.vertical,\n                horizontalDirection = this.dragDirection.horizontal;\n\n            if ( this.floating && horizontalDirection ) {\n                return ( ( horizontalDirection === \"right\" && isOverRightHalf ) ||\n                    ( horizontalDirection === \"left\" && !isOverRightHalf ) );\n            } else {\n                return verticalDirection && ( ( verticalDirection === \"down\" && isOverBottomHalf ) ||\n                    ( verticalDirection === \"up\" && !isOverBottomHalf ) );\n            }\n\n        },\n\n        _getDragVerticalDirection: function() {\n            var delta = this.positionAbs.top - this.lastPositionAbs.top;\n            return delta !== 0 && ( delta > 0 ? \"down\" : \"up\" );\n        },\n\n        _getDragHorizontalDirection: function() {\n            var delta = this.positionAbs.left - this.lastPositionAbs.left;\n            return delta !== 0 && ( delta > 0 ? \"right\" : \"left\" );\n        },\n\n        refresh: function( event ) {\n            this._refreshItems( event );\n            this._setHandleClassName();\n            this.refreshPositions();\n            return this;\n        },\n\n        _connectWith: function() {\n            var options = this.options;\n            return options.connectWith.constructor === String ?\n                [ options.connectWith ] :\n                options.connectWith;\n        },\n\n        _getItemsAsjQuery: function( connected ) {\n\n            var i, j, cur, inst,\n                items = [],\n                queries = [],\n                connectWith = this._connectWith();\n\n            if ( connectWith && connected ) {\n                for ( i = connectWith.length - 1; i >= 0; i-- ) {\n                    cur = $( connectWith[ i ], this.document[ 0 ] );\n                    for ( j = cur.length - 1; j >= 0; j-- ) {\n                        inst = $.data( cur[ j ], this.widgetFullName );\n                        if ( inst && inst !== this && !inst.options.disabled ) {\n                            queries.push( [ typeof inst.options.items === \"function\" ?\n                                inst.options.items.call( inst.element ) :\n                                $( inst.options.items, inst.element )\n                                    .not( \".ui-sortable-helper\" )\n                                    .not( \".ui-sortable-placeholder\" ), inst ] );\n                        }\n                    }\n                }\n            }\n\n            queries.push( [ typeof this.options.items === \"function\" ?\n                this.options.items\n                    .call( this.element, null, { options: this.options, item: this.currentItem } ) :\n                $( this.options.items, this.element )\n                    .not( \".ui-sortable-helper\" )\n                    .not( \".ui-sortable-placeholder\" ), this ] );\n\n            function addItems() {\n                items.push( this );\n            }\n            for ( i = queries.length - 1; i >= 0; i-- ) {\n                queries[ i ][ 0 ].each( addItems );\n            }\n\n            return $( items );\n\n        },\n\n        _removeCurrentsFromItems: function() {\n\n            var list = this.currentItem.find( \":data(\" + this.widgetName + \"-item)\" );\n\n            this.items = $.grep( this.items, function( item ) {\n                for ( var j = 0; j < list.length; j++ ) {\n                    if ( list[ j ] === item.item[ 0 ] ) {\n                        return false;\n                    }\n                }\n                return true;\n            } );\n\n        },\n\n        _refreshItems: function( event ) {\n\n            this.items = [];\n            this.containers = [ this ];\n\n            var i, j, cur, inst, targetData, _queries, item, queriesLength,\n                items = this.items,\n                queries = [ [ typeof this.options.items === \"function\" ?\n                    this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :\n                    $( this.options.items, this.element ), this ] ],\n                connectWith = this._connectWith();\n\n            //Shouldn't be run the first time through due to massive slow-down\n            if ( connectWith && this.ready ) {\n                for ( i = connectWith.length - 1; i >= 0; i-- ) {\n                    cur = $( connectWith[ i ], this.document[ 0 ] );\n                    for ( j = cur.length - 1; j >= 0; j-- ) {\n                        inst = $.data( cur[ j ], this.widgetFullName );\n                        if ( inst && inst !== this && !inst.options.disabled ) {\n                            queries.push( [ typeof inst.options.items === \"function\" ?\n                                inst.options.items\n                                    .call( inst.element[ 0 ], event, { item: this.currentItem } ) :\n                                $( inst.options.items, inst.element ), inst ] );\n                            this.containers.push( inst );\n                        }\n                    }\n                }\n            }\n\n            for ( i = queries.length - 1; i >= 0; i-- ) {\n                targetData = queries[ i ][ 1 ];\n                _queries = queries[ i ][ 0 ];\n\n                for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {\n                    item = $( _queries[ j ] );\n\n                    // Data for target checking (mouse manager)\n                    item.data( this.widgetName + \"-item\", targetData );\n\n                    items.push( {\n                        item: item,\n                        instance: targetData,\n                        width: 0, height: 0,\n                        left: 0, top: 0\n                    } );\n                }\n            }\n\n        },\n\n        _refreshItemPositions: function( fast ) {\n            var i, item, t, p;\n\n            for ( i = this.items.length - 1; i >= 0; i-- ) {\n                item = this.items[ i ];\n\n                //We ignore calculating positions of all connected containers when we're not over them\n                if ( this.currentContainer && item.instance !== this.currentContainer &&\n                    item.item[ 0 ] !== this.currentItem[ 0 ] ) {\n                    continue;\n                }\n\n                t = this.options.toleranceElement ?\n                    $( this.options.toleranceElement, item.item ) :\n                    item.item;\n\n                if ( !fast ) {\n                    item.width = t.outerWidth();\n                    item.height = t.outerHeight();\n                }\n\n                p = t.offset();\n                item.left = p.left;\n                item.top = p.top;\n            }\n        },\n\n        refreshPositions: function( fast ) {\n\n            // Determine whether items are being displayed horizontally\n            this.floating = this.items.length ?\n                this.options.axis === \"x\" || this._isFloating( this.items[ 0 ].item ) :\n                false;\n\n            // This has to be redone because due to the item being moved out/into the offsetParent,\n            // the offsetParent's position will change\n            if ( this.offsetParent && this.helper ) {\n                this.offset.parent = this._getParentOffset();\n            }\n\n            this._refreshItemPositions( fast );\n\n            var i, p;\n\n            if ( this.options.custom && this.options.custom.refreshContainers ) {\n                this.options.custom.refreshContainers.call( this );\n            } else {\n                for ( i = this.containers.length - 1; i >= 0; i-- ) {\n                    p = this.containers[ i ].element.offset();\n                    this.containers[ i ].containerCache.left = p.left;\n                    this.containers[ i ].containerCache.top = p.top;\n                    this.containers[ i ].containerCache.width =\n                        this.containers[ i ].element.outerWidth();\n                    this.containers[ i ].containerCache.height =\n                        this.containers[ i ].element.outerHeight();\n                }\n            }\n\n            return this;\n        },\n\n        _createPlaceholder: function( that ) {\n            that = that || this;\n            var className, nodeName,\n                o = that.options;\n\n            if ( !o.placeholder || o.placeholder.constructor === String ) {\n                className = o.placeholder;\n                nodeName = that.currentItem[ 0 ].nodeName.toLowerCase();\n                o.placeholder = {\n                    element: function() {\n\n                        var element = $( \"<\" + nodeName + \">\", that.document[ 0 ] );\n\n                        that._addClass( element, \"ui-sortable-placeholder\",\n                            className || that.currentItem[ 0 ].className )\n                            ._removeClass( element, \"ui-sortable-helper\" );\n\n                        if ( nodeName === \"tbody\" ) {\n                            that._createTrPlaceholder(\n                                that.currentItem.find( \"tr\" ).eq( 0 ),\n                                $( \"<tr>\", that.document[ 0 ] ).appendTo( element )\n                            );\n                        } else if ( nodeName === \"tr\" ) {\n                            that._createTrPlaceholder( that.currentItem, element );\n                        } else if ( nodeName === \"img\" ) {\n                            element.attr( \"src\", that.currentItem.attr( \"src\" ) );\n                        }\n\n                        if ( !className ) {\n                            element.css( \"visibility\", \"hidden\" );\n                        }\n\n                        return element;\n                    },\n                    update: function( container, p ) {\n\n                        // 1. If a className is set as 'placeholder option, we don't force sizes -\n                        // the class is responsible for that\n                        // 2. The option 'forcePlaceholderSize can be enabled to force it even if a\n                        // class name is specified\n                        if ( className && !o.forcePlaceholderSize ) {\n                            return;\n                        }\n\n                        // If the element doesn't have a actual height or width by itself (without\n                        // styles coming from a stylesheet), it receives the inline height and width\n                        // from the dragged item. Or, if it's a tbody or tr, it's going to have a height\n                        // anyway since we're populating them with <td>s above, but they're unlikely to\n                        // be the correct height on their own if the row heights are dynamic, so we'll\n                        // always assign the height of the dragged item given forcePlaceholderSize\n                        // is true.\n                        if ( !p.height() || ( o.forcePlaceholderSize &&\n                            ( nodeName === \"tbody\" || nodeName === \"tr\" ) ) ) {\n                            p.height(\n                                that.currentItem.innerHeight() -\n                                parseInt( that.currentItem.css( \"paddingTop\" ) || 0, 10 ) -\n                                parseInt( that.currentItem.css( \"paddingBottom\" ) || 0, 10 ) );\n                        }\n                        if ( !p.width() ) {\n                            p.width(\n                                that.currentItem.innerWidth() -\n                                parseInt( that.currentItem.css( \"paddingLeft\" ) || 0, 10 ) -\n                                parseInt( that.currentItem.css( \"paddingRight\" ) || 0, 10 ) );\n                        }\n                    }\n                };\n            }\n\n            //Create the placeholder\n            that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );\n\n            //Append it after the actual current item\n            that.currentItem.after( that.placeholder );\n\n            //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)\n            o.placeholder.update( that, that.placeholder );\n\n        },\n\n        _createTrPlaceholder: function( sourceTr, targetTr ) {\n            var that = this;\n\n            sourceTr.children().each( function() {\n                $( \"<td>&#160;</td>\", that.document[ 0 ] )\n                    .attr( \"colspan\", $( this ).attr( \"colspan\" ) || 1 )\n                    .appendTo( targetTr );\n            } );\n        },\n\n        _contactContainers: function( event ) {\n            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,\n                floating, axis,\n                innermostContainer = null,\n                innermostIndex = null;\n\n            // Get innermost container that intersects with item\n            for ( i = this.containers.length - 1; i >= 0; i-- ) {\n\n                // Never consider a container that's located within the item itself\n                if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {\n                    continue;\n                }\n\n                if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {\n\n                    // If we've already found a container and it's more \"inner\" than this, then continue\n                    if ( innermostContainer &&\n                        $.contains(\n                            this.containers[ i ].element[ 0 ],\n                            innermostContainer.element[ 0 ] ) ) {\n                        continue;\n                    }\n\n                    innermostContainer = this.containers[ i ];\n                    innermostIndex = i;\n\n                } else {\n\n                    // container doesn't intersect. trigger \"out\" event if necessary\n                    if ( this.containers[ i ].containerCache.over ) {\n                        this.containers[ i ]._trigger( \"out\", event, this._uiHash( this ) );\n                        this.containers[ i ].containerCache.over = 0;\n                    }\n                }\n\n            }\n\n            // If no intersecting containers found, return\n            if ( !innermostContainer ) {\n                return;\n            }\n\n            // Move the item into the container if it's not there already\n            if ( this.containers.length === 1 ) {\n                if ( !this.containers[ innermostIndex ].containerCache.over ) {\n                    this.containers[ innermostIndex ]._trigger( \"over\", event, this._uiHash( this ) );\n                    this.containers[ innermostIndex ].containerCache.over = 1;\n                }\n            } else {\n\n                // When entering a new container, we will find the item with the least distance and\n                // append our item near it\n                dist = 10000;\n                itemWithLeastDistance = null;\n                floating = innermostContainer.floating || this._isFloating( this.currentItem );\n                posProperty = floating ? \"left\" : \"top\";\n                sizeProperty = floating ? \"width\" : \"height\";\n                axis = floating ? \"pageX\" : \"pageY\";\n\n                for ( j = this.items.length - 1; j >= 0; j-- ) {\n                    if ( !$.contains(\n                        this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )\n                    ) {\n                        continue;\n                    }\n                    if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {\n                        continue;\n                    }\n\n                    cur = this.items[ j ].item.offset()[ posProperty ];\n                    nearBottom = false;\n                    if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {\n                        nearBottom = true;\n                    }\n\n                    if ( Math.abs( event[ axis ] - cur ) < dist ) {\n                        dist = Math.abs( event[ axis ] - cur );\n                        itemWithLeastDistance = this.items[ j ];\n                        this.direction = nearBottom ? \"up\" : \"down\";\n                    }\n                }\n\n                //Check if dropOnEmpty is enabled\n                if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {\n                    return;\n                }\n\n                if ( this.currentContainer === this.containers[ innermostIndex ] ) {\n                    if ( !this.currentContainer.containerCache.over ) {\n                        this.containers[ innermostIndex ]._trigger( \"over\", event, this._uiHash() );\n                        this.currentContainer.containerCache.over = 1;\n                    }\n                    return;\n                }\n\n                if ( itemWithLeastDistance ) {\n                    this._rearrange( event, itemWithLeastDistance, null, true );\n                } else {\n                    this._rearrange( event, null, this.containers[ innermostIndex ].element, true );\n                }\n                this._trigger( \"change\", event, this._uiHash() );\n                this.containers[ innermostIndex ]._trigger( \"change\", event, this._uiHash( this ) );\n                this.currentContainer = this.containers[ innermostIndex ];\n\n                //Update the placeholder\n                this.options.placeholder.update( this.currentContainer, this.placeholder );\n\n                //Update scrollParent\n                this.scrollParent = this.placeholder.scrollParent();\n\n                //Update overflowOffset\n                if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                    this.scrollParent[ 0 ].tagName !== \"HTML\" ) {\n                    this.overflowOffset = this.scrollParent.offset();\n                }\n\n                this.containers[ innermostIndex ]._trigger( \"over\", event, this._uiHash( this ) );\n                this.containers[ innermostIndex ].containerCache.over = 1;\n            }\n\n        },\n\n        _createHelper: function( event ) {\n\n            var o = this.options,\n                helper = typeof o.helper === \"function\" ?\n                    $( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :\n                    ( o.helper === \"clone\" ? this.currentItem.clone() : this.currentItem );\n\n            //Add the helper to the DOM if that didn't happen already\n            if ( !helper.parents( \"body\" ).length ) {\n                this.appendTo[ 0 ].appendChild( helper[ 0 ] );\n            }\n\n            if ( helper[ 0 ] === this.currentItem[ 0 ] ) {\n                this._storedCSS = {\n                    width: this.currentItem[ 0 ].style.width,\n                    height: this.currentItem[ 0 ].style.height,\n                    position: this.currentItem.css( \"position\" ),\n                    top: this.currentItem.css( \"top\" ),\n                    left: this.currentItem.css( \"left\" )\n                };\n            }\n\n            if ( !helper[ 0 ].style.width || o.forceHelperSize ) {\n                helper.width( this.currentItem.width() );\n            }\n            if ( !helper[ 0 ].style.height || o.forceHelperSize ) {\n                helper.height( this.currentItem.height() );\n            }\n\n            return helper;\n\n        },\n\n        _adjustOffsetFromHelper: function( obj ) {\n            if ( typeof obj === \"string\" ) {\n                obj = obj.split( \" \" );\n            }\n            if ( Array.isArray( obj ) ) {\n                obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };\n            }\n            if ( \"left\" in obj ) {\n                this.offset.click.left = obj.left + this.margins.left;\n            }\n            if ( \"right\" in obj ) {\n                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n            }\n            if ( \"top\" in obj ) {\n                this.offset.click.top = obj.top + this.margins.top;\n            }\n            if ( \"bottom\" in obj ) {\n                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n            }\n        },\n\n        _getParentOffset: function() {\n\n            //Get the offsetParent and cache its position\n            this.offsetParent = this.helper.offsetParent();\n            var po = this.offsetParent.offset();\n\n            // This is a special case where we need to modify a offset calculated on start, since the\n            // following happened:\n            // 1. The position of the helper is absolute, so it's position is calculated based on the\n            // next positioned parent\n            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n            // the document, which means that the scroll is included in the initial calculation of the\n            // offset of the parent, and never recalculated upon drag\n            if ( this.cssPosition === \"absolute\" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {\n                po.left += this.scrollParent.scrollLeft();\n                po.top += this.scrollParent.scrollTop();\n            }\n\n            // This needs to be actually done for all browsers, since pageX/pageY includes this\n            // information with an ugly IE fix\n            if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||\n                ( this.offsetParent[ 0 ].tagName &&\n                    this.offsetParent[ 0 ].tagName.toLowerCase() === \"html\" && $.ui.ie ) ) {\n                po = { top: 0, left: 0 };\n            }\n\n            return {\n                top: po.top + ( parseInt( this.offsetParent.css( \"borderTopWidth\" ), 10 ) || 0 ),\n                left: po.left + ( parseInt( this.offsetParent.css( \"borderLeftWidth\" ), 10 ) || 0 )\n            };\n\n        },\n\n        _getRelativeOffset: function() {\n\n            if ( this.cssPosition === \"relative\" ) {\n                var p = this.currentItem.position();\n                return {\n                    top: p.top - ( parseInt( this.helper.css( \"top\" ), 10 ) || 0 ) +\n                        this.scrollParent.scrollTop(),\n                    left: p.left - ( parseInt( this.helper.css( \"left\" ), 10 ) || 0 ) +\n                        this.scrollParent.scrollLeft()\n                };\n            } else {\n                return { top: 0, left: 0 };\n            }\n\n        },\n\n        _cacheMargins: function() {\n            this.margins = {\n                left: ( parseInt( this.currentItem.css( \"marginLeft\" ), 10 ) || 0 ),\n                top: ( parseInt( this.currentItem.css( \"marginTop\" ), 10 ) || 0 )\n            };\n        },\n\n        _cacheHelperProportions: function() {\n            this.helperProportions = {\n                width: this.helper.outerWidth(),\n                height: this.helper.outerHeight()\n            };\n        },\n\n        _setContainment: function() {\n\n            var ce, co, over,\n                o = this.options;\n            if ( o.containment === \"parent\" ) {\n                o.containment = this.helper[ 0 ].parentNode;\n            }\n            if ( o.containment === \"document\" || o.containment === \"window\" ) {\n                this.containment = [\n                    0 - this.offset.relative.left - this.offset.parent.left,\n                    0 - this.offset.relative.top - this.offset.parent.top,\n                    o.containment === \"document\" ?\n                        this.document.width() :\n                        this.window.width() - this.helperProportions.width - this.margins.left,\n                    ( o.containment === \"document\" ?\n                            ( this.document.height() || document.body.parentNode.scrollHeight ) :\n                            this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight\n                    ) - this.helperProportions.height - this.margins.top\n                ];\n            }\n\n            if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {\n                ce = $( o.containment )[ 0 ];\n                co = $( o.containment ).offset();\n                over = ( $( ce ).css( \"overflow\" ) !== \"hidden\" );\n\n                this.containment = [\n                    co.left + ( parseInt( $( ce ).css( \"borderLeftWidth\" ), 10 ) || 0 ) +\n                    ( parseInt( $( ce ).css( \"paddingLeft\" ), 10 ) || 0 ) - this.margins.left,\n                    co.top + ( parseInt( $( ce ).css( \"borderTopWidth\" ), 10 ) || 0 ) +\n                    ( parseInt( $( ce ).css( \"paddingTop\" ), 10 ) || 0 ) - this.margins.top,\n                    co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -\n                    ( parseInt( $( ce ).css( \"borderLeftWidth\" ), 10 ) || 0 ) -\n                    ( parseInt( $( ce ).css( \"paddingRight\" ), 10 ) || 0 ) -\n                    this.helperProportions.width - this.margins.left,\n                    co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -\n                    ( parseInt( $( ce ).css( \"borderTopWidth\" ), 10 ) || 0 ) -\n                    ( parseInt( $( ce ).css( \"paddingBottom\" ), 10 ) || 0 ) -\n                    this.helperProportions.height - this.margins.top\n                ];\n            }\n\n        },\n\n        _convertPositionTo: function( d, pos ) {\n\n            if ( !pos ) {\n                pos = this.position;\n            }\n            var mod = d === \"absolute\" ? 1 : -1,\n                scroll = this.cssPosition === \"absolute\" &&\n                !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                    $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?\n                    this.offsetParent :\n                    this.scrollParent,\n                scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pos.top\t+\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top * mod -\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.scrollParent.scrollTop() :\n                        ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pos.left +\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left * mod\t-\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :\n                            scroll.scrollLeft() ) * mod )\n                )\n            };\n\n        },\n\n        _generatePosition: function( event ) {\n\n            var top, left,\n                o = this.options,\n                pageX = event.pageX,\n                pageY = event.pageY,\n                scroll = this.cssPosition === \"absolute\" &&\n                !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                    $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?\n                    this.offsetParent :\n                    this.scrollParent,\n                scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );\n\n            // This is another very weird special case that only happens for relative elements:\n            // 1. If the css position is relative\n            // 2. and the scroll parent is the document or similar to the offset parent\n            // we have to refresh the relative offset during the scroll so there are no jumps\n            if ( this.cssPosition === \"relative\" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&\n                this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {\n                this.offset.relative = this._getRelativeOffset();\n            }\n\n            /*\n             * - Position constraining -\n             * Constrain the position to a mix of grid, containment.\n             */\n\n            if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options\n\n                if ( this.containment ) {\n                    if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {\n                        pageX = this.containment[ 0 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {\n                        pageY = this.containment[ 1 ] + this.offset.click.top;\n                    }\n                    if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {\n                        pageX = this.containment[ 2 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {\n                        pageY = this.containment[ 3 ] + this.offset.click.top;\n                    }\n                }\n\n                if ( o.grid ) {\n                    top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /\n                        o.grid[ 1 ] ) * o.grid[ 1 ];\n                    pageY = this.containment ?\n                        ( ( top - this.offset.click.top >= this.containment[ 1 ] &&\n                            top - this.offset.click.top <= this.containment[ 3 ] ) ?\n                            top :\n                            ( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?\n                                top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :\n                        top;\n\n                    left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /\n                        o.grid[ 0 ] ) * o.grid[ 0 ];\n                    pageX = this.containment ?\n                        ( ( left - this.offset.click.left >= this.containment[ 0 ] &&\n                            left - this.offset.click.left <= this.containment[ 2 ] ) ?\n                            left :\n                            ( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?\n                                left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :\n                        left;\n                }\n\n            }\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pageY -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.top -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top +\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.scrollParent.scrollTop() :\n                        ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pageX -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.left -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left +\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.scrollParent.scrollLeft() :\n                        scrollIsRootNode ? 0 : scroll.scrollLeft() ) )\n                )\n            };\n\n        },\n\n        _rearrange: function( event, i, a, hardRefresh ) {\n\n            if ( a ) {\n                a[ 0 ].appendChild( this.placeholder[ 0 ] );\n            } else {\n                i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],\n                    ( this.direction === \"down\" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );\n            }\n\n            //Various things done here to improve the performance:\n            // 1. we create a setTimeout, that calls refreshPositions\n            // 2. on the instance, we have a counter variable, that get's higher after every append\n            // 3. on the local scope, we copy the counter variable, and check in the timeout,\n            // if it's still the same\n            // 4. this lets only the last addition to the timeout stack through\n            this.counter = this.counter ? ++this.counter : 1;\n            var counter = this.counter;\n\n            this._delay( function() {\n                if ( counter === this.counter ) {\n\n                    //Precompute after each DOM insertion, NOT on mousemove\n                    this.refreshPositions( !hardRefresh );\n                }\n            } );\n\n        },\n\n        _clear: function( event, noPropagation ) {\n\n            this.reverting = false;\n\n            // We delay all events that have to be triggered to after the point where the placeholder\n            // has been removed and everything else normalized again\n            var i,\n                delayedTriggers = [];\n\n            // We first have to update the dom position of the actual currentItem\n            // Note: don't do it if the current item is already removed (by a user), or it gets\n            // reappended (see #4088)\n            if ( !this._noFinalSort && this.currentItem.parent().length ) {\n                this.placeholder.before( this.currentItem );\n            }\n            this._noFinalSort = null;\n\n            if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {\n                for ( i in this._storedCSS ) {\n                    if ( this._storedCSS[ i ] === \"auto\" || this._storedCSS[ i ] === \"static\" ) {\n                        this._storedCSS[ i ] = \"\";\n                    }\n                }\n                this.currentItem.css( this._storedCSS );\n                this._removeClass( this.currentItem, \"ui-sortable-helper\" );\n            } else {\n                this.currentItem.show();\n            }\n\n            if ( this.fromOutside && !noPropagation ) {\n                delayedTriggers.push( function( event ) {\n                    this._trigger( \"receive\", event, this._uiHash( this.fromOutside ) );\n                } );\n            }\n            if ( ( this.fromOutside ||\n                this.domPosition.prev !==\n                this.currentItem.prev().not( \".ui-sortable-helper\" )[ 0 ] ||\n                this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {\n\n                // Trigger update callback if the DOM position has changed\n                delayedTriggers.push( function( event ) {\n                    this._trigger( \"update\", event, this._uiHash() );\n                } );\n            }\n\n            // Check if the items Container has Changed and trigger appropriate\n            // events.\n            if ( this !== this.currentContainer ) {\n                if ( !noPropagation ) {\n                    delayedTriggers.push( function( event ) {\n                        this._trigger( \"remove\", event, this._uiHash() );\n                    } );\n                    delayedTriggers.push( ( function( c ) {\n                        return function( event ) {\n                            c._trigger( \"receive\", event, this._uiHash( this ) );\n                        };\n                    } ).call( this, this.currentContainer ) );\n                    delayedTriggers.push( ( function( c ) {\n                        return function( event ) {\n                            c._trigger( \"update\", event, this._uiHash( this ) );\n                        };\n                    } ).call( this, this.currentContainer ) );\n                }\n            }\n\n            //Post events to containers\n            function delayEvent( type, instance, container ) {\n                return function( event ) {\n                    container._trigger( type, event, instance._uiHash( instance ) );\n                };\n            }\n            for ( i = this.containers.length - 1; i >= 0; i-- ) {\n                if ( !noPropagation ) {\n                    delayedTriggers.push( delayEvent( \"deactivate\", this, this.containers[ i ] ) );\n                }\n                if ( this.containers[ i ].containerCache.over ) {\n                    delayedTriggers.push( delayEvent( \"out\", this, this.containers[ i ] ) );\n                    this.containers[ i ].containerCache.over = 0;\n                }\n            }\n\n            //Do what was originally in plugins\n            if ( this.storedCursor ) {\n                this.document.find( \"body\" ).css( \"cursor\", this.storedCursor );\n                this.storedStylesheet.remove();\n            }\n            if ( this._storedOpacity ) {\n                this.helper.css( \"opacity\", this._storedOpacity );\n            }\n            if ( this._storedZIndex ) {\n                this.helper.css( \"zIndex\", this._storedZIndex === \"auto\" ? \"\" : this._storedZIndex );\n            }\n\n            this.dragging = false;\n\n            if ( !noPropagation ) {\n                this._trigger( \"beforeStop\", event, this._uiHash() );\n            }\n\n            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,\n            // it unbinds ALL events from the original node!\n            this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );\n\n            if ( !this.cancelHelperRemoval ) {\n                if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {\n                    this.helper.remove();\n                }\n                this.helper = null;\n            }\n\n            if ( !noPropagation ) {\n                for ( i = 0; i < delayedTriggers.length; i++ ) {\n\n                    // Trigger all delayed events\n                    delayedTriggers[ i ].call( this, event );\n                }\n                this._trigger( \"stop\", event, this._uiHash() );\n            }\n\n            this.fromOutside = false;\n            return !this.cancelHelperRemoval;\n\n        },\n\n        _trigger: function() {\n            if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {\n                this.cancel();\n            }\n        },\n\n        _uiHash: function( _inst ) {\n            var inst = _inst || this;\n            return {\n                helper: inst.helper,\n                placeholder: inst.placeholder || $( [] ),\n                position: inst.position,\n                originalPosition: inst.originalPosition,\n                offset: inst.positionAbs,\n                item: inst.currentItem,\n                sender: _inst ? _inst.element : null\n            };\n        }\n\n    } );\n\n} );\n","jquery/ui-modules/widgets/datepicker.js":"/* eslint-disable max-len, camelcase */\n/*!\n * jQuery UI Datepicker 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Datepicker\n//>>group: Widgets\n//>>description: Displays a calendar from an input or inline for selecting dates.\n//>>docs: http://api.jqueryui.com/datepicker/\n//>>demos: http://jqueryui.com/datepicker/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/datepicker.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../keycode\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.extend( $.ui, { datepicker: { version: \"1.13.2\" } } );\n\n    var datepicker_instActive;\n\n    function datepicker_getZindex( elem ) {\n        var position, value;\n        while ( elem.length && elem[ 0 ] !== document ) {\n\n            // Ignore z-index if position is set to a value where z-index is ignored by the browser\n            // This makes behavior of this function consistent across browsers\n            // WebKit always returns auto if the element is positioned\n            position = elem.css( \"position\" );\n            if ( position === \"absolute\" || position === \"relative\" || position === \"fixed\" ) {\n\n                // IE returns 0 when zIndex is not specified\n                // other browsers return a string\n                // we ignore the case of nested elements with an explicit value of 0\n                // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n                value = parseInt( elem.css( \"zIndex\" ), 10 );\n                if ( !isNaN( value ) && value !== 0 ) {\n                    return value;\n                }\n            }\n            elem = elem.parent();\n        }\n\n        return 0;\n    }\n\n    /* Date picker manager.\n       Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n       Settings for (groups of) date pickers are maintained in an instance object,\n       allowing multiple different settings on the same page. */\n\n    function Datepicker() {\n        this._curInst = null; // The current instance in use\n        this._keyEvent = false; // If the last event was a key event\n        this._disabledInputs = []; // List of date picker inputs that have been disabled\n        this._datepickerShowing = false; // True if the popup picker is showing , false if not\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\n        this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n        this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n        this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n        this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n        this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n        this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n        this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n        this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n        this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[ \"\" ] = { // Default regional settings\n            closeText: \"Done\", // Display text for close link\n            prevText: \"Prev\", // Display text for previous month link\n            nextText: \"Next\", // Display text for next month link\n            currentText: \"Today\", // Display text for current month link\n            monthNames: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ], // Names of months for drop-down and formatting\n            monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ], // For formatting\n            dayNames: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ], // For formatting\n            dayNamesShort: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ], // For formatting\n            dayNamesMin: [ \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" ], // Column headings for days starting at Sunday\n            weekHeader: \"Wk\", // Column header for week of the year\n            dateFormat: \"mm/dd/yy\", // See format options on parseDate\n            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...\n            isRTL: false, // True if right-to-left language, false if left-to-right\n            showMonthAfterYear: false, // True if the year select precedes month, false for month then year\n            yearSuffix: \"\", // Additional text to append to the year in the month headers,\n            selectMonthLabel: \"Select month\", // Invisible label for month selector\n            selectYearLabel: \"Select year\" // Invisible label for year selector\n        };\n        this._defaults = { // Global defaults for all the date picker instances\n            showOn: \"focus\", // \"focus\" for popup on focus,\n            // \"button\" for trigger button, or \"both\" for either\n            showAnim: \"fadeIn\", // Name of jQuery animation for popup\n            showOptions: {}, // Options for enhanced animations\n            defaultDate: null, // Used when field is blank: actual date,\n            // +/-number for offset from today, null for today\n            appendText: \"\", // Display text following the input box, e.g. showing the format\n            buttonText: \"...\", // Text for trigger button\n            buttonImage: \"\", // URL for trigger button image\n            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button\n            hideIfNoPrevNext: false, // True to hide next/previous month links\n            // if not applicable, false to just disable them\n            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links\n            gotoCurrent: false, // True if today link goes back to current selection instead\n            changeMonth: false, // True if month can be selected directly, false if only prev/next\n            changeYear: false, // True if year can be selected directly, false if only prev/next\n            yearRange: \"c-10:c+10\", // Range of years to display in drop-down,\n            // either relative to today's year (-nn:+nn), relative to currently displayed year\n            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n            showOtherMonths: false, // True to show dates in other months, false to leave blank\n            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable\n            showWeek: false, // True to show week of the year, false to not show it\n            calculateWeek: this.iso8601Week, // How to calculate the week of the year,\n            // takes a Date and returns the number of the week for it\n            shortYearCutoff: \"+10\", // Short year values < this are in the current century,\n            // > this are in the previous century,\n            // string value starting with \"+\" for current year + value\n            minDate: null, // The earliest selectable date, or null for no limit\n            maxDate: null, // The latest selectable date, or null for no limit\n            duration: \"fast\", // Duration of display/closure\n            beforeShowDay: null, // Function that takes a date and returns an array with\n            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n            // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n            beforeShow: null, // Function that takes an input field and\n            // returns a set of custom settings for the date picker\n            onSelect: null, // Define a callback function when a date is selected\n            onChangeMonthYear: null, // Define a callback function when the month or year is changed\n            onClose: null, // Define a callback function when the datepicker is closed\n            onUpdateDatepicker: null, // Define a callback function when the datepicker is updated\n            numberOfMonths: 1, // Number of months to show at a time\n            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)\n            stepMonths: 1, // Number of months to step back/forward\n            stepBigMonths: 12, // Number of months to step back/forward for the big links\n            altField: \"\", // Selector for an alternate field to store selected dates into\n            altFormat: \"\", // The date format to use for the alternate field\n            constrainInput: true, // The input is constrained by the current date format\n            showButtonPanel: false, // True to show button panel, false to not show it\n            autoSize: false, // True to size the input for the date format, false to leave as is\n            disabled: false // The initial disabled state\n        };\n        $.extend( this._defaults, this.regional[ \"\" ] );\n        this.regional.en = $.extend( true, {}, this.regional[ \"\" ] );\n        this.regional[ \"en-US\" ] = $.extend( true, {}, this.regional.en );\n        this.dpDiv = datepicker_bindHover( $( \"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\" ) );\n    }\n\n    $.extend( Datepicker.prototype, {\n\n        /* Class name added to elements to indicate already configured with a date picker. */\n        markerClassName: \"hasDatepicker\",\n\n        //Keep track of the maximum number of rows displayed (see #7043)\n        maxRows: 4,\n\n        // TODO rename to \"widget\" when switching to widget factory\n        _widgetDatepicker: function() {\n            return this.dpDiv;\n        },\n\n        /* Override the default settings for all instances of the date picker.\n         * @param  settings  object - the new settings to use as defaults (anonymous object)\n         * @return the manager object\n         */\n        setDefaults: function( settings ) {\n            datepicker_extendRemove( this._defaults, settings || {} );\n            return this;\n        },\n\n        /* Attach the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n         */\n        _attachDatepicker: function( target, settings ) {\n            var nodeName, inline, inst;\n            nodeName = target.nodeName.toLowerCase();\n            inline = ( nodeName === \"div\" || nodeName === \"span\" );\n            if ( !target.id ) {\n                this.uuid += 1;\n                target.id = \"dp\" + this.uuid;\n            }\n            inst = this._newInst( $( target ), inline );\n            inst.settings = $.extend( {}, settings || {} );\n            if ( nodeName === \"input\" ) {\n                this._connectDatepicker( target, inst );\n            } else if ( inline ) {\n                this._inlineDatepicker( target, inst );\n            }\n        },\n\n        /* Create a new instance object. */\n        _newInst: function( target, inline ) {\n            var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\" ); // escape jQuery meta chars\n            return { id: id, input: target, // associated target\n                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection\n                drawMonth: 0, drawYear: 0, // month being drawn\n                inline: inline, // is datepicker inline or not\n                dpDiv: ( !inline ? this.dpDiv : // presentation div\n                    datepicker_bindHover( $( \"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\" ) ) ) };\n        },\n\n        /* Attach the date picker to an input field. */\n        _connectDatepicker: function( target, inst ) {\n            var input = $( target );\n            inst.append = $( [] );\n            inst.trigger = $( [] );\n            if ( input.hasClass( this.markerClassName ) ) {\n                return;\n            }\n            this._attachments( input, inst );\n            input.addClass( this.markerClassName ).on( \"keydown\", this._doKeyDown ).\n            on( \"keypress\", this._doKeyPress ).on( \"keyup\", this._doKeyUp );\n            this._autoSize( inst );\n            $.data( target, \"datepicker\", inst );\n\n            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n            if ( inst.settings.disabled ) {\n                this._disableDatepicker( target );\n            }\n        },\n\n        /* Make attachments based on settings. */\n        _attachments: function( input, inst ) {\n            var showOn, buttonText, buttonImage,\n                appendText = this._get( inst, \"appendText\" ),\n                isRTL = this._get( inst, \"isRTL\" );\n\n            if ( inst.append ) {\n                inst.append.remove();\n            }\n            if ( appendText ) {\n                inst.append = $( \"<span>\" )\n                    .addClass( this._appendClass )\n                    .text( appendText );\n                input[ isRTL ? \"before\" : \"after\" ]( inst.append );\n            }\n\n            input.off( \"focus\", this._showDatepicker );\n\n            if ( inst.trigger ) {\n                inst.trigger.remove();\n            }\n\n            showOn = this._get( inst, \"showOn\" );\n            if ( showOn === \"focus\" || showOn === \"both\" ) { // pop-up date picker when in the marked field\n                input.on( \"focus\", this._showDatepicker );\n            }\n            if ( showOn === \"button\" || showOn === \"both\" ) { // pop-up date picker when button clicked\n                buttonText = this._get( inst, \"buttonText\" );\n                buttonImage = this._get( inst, \"buttonImage\" );\n\n                if ( this._get( inst, \"buttonImageOnly\" ) ) {\n                    inst.trigger = $( \"<img>\" )\n                        .addClass( this._triggerClass )\n                        .attr( {\n                            src: buttonImage,\n                            alt: buttonText,\n                            title: buttonText\n                        } );\n                } else {\n                    inst.trigger = $( \"<button type='button'>\" )\n                        .addClass( this._triggerClass );\n                    if ( buttonImage ) {\n                        inst.trigger.html(\n                            $( \"<img>\" )\n                                .attr( {\n                                    src: buttonImage,\n                                    alt: buttonText,\n                                    title: buttonText\n                                } )\n                        );\n                    } else {\n                        inst.trigger.text( buttonText );\n                    }\n                }\n\n                input[ isRTL ? \"before\" : \"after\" ]( inst.trigger );\n                inst.trigger.on( \"click\", function() {\n                    if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {\n                        $.datepicker._hideDatepicker();\n                    } else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {\n                        $.datepicker._hideDatepicker();\n                        $.datepicker._showDatepicker( input[ 0 ] );\n                    } else {\n                        $.datepicker._showDatepicker( input[ 0 ] );\n                    }\n                    return false;\n                } );\n            }\n        },\n\n        /* Apply the maximum length for the date format. */\n        _autoSize: function( inst ) {\n            if ( this._get( inst, \"autoSize\" ) && !inst.inline ) {\n                var findMax, max, maxI, i,\n                    date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits\n                    dateFormat = this._get( inst, \"dateFormat\" );\n\n                if ( dateFormat.match( /[DM]/ ) ) {\n                    findMax = function( names ) {\n                        max = 0;\n                        maxI = 0;\n                        for ( i = 0; i < names.length; i++ ) {\n                            if ( names[ i ].length > max ) {\n                                max = names[ i ].length;\n                                maxI = i;\n                            }\n                        }\n                        return maxI;\n                    };\n                    date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?\n                        \"monthNames\" : \"monthNamesShort\" ) ) ) );\n                    date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?\n                        \"dayNames\" : \"dayNamesShort\" ) ) ) + 20 - date.getDay() );\n                }\n                inst.input.attr( \"size\", this._formatDate( inst, date ).length );\n            }\n        },\n\n        /* Attach an inline date picker to a div. */\n        _inlineDatepicker: function( target, inst ) {\n            var divSpan = $( target );\n            if ( divSpan.hasClass( this.markerClassName ) ) {\n                return;\n            }\n            divSpan.addClass( this.markerClassName ).append( inst.dpDiv );\n            $.data( target, \"datepicker\", inst );\n            this._setDate( inst, this._getDefaultDate( inst ), true );\n            this._updateDatepicker( inst );\n            this._updateAlternate( inst );\n\n            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n            if ( inst.settings.disabled ) {\n                this._disableDatepicker( target );\n            }\n\n            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n            inst.dpDiv.css( \"display\", \"block\" );\n        },\n\n        /* Pop-up the date picker in a \"dialog\" box.\n         * @param  input element - ignored\n         * @param  date\tstring or Date - the initial date to display\n         * @param  onSelect  function - the function to call when a date is selected\n         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n         * @param  pos int[2] - coordinates for the dialog's position within the screen or\n         *\t\t\t\t\tevent - with x/y coordinates or\n         *\t\t\t\t\tleave empty for default (screen centre)\n         * @return the manager object\n         */\n        _dialogDatepicker: function( input, date, onSelect, settings, pos ) {\n            var id, browserWidth, browserHeight, scrollX, scrollY,\n                inst = this._dialogInst; // internal instance\n\n            if ( !inst ) {\n                this.uuid += 1;\n                id = \"dp\" + this.uuid;\n                this._dialogInput = $( \"<input type='text' id='\" + id +\n                    \"' style='position: absolute; top: -100px; width: 0px;'/>\" );\n                this._dialogInput.on( \"keydown\", this._doKeyDown );\n                $( \"body\" ).append( this._dialogInput );\n                inst = this._dialogInst = this._newInst( this._dialogInput, false );\n                inst.settings = {};\n                $.data( this._dialogInput[ 0 ], \"datepicker\", inst );\n            }\n            datepicker_extendRemove( inst.settings, settings || {} );\n            date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );\n            this._dialogInput.val( date );\n\n            this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );\n            if ( !this._pos ) {\n                browserWidth = document.documentElement.clientWidth;\n                browserHeight = document.documentElement.clientHeight;\n                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n                scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n                this._pos = // should use actual width/height below\n                    [ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];\n            }\n\n            // Move input on screen for focus, but hidden behind dialog\n            this._dialogInput.css( \"left\", ( this._pos[ 0 ] + 20 ) + \"px\" ).css( \"top\", this._pos[ 1 ] + \"px\" );\n            inst.settings.onSelect = onSelect;\n            this._inDialog = true;\n            this.dpDiv.addClass( this._dialogClass );\n            this._showDatepicker( this._dialogInput[ 0 ] );\n            if ( $.blockUI ) {\n                $.blockUI( this.dpDiv );\n            }\n            $.data( this._dialogInput[ 0 ], \"datepicker\", inst );\n            return this;\n        },\n\n        /* Detach a datepicker from its control.\n         * @param  target\telement - the target input field or division or span\n         */\n        _destroyDatepicker: function( target ) {\n            var nodeName,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            $.removeData( target, \"datepicker\" );\n            if ( nodeName === \"input\" ) {\n                inst.append.remove();\n                inst.trigger.remove();\n                $target.removeClass( this.markerClassName ).\n                off( \"focus\", this._showDatepicker ).\n                off( \"keydown\", this._doKeyDown ).\n                off( \"keypress\", this._doKeyPress ).\n                off( \"keyup\", this._doKeyUp );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                $target.removeClass( this.markerClassName ).empty();\n            }\n\n            if ( datepicker_instActive === inst ) {\n                datepicker_instActive = null;\n                this._curInst = null;\n            }\n        },\n\n        /* Enable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _enableDatepicker: function( target ) {\n            var nodeName, inline,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if ( nodeName === \"input\" ) {\n                target.disabled = false;\n                inst.trigger.filter( \"button\" ).\n                each( function() {\n                    this.disabled = false;\n                } ).end().\n                filter( \"img\" ).css( { opacity: \"1.0\", cursor: \"\" } );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                inline = $target.children( \".\" + this._inlineClass );\n                inline.children().removeClass( \"ui-state-disabled\" );\n                inline.find( \"select.ui-datepicker-month, select.ui-datepicker-year\" ).\n                prop( \"disabled\", false );\n            }\n            this._disabledInputs = $.map( this._disabledInputs,\n\n                // Delete entry\n                function( value ) {\n                    return ( value === target ? null : value );\n                } );\n        },\n\n        /* Disable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _disableDatepicker: function( target ) {\n            var nodeName, inline,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if ( nodeName === \"input\" ) {\n                target.disabled = true;\n                inst.trigger.filter( \"button\" ).\n                each( function() {\n                    this.disabled = true;\n                } ).end().\n                filter( \"img\" ).css( { opacity: \"0.5\", cursor: \"default\" } );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                inline = $target.children( \".\" + this._inlineClass );\n                inline.children().addClass( \"ui-state-disabled\" );\n                inline.find( \"select.ui-datepicker-month, select.ui-datepicker-year\" ).\n                prop( \"disabled\", true );\n            }\n            this._disabledInputs = $.map( this._disabledInputs,\n\n                // Delete entry\n                function( value ) {\n                    return ( value === target ? null : value );\n                } );\n            this._disabledInputs[ this._disabledInputs.length ] = target;\n        },\n\n        /* Is the first field in a jQuery collection disabled as a datepicker?\n         * @param  target\telement - the target input field or division or span\n         * @return boolean - true if disabled, false if enabled\n         */\n        _isDisabledDatepicker: function( target ) {\n            if ( !target ) {\n                return false;\n            }\n            for ( var i = 0; i < this._disabledInputs.length; i++ ) {\n                if ( this._disabledInputs[ i ] === target ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /* Retrieve the instance data for the target control.\n         * @param  target  element - the target input field or division or span\n         * @return  object - the associated instance data\n         * @throws  error if a jQuery problem getting data\n         */\n        _getInst: function( target ) {\n            try {\n                return $.data( target, \"datepicker\" );\n            } catch ( err ) {\n                throw \"Missing instance data for this datepicker\";\n            }\n        },\n\n        /* Update or retrieve the settings for a date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         * @param  name\tobject - the new settings to update or\n         *\t\t\t\tstring - the name of the setting to change or retrieve,\n         *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n         *\t\t\t\t\"defaults\" for all global defaults\n         * @param  value   any - the new value for the setting\n         *\t\t\t\t(omit if above is an object or to retrieve a value)\n         */\n        _optionDatepicker: function( target, name, value ) {\n            var settings, date, minDate, maxDate,\n                inst = this._getInst( target );\n\n            if ( arguments.length === 2 && typeof name === \"string\" ) {\n                return ( name === \"defaults\" ? $.extend( {}, $.datepicker._defaults ) :\n                    ( inst ? ( name === \"all\" ? $.extend( {}, inst.settings ) :\n                        this._get( inst, name ) ) : null ) );\n            }\n\n            settings = name || {};\n            if ( typeof name === \"string\" ) {\n                settings = {};\n                settings[ name ] = value;\n            }\n\n            if ( inst ) {\n                if ( this._curInst === inst ) {\n                    this._hideDatepicker();\n                }\n\n                date = this._getDateDatepicker( target, true );\n                minDate = this._getMinMaxDate( inst, \"min\" );\n                maxDate = this._getMinMaxDate( inst, \"max\" );\n                datepicker_extendRemove( inst.settings, settings );\n\n                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n                if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {\n                    inst.settings.minDate = this._formatDate( inst, minDate );\n                }\n                if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {\n                    inst.settings.maxDate = this._formatDate( inst, maxDate );\n                }\n                if ( \"disabled\" in settings ) {\n                    if ( settings.disabled ) {\n                        this._disableDatepicker( target );\n                    } else {\n                        this._enableDatepicker( target );\n                    }\n                }\n                this._attachments( $( target ), inst );\n                this._autoSize( inst );\n                this._setDate( inst, date );\n                this._updateAlternate( inst );\n                this._updateDatepicker( inst );\n            }\n        },\n\n        // Change method deprecated\n        _changeDatepicker: function( target, name, value ) {\n            this._optionDatepicker( target, name, value );\n        },\n\n        /* Redraw the date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         */\n        _refreshDatepicker: function( target ) {\n            var inst = this._getInst( target );\n            if ( inst ) {\n                this._updateDatepicker( inst );\n            }\n        },\n\n        /* Set the dates for a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  date\tDate - the new date\n         */\n        _setDateDatepicker: function( target, date ) {\n            var inst = this._getInst( target );\n            if ( inst ) {\n                this._setDate( inst, date );\n                this._updateDatepicker( inst );\n                this._updateAlternate( inst );\n            }\n        },\n\n        /* Get the date(s) for the first entry in a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  noDefault boolean - true if no default date is to be used\n         * @return Date - the current date\n         */\n        _getDateDatepicker: function( target, noDefault ) {\n            var inst = this._getInst( target );\n            if ( inst && !inst.inline ) {\n                this._setDateFromField( inst, noDefault );\n            }\n            return ( inst ? this._getDate( inst ) : null );\n        },\n\n        /* Handle keystrokes. */\n        _doKeyDown: function( event ) {\n            var onSelect, dateStr, sel,\n                inst = $.datepicker._getInst( event.target ),\n                handled = true,\n                isRTL = inst.dpDiv.is( \".ui-datepicker-rtl\" );\n\n            inst._keyEvent = true;\n            if ( $.datepicker._datepickerShowing ) {\n                switch ( event.keyCode ) {\n                    case 9: $.datepicker._hideDatepicker();\n                        handled = false;\n                        break; // hide on tab out\n                    case 13: sel = $( \"td.\" + $.datepicker._dayOverClass + \":not(.\" +\n                        $.datepicker._currentClass + \")\", inst.dpDiv );\n                        if ( sel[ 0 ] ) {\n                            $.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );\n                        }\n\n                        onSelect = $.datepicker._get( inst, \"onSelect\" );\n                        if ( onSelect ) {\n                            dateStr = $.datepicker._formatDate( inst );\n\n                            // Trigger custom callback\n                            onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );\n                        } else {\n                            $.datepicker._hideDatepicker();\n                        }\n\n                        return false; // don't submit the form\n                    case 27: $.datepicker._hideDatepicker();\n                        break; // hide on escape\n                    case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                        -$.datepicker._get( inst, \"stepBigMonths\" ) :\n                        -$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        break; // previous month/year on page up/+ ctrl\n                    case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                        +$.datepicker._get( inst, \"stepBigMonths\" ) :\n                        +$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        break; // next month/year on page down/+ ctrl\n                    case 35: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._clearDate( event.target );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // clear on ctrl or command +end\n                    case 36: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._gotoToday( event.target );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // current on ctrl or command +home\n                    case 37: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n\n                        // -1 day on ctrl or command +left\n                        if ( event.originalEvent.altKey ) {\n                            $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                                -$.datepicker._get( inst, \"stepBigMonths\" ) :\n                                -$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        }\n\n                        // next month/year on alt +left on Mac\n                        break;\n                    case 38: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, -7, \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // -1 week on ctrl or command +up\n                    case 39: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n\n                        // +1 day on ctrl or command +right\n                        if ( event.originalEvent.altKey ) {\n                            $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                                +$.datepicker._get( inst, \"stepBigMonths\" ) :\n                                +$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        }\n\n                        // next month/year on alt +right\n                        break;\n                    case 40: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, +7, \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // +1 week on ctrl or command +down\n                    default: handled = false;\n                }\n            } else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home\n                $.datepicker._showDatepicker( this );\n            } else {\n                handled = false;\n            }\n\n            if ( handled ) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        },\n\n        /* Filter entered characters - based on date format. */\n        _doKeyPress: function( event ) {\n            var chars, chr,\n                inst = $.datepicker._getInst( event.target );\n\n            if ( $.datepicker._get( inst, \"constrainInput\" ) ) {\n                chars = $.datepicker._possibleChars( $.datepicker._get( inst, \"dateFormat\" ) );\n                chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );\n                return event.ctrlKey || event.metaKey || ( chr < \" \" || !chars || chars.indexOf( chr ) > -1 );\n            }\n        },\n\n        /* Synchronise manual entry and field/alternate field. */\n        _doKeyUp: function( event ) {\n            var date,\n                inst = $.datepicker._getInst( event.target );\n\n            if ( inst.input.val() !== inst.lastVal ) {\n                try {\n                    date = $.datepicker.parseDate( $.datepicker._get( inst, \"dateFormat\" ),\n                        ( inst.input ? inst.input.val() : null ),\n                        $.datepicker._getFormatConfig( inst ) );\n\n                    if ( date ) { // only if valid\n                        $.datepicker._setDateFromField( inst );\n                        $.datepicker._updateAlternate( inst );\n                        $.datepicker._updateDatepicker( inst );\n                    }\n                } catch ( err ) {\n                }\n            }\n            return true;\n        },\n\n        /* Pop-up the date picker for a given input field.\n         * If false returned from beforeShow event handler do not show.\n         * @param  input  element - the input field attached to the date picker or\n         *\t\t\t\t\tevent - if triggered by focus\n         */\n        _showDatepicker: function( input ) {\n            input = input.target || input;\n            if ( input.nodeName.toLowerCase() !== \"input\" ) { // find from button/image trigger\n                input = $( \"input\", input.parentNode )[ 0 ];\n            }\n\n            if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here\n                return;\n            }\n\n            var inst, beforeShow, beforeShowSettings, isFixed,\n                offset, showAnim, duration;\n\n            inst = $.datepicker._getInst( input );\n            if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {\n                $.datepicker._curInst.dpDiv.stop( true, true );\n                if ( inst && $.datepicker._datepickerShowing ) {\n                    $.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );\n                }\n            }\n\n            beforeShow = $.datepicker._get( inst, \"beforeShow\" );\n            beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};\n            if ( beforeShowSettings === false ) {\n                return;\n            }\n            datepicker_extendRemove( inst.settings, beforeShowSettings );\n\n            inst.lastVal = null;\n            $.datepicker._lastInput = input;\n            $.datepicker._setDateFromField( inst );\n\n            if ( $.datepicker._inDialog ) { // hide cursor\n                input.value = \"\";\n            }\n            if ( !$.datepicker._pos ) { // position below input\n                $.datepicker._pos = $.datepicker._findPos( input );\n                $.datepicker._pos[ 1 ] += input.offsetHeight; // add the height\n            }\n\n            isFixed = false;\n            $( input ).parents().each( function() {\n                isFixed |= $( this ).css( \"position\" ) === \"fixed\";\n                return !isFixed;\n            } );\n\n            offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };\n            $.datepicker._pos = null;\n\n            //to avoid flashes on Firefox\n            inst.dpDiv.empty();\n\n            // determine sizing offscreen\n            inst.dpDiv.css( { position: \"absolute\", display: \"block\", top: \"-1000px\" } );\n            $.datepicker._updateDatepicker( inst );\n\n            // fix width for dynamic number of date pickers\n            // and adjust position before showing\n            offset = $.datepicker._checkOffset( inst, offset, isFixed );\n            inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?\n                    \"static\" : ( isFixed ? \"fixed\" : \"absolute\" ) ), display: \"none\",\n                left: offset.left + \"px\", top: offset.top + \"px\" } );\n\n            if ( !inst.inline ) {\n                showAnim = $.datepicker._get( inst, \"showAnim\" );\n                duration = $.datepicker._get( inst, \"duration\" );\n                inst.dpDiv.css( \"z-index\", datepicker_getZindex( $( input ) ) + 1 );\n                $.datepicker._datepickerShowing = true;\n\n                if ( $.effects && $.effects.effect[ showAnim ] ) {\n                    inst.dpDiv.show( showAnim, $.datepicker._get( inst, \"showOptions\" ), duration );\n                } else {\n                    inst.dpDiv[ showAnim || \"show\" ]( showAnim ? duration : null );\n                }\n\n                if ( $.datepicker._shouldFocusInput( inst ) ) {\n                    inst.input.trigger( \"focus\" );\n                }\n\n                $.datepicker._curInst = inst;\n            }\n        },\n\n        /* Generate the date picker content. */\n        _updateDatepicker: function( inst ) {\n            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n            datepicker_instActive = inst; // for delegate hover events\n            inst.dpDiv.empty().append( this._generateHTML( inst ) );\n            this._attachHandlers( inst );\n\n            var origyearshtml,\n                numMonths = this._getNumberOfMonths( inst ),\n                cols = numMonths[ 1 ],\n                width = 17,\n                activeCell = inst.dpDiv.find( \".\" + this._dayOverClass + \" a\" ),\n                onUpdateDatepicker = $.datepicker._get( inst, \"onUpdateDatepicker\" );\n\n            if ( activeCell.length > 0 ) {\n                datepicker_handleMouseover.apply( activeCell.get( 0 ) );\n            }\n\n            inst.dpDiv.removeClass( \"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\" ).width( \"\" );\n            if ( cols > 1 ) {\n                inst.dpDiv.addClass( \"ui-datepicker-multi-\" + cols ).css( \"width\", ( width * cols ) + \"em\" );\n            }\n            inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? \"add\" : \"remove\" ) +\n            \"Class\" ]( \"ui-datepicker-multi\" );\n            inst.dpDiv[ ( this._get( inst, \"isRTL\" ) ? \"add\" : \"remove\" ) +\n            \"Class\" ]( \"ui-datepicker-rtl\" );\n\n            if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {\n                inst.input.trigger( \"focus\" );\n            }\n\n            // Deffered render of the years select (to avoid flashes on Firefox)\n            if ( inst.yearshtml ) {\n                origyearshtml = inst.yearshtml;\n                setTimeout( function() {\n\n                    //assure that inst.yearshtml didn't change.\n                    if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {\n                        inst.dpDiv.find( \"select.ui-datepicker-year\" ).first().replaceWith( inst.yearshtml );\n                    }\n                    origyearshtml = inst.yearshtml = null;\n                }, 0 );\n            }\n\n            if ( onUpdateDatepicker ) {\n                onUpdateDatepicker.apply( ( inst.input ? inst.input[ 0 ] : null ), [ inst ] );\n            }\n        },\n\n        // #6694 - don't focus the input if it's already focused\n        // this breaks the change event in IE\n        // Support: IE and jQuery <1.9\n        _shouldFocusInput: function( inst ) {\n            return inst.input && inst.input.is( \":visible\" ) && !inst.input.is( \":disabled\" ) && !inst.input.is( \":focus\" );\n        },\n\n        /* Check positioning to remain on screen. */\n        _checkOffset: function( inst, offset, isFixed ) {\n            var dpWidth = inst.dpDiv.outerWidth(),\n                dpHeight = inst.dpDiv.outerHeight(),\n                inputWidth = inst.input ? inst.input.outerWidth() : 0,\n                inputHeight = inst.input ? inst.input.outerHeight() : 0,\n                viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),\n                viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );\n\n            offset.left -= ( this._get( inst, \"isRTL\" ) ? ( dpWidth - inputWidth ) : 0 );\n            offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;\n            offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;\n\n            // Now check if datepicker is showing outside window viewport - move to a better place if so.\n            offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?\n                Math.abs( offset.left + dpWidth - viewWidth ) : 0 );\n            offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?\n                Math.abs( dpHeight + inputHeight ) : 0 );\n\n            return offset;\n        },\n\n        /* Find an object's position on the screen. */\n        _findPos: function( obj ) {\n            var position,\n                inst = this._getInst( obj ),\n                isRTL = this._get( inst, \"isRTL\" );\n\n            while ( obj && ( obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.pseudos.hidden( obj ) ) ) {\n                obj = obj[ isRTL ? \"previousSibling\" : \"nextSibling\" ];\n            }\n\n            position = $( obj ).offset();\n            return [ position.left, position.top ];\n        },\n\n        /* Hide the date picker from view.\n         * @param  input  element - the input field attached to the date picker\n         */\n        _hideDatepicker: function( input ) {\n            var showAnim, duration, postProcess, onClose,\n                inst = this._curInst;\n\n            if ( !inst || ( input && inst !== $.data( input, \"datepicker\" ) ) ) {\n                return;\n            }\n\n            if ( this._datepickerShowing ) {\n                showAnim = this._get( inst, \"showAnim\" );\n                duration = this._get( inst, \"duration\" );\n                postProcess = function() {\n                    $.datepicker._tidyDialog( inst );\n                };\n\n                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n                if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {\n                    inst.dpDiv.hide( showAnim, $.datepicker._get( inst, \"showOptions\" ), duration, postProcess );\n                } else {\n                    inst.dpDiv[ ( showAnim === \"slideDown\" ? \"slideUp\" :\n                        ( showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\" ) ) ]( ( showAnim ? duration : null ), postProcess );\n                }\n\n                if ( !showAnim ) {\n                    postProcess();\n                }\n                this._datepickerShowing = false;\n\n                onClose = this._get( inst, \"onClose\" );\n                if ( onClose ) {\n                    onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : \"\" ), inst ] );\n                }\n\n                this._lastInput = null;\n                if ( this._inDialog ) {\n                    this._dialogInput.css( { position: \"absolute\", left: \"0\", top: \"-100px\" } );\n                    if ( $.blockUI ) {\n                        $.unblockUI();\n                        $( \"body\" ).append( this.dpDiv );\n                    }\n                }\n                this._inDialog = false;\n            }\n        },\n\n        /* Tidy up after a dialog display. */\n        _tidyDialog: function( inst ) {\n            inst.dpDiv.removeClass( this._dialogClass ).off( \".ui-datepicker-calendar\" );\n        },\n\n        /* Close date picker if clicked elsewhere. */\n        _checkExternalClick: function( event ) {\n            if ( !$.datepicker._curInst ) {\n                return;\n            }\n\n            var $target = $( event.target ),\n                inst = $.datepicker._getInst( $target[ 0 ] );\n\n            if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&\n                    $target.parents( \"#\" + $.datepicker._mainDivId ).length === 0 &&\n                    !$target.hasClass( $.datepicker.markerClassName ) &&\n                    !$target.closest( \".\" + $.datepicker._triggerClass ).length &&\n                    $.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||\n                ( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {\n                $.datepicker._hideDatepicker();\n            }\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustDate: function( id, offset, period ) {\n            var target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            if ( this._isDisabledDatepicker( target[ 0 ] ) ) {\n                return;\n            }\n            this._adjustInstDate( inst, offset, period );\n            this._updateDatepicker( inst );\n        },\n\n        /* Action for current link. */\n        _gotoToday: function( id ) {\n            var date,\n                target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            if ( this._get( inst, \"gotoCurrent\" ) && inst.currentDay ) {\n                inst.selectedDay = inst.currentDay;\n                inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n                inst.drawYear = inst.selectedYear = inst.currentYear;\n            } else {\n                date = new Date();\n                inst.selectedDay = date.getDate();\n                inst.drawMonth = inst.selectedMonth = date.getMonth();\n                inst.drawYear = inst.selectedYear = date.getFullYear();\n            }\n            this._notifyChange( inst );\n            this._adjustDate( target );\n        },\n\n        /* Action for selecting a new month/year. */\n        _selectMonthYear: function( id, select, period ) {\n            var target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            inst[ \"selected\" + ( period === \"M\" ? \"Month\" : \"Year\" ) ] =\n                inst[ \"draw\" + ( period === \"M\" ? \"Month\" : \"Year\" ) ] =\n                    parseInt( select.options[ select.selectedIndex ].value, 10 );\n\n            this._notifyChange( inst );\n            this._adjustDate( target );\n        },\n\n        /* Action for selecting a day. */\n        _selectDay: function( id, month, year, td ) {\n            var inst,\n                target = $( id );\n\n            if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {\n                return;\n            }\n\n            inst = this._getInst( target[ 0 ] );\n            inst.selectedDay = inst.currentDay = parseInt( $( \"a\", td ).attr( \"data-date\" ) );\n            inst.selectedMonth = inst.currentMonth = month;\n            inst.selectedYear = inst.currentYear = year;\n            this._selectDate( id, this._formatDate( inst,\n                inst.currentDay, inst.currentMonth, inst.currentYear ) );\n        },\n\n        /* Erase the input field and hide the date picker. */\n        _clearDate: function( id ) {\n            var target = $( id );\n            this._selectDate( target, \"\" );\n        },\n\n        /* Update the input field with the selected date. */\n        _selectDate: function( id, dateStr ) {\n            var onSelect,\n                target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );\n            if ( inst.input ) {\n                inst.input.val( dateStr );\n            }\n            this._updateAlternate( inst );\n\n            onSelect = this._get( inst, \"onSelect\" );\n            if ( onSelect ) {\n                onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback\n            } else if ( inst.input ) {\n                inst.input.trigger( \"change\" ); // fire the change event\n            }\n\n            if ( inst.inline ) {\n                this._updateDatepicker( inst );\n            } else {\n                this._hideDatepicker();\n                this._lastInput = inst.input[ 0 ];\n                if ( typeof( inst.input[ 0 ] ) !== \"object\" ) {\n                    inst.input.trigger( \"focus\" ); // restore focus\n                }\n                this._lastInput = null;\n            }\n        },\n\n        /* Update any alternate field to synchronise with the main field. */\n        _updateAlternate: function( inst ) {\n            var altFormat, date, dateStr,\n                altField = this._get( inst, \"altField\" );\n\n            if ( altField ) { // update alternate field too\n                altFormat = this._get( inst, \"altFormat\" ) || this._get( inst, \"dateFormat\" );\n                date = this._getDate( inst );\n                dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );\n                $( document ).find( altField ).val( dateStr );\n            }\n        },\n\n        /* Set as beforeShowDay function to prevent selection of weekends.\n         * @param  date  Date - the date to customise\n         * @return [boolean, string] - is this date selectable?, what is its CSS class?\n         */\n        noWeekends: function( date ) {\n            var day = date.getDay();\n            return [ ( day > 0 && day < 6 ), \"\" ];\n        },\n\n        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n         * @param  date  Date - the date to get the week for\n         * @return  number - the number of the week within the year that contains this date\n         */\n        iso8601Week: function( date ) {\n            var time,\n                checkDate = new Date( date.getTime() );\n\n            // Find Thursday of this week starting on Monday\n            checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );\n\n            time = checkDate.getTime();\n            checkDate.setMonth( 0 ); // Compare with Jan 1\n            checkDate.setDate( 1 );\n            return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;\n        },\n\n        /* Parse a string value into a date object.\n         * See formatDate below for the possible formats.\n         *\n         * @param  format string - the expected format of the date\n         * @param  value string - the date in the above format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  Date - the extracted date value or null if value is blank\n         */\n        parseDate: function( format, value, settings ) {\n            if ( format == null || value == null ) {\n                throw \"Invalid arguments\";\n            }\n\n            value = ( typeof value === \"object\" ? value.toString() : value + \"\" );\n            if ( value === \"\" ) {\n                return null;\n            }\n\n            var iFormat, dim, extra,\n                iValue = 0,\n                shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,\n                shortYearCutoff = ( typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp :\n                    new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),\n                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,\n                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,\n                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,\n                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,\n                year = -1,\n                month = -1,\n                day = -1,\n                doy = -1,\n                literal = false,\n                date,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n\n                // Extract a number from the string value\n                getNumber = function( match ) {\n                    var isDoubled = lookAhead( match ),\n                        size = ( match === \"@\" ? 14 : ( match === \"!\" ? 20 :\n                            ( match === \"y\" && isDoubled ? 4 : ( match === \"o\" ? 3 : 2 ) ) ) ),\n                        minSize = ( match === \"y\" ? size : 1 ),\n                        digits = new RegExp( \"^\\\\d{\" + minSize + \",\" + size + \"}\" ),\n                        num = value.substring( iValue ).match( digits );\n                    if ( !num ) {\n                        throw \"Missing number at position \" + iValue;\n                    }\n                    iValue += num[ 0 ].length;\n                    return parseInt( num[ 0 ], 10 );\n                },\n\n                // Extract a name from the string value and convert to an index\n                getName = function( match, shortNames, longNames ) {\n                    var index = -1,\n                        names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {\n                            return [ [ k, v ] ];\n                        } ).sort( function( a, b ) {\n                            return -( a[ 1 ].length - b[ 1 ].length );\n                        } );\n\n                    $.each( names, function( i, pair ) {\n                        var name = pair[ 1 ];\n                        if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {\n                            index = pair[ 0 ];\n                            iValue += name.length;\n                            return false;\n                        }\n                    } );\n                    if ( index !== -1 ) {\n                        return index + 1;\n                    } else {\n                        throw \"Unknown name at position \" + iValue;\n                    }\n                },\n\n                // Confirm that a literal character matches the string value\n                checkLiteral = function() {\n                    if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {\n                        throw \"Unexpected literal at position \" + iValue;\n                    }\n                    iValue++;\n                };\n\n            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                if ( literal ) {\n                    if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                        literal = false;\n                    } else {\n                        checkLiteral();\n                    }\n                } else {\n                    switch ( format.charAt( iFormat ) ) {\n                        case \"d\":\n                            day = getNumber( \"d\" );\n                            break;\n                        case \"D\":\n                            getName( \"D\", dayNamesShort, dayNames );\n                            break;\n                        case \"o\":\n                            doy = getNumber( \"o\" );\n                            break;\n                        case \"m\":\n                            month = getNumber( \"m\" );\n                            break;\n                        case \"M\":\n                            month = getName( \"M\", monthNamesShort, monthNames );\n                            break;\n                        case \"y\":\n                            year = getNumber( \"y\" );\n                            break;\n                        case \"@\":\n                            date = new Date( getNumber( \"@\" ) );\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"!\":\n                            date = new Date( ( getNumber( \"!\" ) - this._ticksTo1970 ) / 10000 );\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"'\":\n                            if ( lookAhead( \"'\" ) ) {\n                                checkLiteral();\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            checkLiteral();\n                    }\n                }\n            }\n\n            if ( iValue < value.length ) {\n                extra = value.substr( iValue );\n                if ( !/^\\s+/.test( extra ) ) {\n                    throw \"Extra/unparsed characters found in date: \" + extra;\n                }\n            }\n\n            if ( year === -1 ) {\n                year = new Date().getFullYear();\n            } else if ( year < 100 ) {\n                year += new Date().getFullYear() - new Date().getFullYear() % 100 +\n                    ( year <= shortYearCutoff ? 0 : -100 );\n            }\n\n            if ( doy > -1 ) {\n                month = 1;\n                day = doy;\n                do {\n                    dim = this._getDaysInMonth( year, month - 1 );\n                    if ( day <= dim ) {\n                        break;\n                    }\n                    month++;\n                    day -= dim;\n                } while ( true );\n            }\n\n            date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );\n            if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {\n                throw \"Invalid date\"; // E.g. 31/02/00\n            }\n            return date;\n        },\n\n        /* Standard date formats. */\n        ATOM: \"yy-mm-dd\", // RFC 3339 (ISO 8601)\n        COOKIE: \"D, dd M yy\",\n        ISO_8601: \"yy-mm-dd\",\n        RFC_822: \"D, d M y\",\n        RFC_850: \"DD, dd-M-y\",\n        RFC_1036: \"D, d M y\",\n        RFC_1123: \"D, d M yy\",\n        RFC_2822: \"D, d M yy\",\n        RSS: \"D, d M y\", // RFC 822\n        TICKS: \"!\",\n        TIMESTAMP: \"@\",\n        W3C: \"yy-mm-dd\", // ISO 8601\n\n        _ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +\n            Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),\n\n        /* Format a date object into a string value.\n         * The format can be combinations of the following:\n         * d  - day of month (no leading zero)\n         * dd - day of month (two digit)\n         * o  - day of year (no leading zeros)\n         * oo - day of year (three digit)\n         * D  - day name short\n         * DD - day name long\n         * m  - month of year (no leading zero)\n         * mm - month of year (two digit)\n         * M  - month name short\n         * MM - month name long\n         * y  - year (two digit)\n         * yy - year (four digit)\n         * @ - Unix timestamp (ms since 01/01/1970)\n         * ! - Windows ticks (100ns since 01/01/0001)\n         * \"...\" - literal text\n         * '' - single quote\n         *\n         * @param  format string - the desired format of the date\n         * @param  date Date - the date value to format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  string - the date in the above format\n         */\n        formatDate: function( format, date, settings ) {\n            if ( !date ) {\n                return \"\";\n            }\n\n            var iFormat,\n                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,\n                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,\n                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,\n                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n\n                // Format a number, with leading zero if necessary\n                formatNumber = function( match, value, len ) {\n                    var num = \"\" + value;\n                    if ( lookAhead( match ) ) {\n                        while ( num.length < len ) {\n                            num = \"0\" + num;\n                        }\n                    }\n                    return num;\n                },\n\n                // Format a name, short or long as requested\n                formatName = function( match, value, shortNames, longNames ) {\n                    return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );\n                },\n                output = \"\",\n                literal = false;\n\n            if ( date ) {\n                for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                    if ( literal ) {\n                        if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                            literal = false;\n                        } else {\n                            output += format.charAt( iFormat );\n                        }\n                    } else {\n                        switch ( format.charAt( iFormat ) ) {\n                            case \"d\":\n                                output += formatNumber( \"d\", date.getDate(), 2 );\n                                break;\n                            case \"D\":\n                                output += formatName( \"D\", date.getDay(), dayNamesShort, dayNames );\n                                break;\n                            case \"o\":\n                                output += formatNumber( \"o\",\n                                    Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );\n                                break;\n                            case \"m\":\n                                output += formatNumber( \"m\", date.getMonth() + 1, 2 );\n                                break;\n                            case \"M\":\n                                output += formatName( \"M\", date.getMonth(), monthNamesShort, monthNames );\n                                break;\n                            case \"y\":\n                                output += ( lookAhead( \"y\" ) ? date.getFullYear() :\n                                    ( date.getFullYear() % 100 < 10 ? \"0\" : \"\" ) + date.getFullYear() % 100 );\n                                break;\n                            case \"@\":\n                                output += date.getTime();\n                                break;\n                            case \"!\":\n                                output += date.getTime() * 10000 + this._ticksTo1970;\n                                break;\n                            case \"'\":\n                                if ( lookAhead( \"'\" ) ) {\n                                    output += \"'\";\n                                } else {\n                                    literal = true;\n                                }\n                                break;\n                            default:\n                                output += format.charAt( iFormat );\n                        }\n                    }\n                }\n            }\n            return output;\n        },\n\n        /* Extract all possible characters from the date format. */\n        _possibleChars: function( format ) {\n            var iFormat,\n                chars = \"\",\n                literal = false,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                };\n\n            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                if ( literal ) {\n                    if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                        literal = false;\n                    } else {\n                        chars += format.charAt( iFormat );\n                    }\n                } else {\n                    switch ( format.charAt( iFormat ) ) {\n                        case \"d\": case \"m\": case \"y\": case \"@\":\n                            chars += \"0123456789\";\n                            break;\n                        case \"D\": case \"M\":\n                            return null; // Accept anything\n                        case \"'\":\n                            if ( lookAhead( \"'\" ) ) {\n                                chars += \"'\";\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            chars += format.charAt( iFormat );\n                    }\n                }\n            }\n            return chars;\n        },\n\n        /* Get a setting value, defaulting if necessary. */\n        _get: function( inst, name ) {\n            return inst.settings[ name ] !== undefined ?\n                inst.settings[ name ] : this._defaults[ name ];\n        },\n\n        /* Parse existing date and initialise date picker. */\n        _setDateFromField: function( inst, noDefault ) {\n            if ( inst.input.val() === inst.lastVal ) {\n                return;\n            }\n\n            var dateFormat = this._get( inst, \"dateFormat\" ),\n                dates = inst.lastVal = inst.input ? inst.input.val() : null,\n                defaultDate = this._getDefaultDate( inst ),\n                date = defaultDate,\n                settings = this._getFormatConfig( inst );\n\n            try {\n                date = this.parseDate( dateFormat, dates, settings ) || defaultDate;\n            } catch ( event ) {\n                dates = ( noDefault ? \"\" : dates );\n            }\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            inst.currentDay = ( dates ? date.getDate() : 0 );\n            inst.currentMonth = ( dates ? date.getMonth() : 0 );\n            inst.currentYear = ( dates ? date.getFullYear() : 0 );\n            this._adjustInstDate( inst );\n        },\n\n        /* Retrieve the default date shown on opening. */\n        _getDefaultDate: function( inst ) {\n            return this._restrictMinMax( inst,\n                this._determineDate( inst, this._get( inst, \"defaultDate\" ), new Date() ) );\n        },\n\n        /* A date may be specified as an exact value or a relative one. */\n        _determineDate: function( inst, date, defaultDate ) {\n            var offsetNumeric = function( offset ) {\n                    var date = new Date();\n                    date.setDate( date.getDate() + offset );\n                    return date;\n                },\n                offsetString = function( offset ) {\n                    try {\n                        return $.datepicker.parseDate( $.datepicker._get( inst, \"dateFormat\" ),\n                            offset, $.datepicker._getFormatConfig( inst ) );\n                    } catch ( e ) {\n\n                        // Ignore\n                    }\n\n                    var date = ( offset.toLowerCase().match( /^c/ ) ?\n                            $.datepicker._getDate( inst ) : null ) || new Date(),\n                        year = date.getFullYear(),\n                        month = date.getMonth(),\n                        day = date.getDate(),\n                        pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n                        matches = pattern.exec( offset );\n\n                    while ( matches ) {\n                        switch ( matches[ 2 ] || \"d\" ) {\n                            case \"d\" : case \"D\" :\n                                day += parseInt( matches[ 1 ], 10 ); break;\n                            case \"w\" : case \"W\" :\n                                day += parseInt( matches[ 1 ], 10 ) * 7; break;\n                            case \"m\" : case \"M\" :\n                                month += parseInt( matches[ 1 ], 10 );\n                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );\n                                break;\n                            case \"y\": case \"Y\" :\n                                year += parseInt( matches[ 1 ], 10 );\n                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );\n                                break;\n                        }\n                        matches = pattern.exec( offset );\n                    }\n                    return new Date( year, month, day );\n                },\n                newDate = ( date == null || date === \"\" ? defaultDate : ( typeof date === \"string\" ? offsetString( date ) :\n                    ( typeof date === \"number\" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );\n\n            newDate = ( newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate );\n            if ( newDate ) {\n                newDate.setHours( 0 );\n                newDate.setMinutes( 0 );\n                newDate.setSeconds( 0 );\n                newDate.setMilliseconds( 0 );\n            }\n            return this._daylightSavingAdjust( newDate );\n        },\n\n        /* Handle switch to/from daylight saving.\n         * Hours may be non-zero on daylight saving cut-over:\n         * > 12 when midnight changeover, but then cannot generate\n         * midnight datetime, so jump to 1AM, otherwise reset.\n         * @param  date  (Date) the date to check\n         * @return  (Date) the corrected date\n         */\n        _daylightSavingAdjust: function( date ) {\n            if ( !date ) {\n                return null;\n            }\n            date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );\n            return date;\n        },\n\n        /* Set the date(s) directly. */\n        _setDate: function( inst, date, noChange ) {\n            var clear = !date,\n                origMonth = inst.selectedMonth,\n                origYear = inst.selectedYear,\n                newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );\n\n            inst.selectedDay = inst.currentDay = newDate.getDate();\n            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n            if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {\n                this._notifyChange( inst );\n            }\n            this._adjustInstDate( inst );\n            if ( inst.input ) {\n                inst.input.val( clear ? \"\" : this._formatDate( inst ) );\n            }\n        },\n\n        /* Retrieve the date(s) directly. */\n        _getDate: function( inst ) {\n            var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === \"\" ) ? null :\n                this._daylightSavingAdjust( new Date(\n                    inst.currentYear, inst.currentMonth, inst.currentDay ) ) );\n            return startDate;\n        },\n\n        /* Attach the onxxx handlers.  These are declared statically so\n         * they work with static code transformers like Caja.\n         */\n        _attachHandlers: function( inst ) {\n            var stepMonths = this._get( inst, \"stepMonths\" ),\n                id = \"#\" + inst.id.replace( /\\\\\\\\/g, \"\\\\\" );\n            inst.dpDiv.find( \"[data-handler]\" ).map( function() {\n                var handler = {\n                    prev: function() {\n                        $.datepicker._adjustDate( id, -stepMonths, \"M\" );\n                    },\n                    next: function() {\n                        $.datepicker._adjustDate( id, +stepMonths, \"M\" );\n                    },\n                    hide: function() {\n                        $.datepicker._hideDatepicker();\n                    },\n                    today: function() {\n                        $.datepicker._gotoToday( id );\n                    },\n                    selectDay: function() {\n                        $.datepicker._selectDay( id, +this.getAttribute( \"data-month\" ), +this.getAttribute( \"data-year\" ), this );\n                        return false;\n                    },\n                    selectMonth: function() {\n                        $.datepicker._selectMonthYear( id, this, \"M\" );\n                        return false;\n                    },\n                    selectYear: function() {\n                        $.datepicker._selectMonthYear( id, this, \"Y\" );\n                        return false;\n                    }\n                };\n                $( this ).on( this.getAttribute( \"data-event\" ), handler[ this.getAttribute( \"data-handler\" ) ] );\n            } );\n        },\n\n        /* Generate the HTML for the current state of the date picker. */\n        _generateHTML: function( inst ) {\n            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,\n                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,\n                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,\n                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,\n                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,\n                printDate, dRow, tbody, daySettings, otherMonth, unselectable,\n                tempDate = new Date(),\n                today = this._daylightSavingAdjust(\n                    new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time\n                isRTL = this._get( inst, \"isRTL\" ),\n                showButtonPanel = this._get( inst, \"showButtonPanel\" ),\n                hideIfNoPrevNext = this._get( inst, \"hideIfNoPrevNext\" ),\n                navigationAsDateFormat = this._get( inst, \"navigationAsDateFormat\" ),\n                numMonths = this._getNumberOfMonths( inst ),\n                showCurrentAtPos = this._get( inst, \"showCurrentAtPos\" ),\n                stepMonths = this._get( inst, \"stepMonths\" ),\n                isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),\n                currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :\n                    new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),\n                minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                drawMonth = inst.drawMonth - showCurrentAtPos,\n                drawYear = inst.drawYear;\n\n            if ( drawMonth < 0 ) {\n                drawMonth += 12;\n                drawYear--;\n            }\n            if ( maxDate ) {\n                maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),\n                    maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );\n                maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );\n                while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {\n                    drawMonth--;\n                    if ( drawMonth < 0 ) {\n                        drawMonth = 11;\n                        drawYear--;\n                    }\n                }\n            }\n            inst.drawMonth = drawMonth;\n            inst.drawYear = drawYear;\n\n            prevText = this._get( inst, \"prevText\" );\n            prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,\n                this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),\n                this._getFormatConfig( inst ) ) );\n\n            if ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ) {\n                prev = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-prev ui-corner-all\",\n                        \"data-handler\": \"prev\",\n                        \"data-event\": \"click\",\n                        title: prevText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"e\" : \"w\" ) )\n                            .text( prevText )\n                    )[ 0 ].outerHTML;\n            } else if ( hideIfNoPrevNext ) {\n                prev = \"\";\n            } else {\n                prev = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-prev ui-corner-all ui-state-disabled\",\n                        title: prevText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"e\" : \"w\" ) )\n                            .text( prevText )\n                    )[ 0 ].outerHTML;\n            }\n\n            nextText = this._get( inst, \"nextText\" );\n            nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,\n                this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),\n                this._getFormatConfig( inst ) ) );\n\n            if ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ) {\n                next = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-next ui-corner-all\",\n                        \"data-handler\": \"next\",\n                        \"data-event\": \"click\",\n                        title: nextText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"w\" : \"e\" ) )\n                            .text( nextText )\n                    )[ 0 ].outerHTML;\n            } else if ( hideIfNoPrevNext ) {\n                next = \"\";\n            } else {\n                next = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-next ui-corner-all ui-state-disabled\",\n                        title: nextText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .attr( \"class\", \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"w\" : \"e\" ) )\n                            .text( nextText )\n                    )[ 0 ].outerHTML;\n            }\n\n            currentText = this._get( inst, \"currentText\" );\n            gotoDate = ( this._get( inst, \"gotoCurrent\" ) && inst.currentDay ? currentDate : today );\n            currentText = ( !navigationAsDateFormat ? currentText :\n                this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );\n\n            controls = \"\";\n            if ( !inst.inline ) {\n                controls = $( \"<button>\" )\n                    .attr( {\n                        type: \"button\",\n                        \"class\": \"ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all\",\n                        \"data-handler\": \"hide\",\n                        \"data-event\": \"click\"\n                    } )\n                    .text( this._get( inst, \"closeText\" ) )[ 0 ].outerHTML;\n            }\n\n            buttonPanel = \"\";\n            if ( showButtonPanel ) {\n                buttonPanel = $( \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" )\n                    .append( isRTL ? controls : \"\" )\n                    .append( this._isInRange( inst, gotoDate ) ?\n                        $( \"<button>\" )\n                            .attr( {\n                                type: \"button\",\n                                \"class\": \"ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all\",\n                                \"data-handler\": \"today\",\n                                \"data-event\": \"click\"\n                            } )\n                            .text( currentText ) :\n                        \"\" )\n                    .append( isRTL ? \"\" : controls )[ 0 ].outerHTML;\n            }\n\n            firstDay = parseInt( this._get( inst, \"firstDay\" ), 10 );\n            firstDay = ( isNaN( firstDay ) ? 0 : firstDay );\n\n            showWeek = this._get( inst, \"showWeek\" );\n            dayNames = this._get( inst, \"dayNames\" );\n            dayNamesMin = this._get( inst, \"dayNamesMin\" );\n            monthNames = this._get( inst, \"monthNames\" );\n            monthNamesShort = this._get( inst, \"monthNamesShort\" );\n            beforeShowDay = this._get( inst, \"beforeShowDay\" );\n            showOtherMonths = this._get( inst, \"showOtherMonths\" );\n            selectOtherMonths = this._get( inst, \"selectOtherMonths\" );\n            defaultDate = this._getDefaultDate( inst );\n            html = \"\";\n\n            for ( row = 0; row < numMonths[ 0 ]; row++ ) {\n                group = \"\";\n                this.maxRows = 4;\n                for ( col = 0; col < numMonths[ 1 ]; col++ ) {\n                    selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );\n                    cornerClass = \" ui-corner-all\";\n                    calender = \"\";\n                    if ( isMultiMonth ) {\n                        calender += \"<div class='ui-datepicker-group\";\n                        if ( numMonths[ 1 ] > 1 ) {\n                            switch ( col ) {\n                                case 0: calender += \" ui-datepicker-group-first\";\n                                    cornerClass = \" ui-corner-\" + ( isRTL ? \"right\" : \"left\" ); break;\n                                case numMonths[ 1 ] - 1: calender += \" ui-datepicker-group-last\";\n                                    cornerClass = \" ui-corner-\" + ( isRTL ? \"left\" : \"right\" ); break;\n                                default: calender += \" ui-datepicker-group-middle\"; cornerClass = \"\"; break;\n                            }\n                        }\n                        calender += \"'>\";\n                    }\n                    calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" +\n                        ( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : \"\" ) +\n                        ( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : \"\" ) +\n                        this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,\n                            row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers\n                        \"</div><table class='ui-datepicker-calendar'><thead>\" +\n                        \"<tr>\";\n                    thead = ( showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get( inst, \"weekHeader\" ) + \"</th>\" : \"\" );\n                    for ( dow = 0; dow < 7; dow++ ) { // days of the week\n                        day = ( dow + firstDay ) % 7;\n                        thead += \"<th scope='col'\" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\" ) + \">\" +\n                            \"<span title='\" + dayNames[ day ] + \"'>\" + dayNamesMin[ day ] + \"</span></th>\";\n                    }\n                    calender += thead + \"</tr></thead><tbody>\";\n                    daysInMonth = this._getDaysInMonth( drawYear, drawMonth );\n                    if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {\n                        inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );\n                    }\n                    leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;\n                    curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate\n                    numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)\n                    this.maxRows = numRows;\n                    printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );\n                    for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows\n                        calender += \"<tr>\";\n                        tbody = ( !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" +\n                            this._get( inst, \"calculateWeek\" )( printDate ) + \"</td>\" );\n                        for ( dow = 0; dow < 7; dow++ ) { // create date picker days\n                            daySettings = ( beforeShowDay ?\n                                beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, \"\" ] );\n                            otherMonth = ( printDate.getMonth() !== drawMonth );\n                            unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||\n                                ( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );\n                            tbody += \"<td class='\" +\n                                ( ( dow + firstDay + 6 ) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\" ) + // highlight weekends\n                                ( otherMonth ? \" ui-datepicker-other-month\" : \"\" ) + // highlight days from other months\n                                ( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key\n                                ( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?\n\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\n                                    \" \" + this._dayOverClass : \"\" ) + // highlight selected day\n                                ( unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\" ) +  // highlight unselectable days\n                                ( otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[ 1 ] + // highlight custom dates\n                                    ( printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\" ) + // highlight selected day\n                                    ( printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\" ) ) + \"'\" + // highlight today (if different)\n                                ( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? \" title='\" + daySettings[ 2 ].replace( /'/g, \"&#39;\" ) + \"'\" : \"\" ) + // cell title\n                                ( unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\" ) + \">\" + // actions\n                                ( otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n                                    ( unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" +\n                                        ( printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\" ) +\n                                        ( printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\" ) + // highlight selected day\n                                        ( otherMonth ? \" ui-priority-secondary\" : \"\" ) + // distinguish dates from other months\n                                        \"' href='#' aria-current='\" + ( printDate.getTime() === currentDate.getTime() ? \"true\" : \"false\" ) + // mark date as selected for screen reader\n                                        \"' data-date='\" + printDate.getDate() + // store date as data\n                                        \"'>\" + printDate.getDate() + \"</a>\" ) ) + \"</td>\"; // display selectable date\n                            printDate.setDate( printDate.getDate() + 1 );\n                            printDate = this._daylightSavingAdjust( printDate );\n                        }\n                        calender += tbody + \"</tr>\";\n                    }\n                    drawMonth++;\n                    if ( drawMonth > 11 ) {\n                        drawMonth = 0;\n                        drawYear++;\n                    }\n                    calender += \"</tbody></table>\" + ( isMultiMonth ? \"</div>\" +\n                        ( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? \"<div class='ui-datepicker-row-break'></div>\" : \"\" ) : \"\" );\n                    group += calender;\n                }\n                html += group;\n            }\n            html += buttonPanel;\n            inst._keyEvent = false;\n            return html;\n        },\n\n        /* Generate the month and year header. */\n        _generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,\n                                            secondary, monthNames, monthNamesShort ) {\n\n            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,\n                changeMonth = this._get( inst, \"changeMonth\" ),\n                changeYear = this._get( inst, \"changeYear\" ),\n                showMonthAfterYear = this._get( inst, \"showMonthAfterYear\" ),\n                selectMonthLabel = this._get( inst, \"selectMonthLabel\" ),\n                selectYearLabel = this._get( inst, \"selectYearLabel\" ),\n                html = \"<div class='ui-datepicker-title'>\",\n                monthHtml = \"\";\n\n            // Month selection\n            if ( secondary || !changeMonth ) {\n                monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[ drawMonth ] + \"</span>\";\n            } else {\n                inMinYear = ( minDate && minDate.getFullYear() === drawYear );\n                inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );\n                monthHtml += \"<select class='ui-datepicker-month' aria-label='\" + selectMonthLabel + \"' data-handler='selectMonth' data-event='change'>\";\n                for ( month = 0; month < 12; month++ ) {\n                    if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {\n                        monthHtml += \"<option value='\" + month + \"'\" +\n                            ( month === drawMonth ? \" selected='selected'\" : \"\" ) +\n                            \">\" + monthNamesShort[ month ] + \"</option>\";\n                    }\n                }\n                monthHtml += \"</select>\";\n            }\n\n            if ( !showMonthAfterYear ) {\n                html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? \"&#xa0;\" : \"\" );\n            }\n\n            // Year selection\n            if ( !inst.yearshtml ) {\n                inst.yearshtml = \"\";\n                if ( secondary || !changeYear ) {\n                    html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n                } else {\n\n                    // determine range of years to display\n                    years = this._get( inst, \"yearRange\" ).split( \":\" );\n                    thisYear = new Date().getFullYear();\n                    determineYear = function( value ) {\n                        var year = ( value.match( /c[+\\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :\n                            ( value.match( /[+\\-].*/ ) ? thisYear + parseInt( value, 10 ) :\n                                parseInt( value, 10 ) ) );\n                        return ( isNaN( year ) ? thisYear : year );\n                    };\n                    year = determineYear( years[ 0 ] );\n                    endYear = Math.max( year, determineYear( years[ 1 ] || \"\" ) );\n                    year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );\n                    endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );\n                    inst.yearshtml += \"<select class='ui-datepicker-year' aria-label='\" + selectYearLabel + \"' data-handler='selectYear' data-event='change'>\";\n                    for ( ; year <= endYear; year++ ) {\n                        inst.yearshtml += \"<option value='\" + year + \"'\" +\n                            ( year === drawYear ? \" selected='selected'\" : \"\" ) +\n                            \">\" + year + \"</option>\";\n                    }\n                    inst.yearshtml += \"</select>\";\n\n                    html += inst.yearshtml;\n                    inst.yearshtml = null;\n                }\n            }\n\n            html += this._get( inst, \"yearSuffix\" );\n            if ( showMonthAfterYear ) {\n                html += ( secondary || !( changeMonth && changeYear ) ? \"&#xa0;\" : \"\" ) + monthHtml;\n            }\n            html += \"</div>\"; // Close datepicker_header\n            return html;\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustInstDate: function( inst, offset, period ) {\n            var year = inst.selectedYear + ( period === \"Y\" ? offset : 0 ),\n                month = inst.selectedMonth + ( period === \"M\" ? offset : 0 ),\n                day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === \"D\" ? offset : 0 ),\n                date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );\n\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            if ( period === \"M\" || period === \"Y\" ) {\n                this._notifyChange( inst );\n            }\n        },\n\n        /* Ensure a date is within any min/max bounds. */\n        _restrictMinMax: function( inst, date ) {\n            var minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                newDate = ( minDate && date < minDate ? minDate : date );\n            return ( maxDate && newDate > maxDate ? maxDate : newDate );\n        },\n\n        /* Notify change of month/year. */\n        _notifyChange: function( inst ) {\n            var onChange = this._get( inst, \"onChangeMonthYear\" );\n            if ( onChange ) {\n                onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),\n                    [ inst.selectedYear, inst.selectedMonth + 1, inst ] );\n            }\n        },\n\n        /* Determine the number of months to show. */\n        _getNumberOfMonths: function( inst ) {\n            var numMonths = this._get( inst, \"numberOfMonths\" );\n            return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === \"number\" ? [ 1, numMonths ] : numMonths ) );\n        },\n\n        /* Determine the current maximum date - ensure no time components are set. */\n        _getMinMaxDate: function( inst, minMax ) {\n            return this._determineDate( inst, this._get( inst, minMax + \"Date\" ), null );\n        },\n\n        /* Find the number of days in a given month. */\n        _getDaysInMonth: function( year, month ) {\n            return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();\n        },\n\n        /* Find the day of the week of the first of a month. */\n        _getFirstDayOfMonth: function( year, month ) {\n            return new Date( year, month, 1 ).getDay();\n        },\n\n        /* Determines if we should allow a \"next/prev\" month display change. */\n        _canAdjustMonth: function( inst, offset, curYear, curMonth ) {\n            var numMonths = this._getNumberOfMonths( inst ),\n                date = this._daylightSavingAdjust( new Date( curYear,\n                    curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );\n\n            if ( offset < 0 ) {\n                date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );\n            }\n            return this._isInRange( inst, date );\n        },\n\n        /* Is the given date in the accepted range? */\n        _isInRange: function( inst, date ) {\n            var yearSplit, currentYear,\n                minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                minYear = null,\n                maxYear = null,\n                years = this._get( inst, \"yearRange\" );\n            if ( years ) {\n                yearSplit = years.split( \":\" );\n                currentYear = new Date().getFullYear();\n                minYear = parseInt( yearSplit[ 0 ], 10 );\n                maxYear = parseInt( yearSplit[ 1 ], 10 );\n                if ( yearSplit[ 0 ].match( /[+\\-].*/ ) ) {\n                    minYear += currentYear;\n                }\n                if ( yearSplit[ 1 ].match( /[+\\-].*/ ) ) {\n                    maxYear += currentYear;\n                }\n            }\n\n            return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&\n                ( !maxDate || date.getTime() <= maxDate.getTime() ) &&\n                ( !minYear || date.getFullYear() >= minYear ) &&\n                ( !maxYear || date.getFullYear() <= maxYear ) );\n        },\n\n        /* Provide the configuration settings for formatting/parsing. */\n        _getFormatConfig: function( inst ) {\n            var shortYearCutoff = this._get( inst, \"shortYearCutoff\" );\n            shortYearCutoff = ( typeof shortYearCutoff !== \"string\" ? shortYearCutoff :\n                new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );\n            return { shortYearCutoff: shortYearCutoff,\n                dayNamesShort: this._get( inst, \"dayNamesShort\" ), dayNames: this._get( inst, \"dayNames\" ),\n                monthNamesShort: this._get( inst, \"monthNamesShort\" ), monthNames: this._get( inst, \"monthNames\" ) };\n        },\n\n        /* Format the given date for display. */\n        _formatDate: function( inst, day, month, year ) {\n            if ( !day ) {\n                inst.currentDay = inst.selectedDay;\n                inst.currentMonth = inst.selectedMonth;\n                inst.currentYear = inst.selectedYear;\n            }\n            var date = ( day ? ( typeof day === \"object\" ? day :\n                    this._daylightSavingAdjust( new Date( year, month, day ) ) ) :\n                this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );\n            return this.formatDate( this._get( inst, \"dateFormat\" ), date, this._getFormatConfig( inst ) );\n        }\n    } );\n\n    /*\n     * Bind hover events for datepicker elements.\n     * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n     * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n     */\n    function datepicker_bindHover( dpDiv ) {\n        var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n        return dpDiv.on( \"mouseout\", selector, function() {\n            $( this ).removeClass( \"ui-state-hover\" );\n            if ( this.className.indexOf( \"ui-datepicker-prev\" ) !== -1 ) {\n                $( this ).removeClass( \"ui-datepicker-prev-hover\" );\n            }\n            if ( this.className.indexOf( \"ui-datepicker-next\" ) !== -1 ) {\n                $( this ).removeClass( \"ui-datepicker-next-hover\" );\n            }\n        } )\n            .on( \"mouseover\", selector, datepicker_handleMouseover );\n    }\n\n    function datepicker_handleMouseover() {\n        if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {\n            $( this ).parents( \".ui-datepicker-calendar\" ).find( \"a\" ).removeClass( \"ui-state-hover\" );\n            $( this ).addClass( \"ui-state-hover\" );\n            if ( this.className.indexOf( \"ui-datepicker-prev\" ) !== -1 ) {\n                $( this ).addClass( \"ui-datepicker-prev-hover\" );\n            }\n            if ( this.className.indexOf( \"ui-datepicker-next\" ) !== -1 ) {\n                $( this ).addClass( \"ui-datepicker-next-hover\" );\n            }\n        }\n    }\n\n    /* jQuery extend now ignores nulls! */\n    function datepicker_extendRemove( target, props ) {\n        $.extend( target, props );\n        for ( var name in props ) {\n            if ( props[ name ] == null ) {\n                target[ name ] = props[ name ];\n            }\n        }\n        return target;\n    }\n\n    /* Invoke the datepicker functionality.\n       @param  options  string - a command, optionally followed by additional parameters or\n                        Object - settings for attaching new datepicker functionality\n       @return  jQuery object */\n    $.fn.datepicker = function( options ) {\n\n        /* Verify an empty collection wasn't passed - Fixes #6976 */\n        if ( !this.length ) {\n            return this;\n        }\n\n        /* Initialise the date picker. */\n        if ( !$.datepicker.initialized ) {\n            $( document ).on( \"mousedown\", $.datepicker._checkExternalClick );\n            $.datepicker.initialized = true;\n        }\n\n        /* Append datepicker main container to body if not exist. */\n        if ( $( \"#\" + $.datepicker._mainDivId ).length === 0 ) {\n            $( \"body\" ).append( $.datepicker.dpDiv );\n        }\n\n        var otherArgs = Array.prototype.slice.call( arguments, 1 );\n        if ( typeof options === \"string\" && ( options === \"isDisabled\" || options === \"getDate\" || options === \"widget\" ) ) {\n            return $.datepicker[ \"_\" + options + \"Datepicker\" ].\n            apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );\n        }\n        if ( options === \"option\" && arguments.length === 2 && typeof arguments[ 1 ] === \"string\" ) {\n            return $.datepicker[ \"_\" + options + \"Datepicker\" ].\n            apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );\n        }\n        return this.each( function() {\n            if ( typeof options === \"string\" ) {\n                $.datepicker[ \"_\" + options + \"Datepicker\" ]\n                    .apply( $.datepicker, [ this ].concat( otherArgs ) );\n            } else {\n                $.datepicker._attachDatepicker( this, options );\n            }\n        } );\n    };\n\n    $.datepicker = new Datepicker(); // singleton instance\n    $.datepicker.initialized = false;\n    $.datepicker.uuid = new Date().getTime();\n    $.datepicker.version = \"1.13.2\";\n\n    return $.datepicker;\n\n} );\n","jquery/ui-modules/widgets/menu.js":"/*!\n * jQuery UI Menu 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Menu\n//>>group: Widgets\n//>>description: Creates nestable menus.\n//>>docs: http://api.jqueryui.com/menu/\n//>>demos: http://jqueryui.com/menu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/menu.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../keycode\",\n            \"../position\",\n            \"../safe-active-element\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.menu\", {\n        version: \"1.13.2\",\n        defaultElement: \"<ul>\",\n        delay: 300,\n        options: {\n            icons: {\n                submenu: \"ui-icon-caret-1-e\"\n            },\n            items: \"> *\",\n            menus: \"ul\",\n            position: {\n                my: \"left top\",\n                at: \"right top\"\n            },\n            role: \"menu\",\n\n            // Callbacks\n            blur: null,\n            focus: null,\n            select: null\n        },\n\n        _create: function() {\n            this.activeMenu = this.element;\n\n            // Flag used to prevent firing of the click handler\n            // as the event bubbles up through nested menus\n            this.mouseHandled = false;\n            this.lastMousePosition = { x: null, y: null };\n            this.element\n                .uniqueId()\n                .attr( {\n                    role: this.options.role,\n                    tabIndex: 0\n                } );\n\n            this._addClass( \"ui-menu\", \"ui-widget ui-widget-content\" );\n            this._on( {\n\n                // Prevent focus from sticking to links inside menu after clicking\n                // them (focus should always stay on UL during navigation).\n                \"mousedown .ui-menu-item\": function( event ) {\n                    event.preventDefault();\n\n                    this._activateItem( event );\n                },\n                \"click .ui-menu-item\": function( event ) {\n                    var target = $( event.target );\n                    var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );\n                    if ( !this.mouseHandled && target.not( \".ui-state-disabled\" ).length ) {\n                        this.select( event );\n\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\n                        if ( !event.isPropagationStopped() ) {\n                            this.mouseHandled = true;\n                        }\n\n                        // Open submenu on click\n                        if ( target.has( \".ui-menu\" ).length ) {\n                            this.expand( event );\n                        } else if ( !this.element.is( \":focus\" ) &&\n                            active.closest( \".ui-menu\" ).length ) {\n\n                            // Redirect focus to the menu\n                            this.element.trigger( \"focus\", [ true ] );\n\n                            // If the active item is on the top level, let it stay active.\n                            // Otherwise, blur the active item since it is no longer visible.\n                            if ( this.active && this.active.parents( \".ui-menu\" ).length === 1 ) {\n                                clearTimeout( this.timer );\n                            }\n                        }\n                    }\n                },\n                \"mouseenter .ui-menu-item\": \"_activateItem\",\n                \"mousemove .ui-menu-item\": \"_activateItem\",\n                mouseleave: \"collapseAll\",\n                \"mouseleave .ui-menu\": \"collapseAll\",\n                focus: function( event, keepActiveItem ) {\n\n                    // If there's already an active item, keep it active\n                    // If not, activate the first item\n                    var item = this.active || this._menuItems().first();\n\n                    if ( !keepActiveItem ) {\n                        this.focus( event, item );\n                    }\n                },\n                blur: function( event ) {\n                    this._delay( function() {\n                        var notContained = !$.contains(\n                            this.element[ 0 ],\n                            $.ui.safeActiveElement( this.document[ 0 ] )\n                        );\n                        if ( notContained ) {\n                            this.collapseAll( event );\n                        }\n                    } );\n                },\n                keydown: \"_keydown\"\n            } );\n\n            this.refresh();\n\n            // Clicks outside of a menu collapse any open menus\n            this._on( this.document, {\n                click: function( event ) {\n                    if ( this._closeOnDocumentClick( event ) ) {\n                        this.collapseAll( event, true );\n                    }\n\n                    // Reset the mouseHandled flag\n                    this.mouseHandled = false;\n                }\n            } );\n        },\n\n        _activateItem: function( event ) {\n\n            // Ignore mouse events while typeahead is active, see #10458.\n            // Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n            // is over an item in the menu\n            if ( this.previousFilter ) {\n                return;\n            }\n\n            // If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)\n            if ( event.clientX === this.lastMousePosition.x &&\n                event.clientY === this.lastMousePosition.y ) {\n                return;\n            }\n\n            this.lastMousePosition = {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            var actualTarget = $( event.target ).closest( \".ui-menu-item\" ),\n                target = $( event.currentTarget );\n\n            // Ignore bubbled events on parent items, see #11641\n            if ( actualTarget[ 0 ] !== target[ 0 ] ) {\n                return;\n            }\n\n            // If the item is already active, there's nothing to do\n            if ( target.is( \".ui-state-active\" ) ) {\n                return;\n            }\n\n            // Remove ui-state-active class from siblings of the newly focused menu item\n            // to avoid a jump caused by adjacent elements both having a class with a border\n            this._removeClass( target.siblings().children( \".ui-state-active\" ),\n                null, \"ui-state-active\" );\n            this.focus( event, target );\n        },\n\n        _destroy: function() {\n            var items = this.element.find( \".ui-menu-item\" )\n                    .removeAttr( \"role aria-disabled\" ),\n                submenus = items.children( \".ui-menu-item-wrapper\" )\n                    .removeUniqueId()\n                    .removeAttr( \"tabIndex role aria-haspopup\" );\n\n            // Destroy (sub)menus\n            this.element\n                .removeAttr( \"aria-activedescendant\" )\n                .find( \".ui-menu\" ).addBack()\n                .removeAttr( \"role aria-labelledby aria-expanded aria-hidden aria-disabled \" +\n                    \"tabIndex\" )\n                .removeUniqueId()\n                .show();\n\n            submenus.children().each( function() {\n                var elem = $( this );\n                if ( elem.data( \"ui-menu-submenu-caret\" ) ) {\n                    elem.remove();\n                }\n            } );\n        },\n\n        _keydown: function( event ) {\n            var match, prev, character, skip,\n                preventDefault = true;\n\n            switch ( event.keyCode ) {\n                case $.ui.keyCode.PAGE_UP:\n                    this.previousPage( event );\n                    break;\n                case $.ui.keyCode.PAGE_DOWN:\n                    this.nextPage( event );\n                    break;\n                case $.ui.keyCode.HOME:\n                    this._move( \"first\", \"first\", event );\n                    break;\n                case $.ui.keyCode.END:\n                    this._move( \"last\", \"last\", event );\n                    break;\n                case $.ui.keyCode.UP:\n                    this.previous( event );\n                    break;\n                case $.ui.keyCode.DOWN:\n                    this.next( event );\n                    break;\n                case $.ui.keyCode.LEFT:\n                    this.collapse( event );\n                    break;\n                case $.ui.keyCode.RIGHT:\n                    if ( this.active && !this.active.is( \".ui-state-disabled\" ) ) {\n                        this.expand( event );\n                    }\n                    break;\n                case $.ui.keyCode.ENTER:\n                case $.ui.keyCode.SPACE:\n                    this._activate( event );\n                    break;\n                case $.ui.keyCode.ESCAPE:\n                    this.collapse( event );\n                    break;\n                default:\n                    preventDefault = false;\n                    prev = this.previousFilter || \"\";\n                    skip = false;\n\n                    // Support number pad values\n                    character = event.keyCode >= 96 && event.keyCode <= 105 ?\n                        ( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );\n\n                    clearTimeout( this.filterTimer );\n\n                    if ( character === prev ) {\n                        skip = true;\n                    } else {\n                        character = prev + character;\n                    }\n\n                    match = this._filterMenuItems( character );\n                    match = skip && match.index( this.active.next() ) !== -1 ?\n                        this.active.nextAll( \".ui-menu-item\" ) :\n                        match;\n\n                    // If no matches on the current filter, reset to the last character pressed\n                    // to move down the menu to the first item that starts with that character\n                    if ( !match.length ) {\n                        character = String.fromCharCode( event.keyCode );\n                        match = this._filterMenuItems( character );\n                    }\n\n                    if ( match.length ) {\n                        this.focus( event, match );\n                        this.previousFilter = character;\n                        this.filterTimer = this._delay( function() {\n                            delete this.previousFilter;\n                        }, 1000 );\n                    } else {\n                        delete this.previousFilter;\n                    }\n            }\n\n            if ( preventDefault ) {\n                event.preventDefault();\n            }\n        },\n\n        _activate: function( event ) {\n            if ( this.active && !this.active.is( \".ui-state-disabled\" ) ) {\n                if ( this.active.children( \"[aria-haspopup='true']\" ).length ) {\n                    this.expand( event );\n                } else {\n                    this.select( event );\n                }\n            }\n        },\n\n        refresh: function() {\n            var menus, items, newSubmenus, newItems, newWrappers,\n                that = this,\n                icon = this.options.icons.submenu,\n                submenus = this.element.find( this.options.menus );\n\n            this._toggleClass( \"ui-menu-icons\", null, !!this.element.find( \".ui-icon\" ).length );\n\n            // Initialize nested menus\n            newSubmenus = submenus.filter( \":not(.ui-menu)\" )\n                .hide()\n                .attr( {\n                    role: this.options.role,\n                    \"aria-hidden\": \"true\",\n                    \"aria-expanded\": \"false\"\n                } )\n                .each( function() {\n                    var menu = $( this ),\n                        item = menu.prev(),\n                        submenuCaret = $( \"<span>\" ).data( \"ui-menu-submenu-caret\", true );\n\n                    that._addClass( submenuCaret, \"ui-menu-icon\", \"ui-icon \" + icon );\n                    item\n                        .attr( \"aria-haspopup\", \"true\" )\n                        .prepend( submenuCaret );\n                    menu.attr( \"aria-labelledby\", item.attr( \"id\" ) );\n                } );\n\n            this._addClass( newSubmenus, \"ui-menu\", \"ui-widget ui-widget-content ui-front\" );\n\n            menus = submenus.add( this.element );\n            items = menus.find( this.options.items );\n\n            // Initialize menu-items containing spaces and/or dashes only as dividers\n            items.not( \".ui-menu-item\" ).each( function() {\n                var item = $( this );\n                if ( that._isDivider( item ) ) {\n                    that._addClass( item, \"ui-menu-divider\", \"ui-widget-content\" );\n                }\n            } );\n\n            // Don't refresh list items that are already adapted\n            newItems = items.not( \".ui-menu-item, .ui-menu-divider\" );\n            newWrappers = newItems.children()\n                .not( \".ui-menu\" )\n                .uniqueId()\n                .attr( {\n                    tabIndex: -1,\n                    role: this._itemRole()\n                } );\n            this._addClass( newItems, \"ui-menu-item\" )\n                ._addClass( newWrappers, \"ui-menu-item-wrapper\" );\n\n            // Add aria-disabled attribute to any disabled menu item\n            items.filter( \".ui-state-disabled\" ).attr( \"aria-disabled\", \"true\" );\n\n            // If the active item has been removed, blur the menu\n            if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {\n                this.blur();\n            }\n        },\n\n        _itemRole: function() {\n            return {\n                menu: \"menuitem\",\n                listbox: \"option\"\n            }[ this.options.role ];\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"icons\" ) {\n                var icons = this.element.find( \".ui-menu-icon\" );\n                this._removeClass( icons, null, this.options.icons.submenu )\n                    ._addClass( icons, null, value.submenu );\n            }\n            this._super( key, value );\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this.element.attr( \"aria-disabled\", String( value ) );\n            this._toggleClass( null, \"ui-state-disabled\", !!value );\n        },\n\n        focus: function( event, item ) {\n            var nested, focused, activeParent;\n            this.blur( event, event && event.type === \"focus\" );\n\n            this._scrollIntoView( item );\n\n            this.active = item.first();\n\n            focused = this.active.children( \".ui-menu-item-wrapper\" );\n            this._addClass( focused, null, \"ui-state-active\" );\n\n            // Only update aria-activedescendant if there's a role\n            // otherwise we assume focus is managed elsewhere\n            if ( this.options.role ) {\n                this.element.attr( \"aria-activedescendant\", focused.attr( \"id\" ) );\n            }\n\n            // Highlight active parent menu item, if any\n            activeParent = this.active\n                .parent()\n                .closest( \".ui-menu-item\" )\n                .children( \".ui-menu-item-wrapper\" );\n            this._addClass( activeParent, null, \"ui-state-active\" );\n\n            if ( event && event.type === \"keydown\" ) {\n                this._close();\n            } else {\n                this.timer = this._delay( function() {\n                    this._close();\n                }, this.delay );\n            }\n\n            nested = item.children( \".ui-menu\" );\n            if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {\n                this._startOpening( nested );\n            }\n            this.activeMenu = item.parent();\n\n            this._trigger( \"focus\", event, { item: item } );\n        },\n\n        _scrollIntoView: function( item ) {\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n            if ( this._hasScroll() ) {\n                borderTop = parseFloat( $.css( this.activeMenu[ 0 ], \"borderTopWidth\" ) ) || 0;\n                paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], \"paddingTop\" ) ) || 0;\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n                scroll = this.activeMenu.scrollTop();\n                elementHeight = this.activeMenu.height();\n                itemHeight = item.outerHeight();\n\n                if ( offset < 0 ) {\n                    this.activeMenu.scrollTop( scroll + offset );\n                } else if ( offset + itemHeight > elementHeight ) {\n                    this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );\n                }\n            }\n        },\n\n        blur: function( event, fromFocus ) {\n            if ( !fromFocus ) {\n                clearTimeout( this.timer );\n            }\n\n            if ( !this.active ) {\n                return;\n            }\n\n            this._removeClass( this.active.children( \".ui-menu-item-wrapper\" ),\n                null, \"ui-state-active\" );\n\n            this._trigger( \"blur\", event, { item: this.active } );\n            this.active = null;\n        },\n\n        _startOpening: function( submenu ) {\n            clearTimeout( this.timer );\n\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n            // shift in the submenu position when mousing over the caret icon\n            if ( submenu.attr( \"aria-hidden\" ) !== \"true\" ) {\n                return;\n            }\n\n            this.timer = this._delay( function() {\n                this._close();\n                this._open( submenu );\n            }, this.delay );\n        },\n\n        _open: function( submenu ) {\n            var position = $.extend( {\n                of: this.active\n            }, this.options.position );\n\n            clearTimeout( this.timer );\n            this.element.find( \".ui-menu\" ).not( submenu.parents( \".ui-menu\" ) )\n                .hide()\n                .attr( \"aria-hidden\", \"true\" );\n\n            submenu\n                .show()\n                .removeAttr( \"aria-hidden\" )\n                .attr( \"aria-expanded\", \"true\" )\n                .position( position );\n        },\n\n        collapseAll: function( event, all ) {\n            clearTimeout( this.timer );\n            this.timer = this._delay( function() {\n\n                // If we were passed an event, look for the submenu that contains the event\n                var currentMenu = all ? this.element :\n                    $( event && event.target ).closest( this.element.find( \".ui-menu\" ) );\n\n                // If we found no valid submenu ancestor, use the main menu to close all\n                // sub menus anyway\n                if ( !currentMenu.length ) {\n                    currentMenu = this.element;\n                }\n\n                this._close( currentMenu );\n\n                this.blur( event );\n\n                // Work around active item staying active after menu is blurred\n                this._removeClass( currentMenu.find( \".ui-state-active\" ), null, \"ui-state-active\" );\n\n                this.activeMenu = currentMenu;\n            }, all ? 0 : this.delay );\n        },\n\n        // With no arguments, closes the currently active menu - if nothing is active\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\n        _close: function( startMenu ) {\n            if ( !startMenu ) {\n                startMenu = this.active ? this.active.parent() : this.element;\n            }\n\n            startMenu.find( \".ui-menu\" )\n                .hide()\n                .attr( \"aria-hidden\", \"true\" )\n                .attr( \"aria-expanded\", \"false\" );\n        },\n\n        _closeOnDocumentClick: function( event ) {\n            return !$( event.target ).closest( \".ui-menu\" ).length;\n        },\n\n        _isDivider: function( item ) {\n\n            // Match hyphen, em dash, en dash\n            return !/[^\\-\\u2014\\u2013\\s]/.test( item.text() );\n        },\n\n        collapse: function( event ) {\n            var newItem = this.active &&\n                this.active.parent().closest( \".ui-menu-item\", this.element );\n            if ( newItem && newItem.length ) {\n                this._close();\n                this.focus( event, newItem );\n            }\n        },\n\n        expand: function( event ) {\n            var newItem = this.active && this._menuItems( this.active.children( \".ui-menu\" ) ).first();\n\n            if ( newItem && newItem.length ) {\n                this._open( newItem.parent() );\n\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n                this._delay( function() {\n                    this.focus( event, newItem );\n                } );\n            }\n        },\n\n        next: function( event ) {\n            this._move( \"next\", \"first\", event );\n        },\n\n        previous: function( event ) {\n            this._move( \"prev\", \"last\", event );\n        },\n\n        isFirstItem: function() {\n            return this.active && !this.active.prevAll( \".ui-menu-item\" ).length;\n        },\n\n        isLastItem: function() {\n            return this.active && !this.active.nextAll( \".ui-menu-item\" ).length;\n        },\n\n        _menuItems: function( menu ) {\n            return ( menu || this.element )\n                .find( this.options.items )\n                .filter( \".ui-menu-item\" );\n        },\n\n        _move: function( direction, filter, event ) {\n            var next;\n            if ( this.active ) {\n                if ( direction === \"first\" || direction === \"last\" ) {\n                    next = this.active\n                        [ direction === \"first\" ? \"prevAll\" : \"nextAll\" ]( \".ui-menu-item\" )\n                        .last();\n                } else {\n                    next = this.active\n                        [ direction + \"All\" ]( \".ui-menu-item\" )\n                        .first();\n                }\n            }\n            if ( !next || !next.length || !this.active ) {\n                next = this._menuItems( this.activeMenu )[ filter ]();\n            }\n\n            this.focus( event, next );\n        },\n\n        nextPage: function( event ) {\n            var item, base, height;\n\n            if ( !this.active ) {\n                this.next( event );\n                return;\n            }\n            if ( this.isLastItem() ) {\n                return;\n            }\n            if ( this._hasScroll() ) {\n                base = this.active.offset().top;\n                height = this.element.innerHeight();\n\n                // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n                if ( $.fn.jquery.indexOf( \"3.2.\" ) === 0 ) {\n                    height += this.element[ 0 ].offsetHeight - this.element.outerHeight();\n                }\n\n                this.active.nextAll( \".ui-menu-item\" ).each( function() {\n                    item = $( this );\n                    return item.offset().top - base - height < 0;\n                } );\n\n                this.focus( event, item );\n            } else {\n                this.focus( event, this._menuItems( this.activeMenu )\n                    [ !this.active ? \"first\" : \"last\" ]() );\n            }\n        },\n\n        previousPage: function( event ) {\n            var item, base, height;\n            if ( !this.active ) {\n                this.next( event );\n                return;\n            }\n            if ( this.isFirstItem() ) {\n                return;\n            }\n            if ( this._hasScroll() ) {\n                base = this.active.offset().top;\n                height = this.element.innerHeight();\n\n                // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n                if ( $.fn.jquery.indexOf( \"3.2.\" ) === 0 ) {\n                    height += this.element[ 0 ].offsetHeight - this.element.outerHeight();\n                }\n\n                this.active.prevAll( \".ui-menu-item\" ).each( function() {\n                    item = $( this );\n                    return item.offset().top - base + height > 0;\n                } );\n\n                this.focus( event, item );\n            } else {\n                this.focus( event, this._menuItems( this.activeMenu ).first() );\n            }\n        },\n\n        _hasScroll: function() {\n            return this.element.outerHeight() < this.element.prop( \"scrollHeight\" );\n        },\n\n        select: function( event ) {\n\n            // TODO: It should never be possible to not have an active item at this\n            // point, but the tests don't trigger mouseenter before click.\n            this.active = this.active || $( event.target ).closest( \".ui-menu-item\" );\n            var ui = { item: this.active };\n            if ( !this.active.has( \".ui-menu\" ).length ) {\n                this.collapseAll( event, true );\n            }\n            this._trigger( \"select\", event, ui );\n        },\n\n        _filterMenuItems: function( character ) {\n            var escapedCharacter = character.replace( /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\" ),\n                regex = new RegExp( \"^\" + escapedCharacter, \"i\" );\n\n            return this.activeMenu\n                .find( this.options.items )\n\n                // Only match on items, not dividers or other content (#10571)\n                .filter( \".ui-menu-item\" )\n                .filter( function() {\n                    return regex.test(\n                        String.prototype.trim.call(\n                            $( this ).children( \".ui-menu-item-wrapper\" ).text() ) );\n                } );\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/button.js":"/*!\n * jQuery UI Button 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Button\n//>>group: Widgets\n//>>description: Enhances a form with themeable buttons.\n//>>docs: http://api.jqueryui.com/button/\n//>>demos: http://jqueryui.com/button/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n\n            // These are only for backcompat\n            // TODO: Remove after 1.12\n            \"./controlgroup\",\n            \"./checkboxradio\",\n\n            \"../keycode\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.button\", {\n        version: \"1.13.2\",\n        defaultElement: \"<button>\",\n        options: {\n            classes: {\n                \"ui-button\": \"ui-corner-all\"\n            },\n            disabled: null,\n            icon: null,\n            iconPosition: \"beginning\",\n            label: null,\n            showLabel: true\n        },\n\n        _getCreateOptions: function() {\n            var disabled,\n\n                // This is to support cases like in jQuery Mobile where the base widget does have\n                // an implementation of _getCreateOptions\n                options = this._super() || {};\n\n            this.isInput = this.element.is( \"input\" );\n\n            disabled = this.element[ 0 ].disabled;\n            if ( disabled != null ) {\n                options.disabled = disabled;\n            }\n\n            this.originalLabel = this.isInput ? this.element.val() : this.element.html();\n            if ( this.originalLabel ) {\n                options.label = this.originalLabel;\n            }\n\n            return options;\n        },\n\n        _create: function() {\n            if ( !this.option.showLabel & !this.options.icon ) {\n                this.options.showLabel = true;\n            }\n\n            // We have to check the option again here even though we did in _getCreateOptions,\n            // because null may have been passed on init which would override what was set in\n            // _getCreateOptions\n            if ( this.options.disabled == null ) {\n                this.options.disabled = this.element[ 0 ].disabled || false;\n            }\n\n            this.hasTitle = !!this.element.attr( \"title\" );\n\n            // Check to see if the label needs to be set or if its already correct\n            if ( this.options.label && this.options.label !== this.originalLabel ) {\n                if ( this.isInput ) {\n                    this.element.val( this.options.label );\n                } else {\n                    this.element.html( this.options.label );\n                }\n            }\n            this._addClass( \"ui-button\", \"ui-widget\" );\n            this._setOption( \"disabled\", this.options.disabled );\n            this._enhance();\n\n            if ( this.element.is( \"a\" ) ) {\n                this._on( {\n                    \"keyup\": function( event ) {\n                        if ( event.keyCode === $.ui.keyCode.SPACE ) {\n                            event.preventDefault();\n\n                            // Support: PhantomJS <= 1.9, IE 8 Only\n                            // If a native click is available use it so we actually cause navigation\n                            // otherwise just trigger a click event\n                            if ( this.element[ 0 ].click ) {\n                                this.element[ 0 ].click();\n                            } else {\n                                this.element.trigger( \"click\" );\n                            }\n                        }\n                    }\n                } );\n            }\n        },\n\n        _enhance: function() {\n            if ( !this.element.is( \"button\" ) ) {\n                this.element.attr( \"role\", \"button\" );\n            }\n\n            if ( this.options.icon ) {\n                this._updateIcon( \"icon\", this.options.icon );\n                this._updateTooltip();\n            }\n        },\n\n        _updateTooltip: function() {\n            this.title = this.element.attr( \"title\" );\n\n            if ( !this.options.showLabel && !this.title ) {\n                this.element.attr( \"title\", this.options.label );\n            }\n        },\n\n        _updateIcon: function( option, value ) {\n            var icon = option !== \"iconPosition\",\n                position = icon ? this.options.iconPosition : value,\n                displayBlock = position === \"top\" || position === \"bottom\";\n\n            // Create icon\n            if ( !this.icon ) {\n                this.icon = $( \"<span>\" );\n\n                this._addClass( this.icon, \"ui-button-icon\", \"ui-icon\" );\n\n                if ( !this.options.showLabel ) {\n                    this._addClass( \"ui-button-icon-only\" );\n                }\n            } else if ( icon ) {\n\n                // If we are updating the icon remove the old icon class\n                this._removeClass( this.icon, null, this.options.icon );\n            }\n\n            // If we are updating the icon add the new icon class\n            if ( icon ) {\n                this._addClass( this.icon, null, value );\n            }\n\n            this._attachIcon( position );\n\n            // If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove\n            // the iconSpace if there is one.\n            if ( displayBlock ) {\n                this._addClass( this.icon, null, \"ui-widget-icon-block\" );\n                if ( this.iconSpace ) {\n                    this.iconSpace.remove();\n                }\n            } else {\n\n                // Position is beginning or end so remove the ui-widget-icon-block class and add the\n                // space if it does not exist\n                if ( !this.iconSpace ) {\n                    this.iconSpace = $( \"<span> </span>\" );\n                    this._addClass( this.iconSpace, \"ui-button-icon-space\" );\n                }\n                this._removeClass( this.icon, null, \"ui-wiget-icon-block\" );\n                this._attachIconSpace( position );\n            }\n        },\n\n        _destroy: function() {\n            this.element.removeAttr( \"role\" );\n\n            if ( this.icon ) {\n                this.icon.remove();\n            }\n            if ( this.iconSpace ) {\n                this.iconSpace.remove();\n            }\n            if ( !this.hasTitle ) {\n                this.element.removeAttr( \"title\" );\n            }\n        },\n\n        _attachIconSpace: function( iconPosition ) {\n            this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? \"before\" : \"after\" ]( this.iconSpace );\n        },\n\n        _attachIcon: function( iconPosition ) {\n            this.element[ /^(?:end|bottom)/.test( iconPosition ) ? \"append\" : \"prepend\" ]( this.icon );\n        },\n\n        _setOptions: function( options ) {\n            var newShowLabel = options.showLabel === undefined ?\n                    this.options.showLabel :\n                    options.showLabel,\n                newIcon = options.icon === undefined ? this.options.icon : options.icon;\n\n            if ( !newShowLabel && !newIcon ) {\n                options.showLabel = true;\n            }\n            this._super( options );\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"icon\" ) {\n                if ( value ) {\n                    this._updateIcon( key, value );\n                } else if ( this.icon ) {\n                    this.icon.remove();\n                    if ( this.iconSpace ) {\n                        this.iconSpace.remove();\n                    }\n                }\n            }\n\n            if ( key === \"iconPosition\" ) {\n                this._updateIcon( key, value );\n            }\n\n            // Make sure we can't end up with a button that has neither text nor icon\n            if ( key === \"showLabel\" ) {\n                this._toggleClass( \"ui-button-icon-only\", null, !value );\n                this._updateTooltip();\n            }\n\n            if ( key === \"label\" ) {\n                if ( this.isInput ) {\n                    this.element.val( value );\n                } else {\n\n                    // If there is an icon, append it, else nothing then append the value\n                    // this avoids removal of the icon when setting label text\n                    this.element.html( value );\n                    if ( this.icon ) {\n                        this._attachIcon( this.options.iconPosition );\n                        this._attachIconSpace( this.options.iconPosition );\n                    }\n                }\n            }\n\n            this._super( key, value );\n\n            if ( key === \"disabled\" ) {\n                this._toggleClass( null, \"ui-state-disabled\", value );\n                this.element[ 0 ].disabled = value;\n                if ( value ) {\n                    this.element.trigger( \"blur\" );\n                }\n            }\n        },\n\n        refresh: function() {\n\n            // Make sure to only check disabled if its an element that supports this otherwise\n            // check for the disabled class to determine state\n            var isDisabled = this.element.is( \"input, button\" ) ?\n                this.element[ 0 ].disabled : this.element.hasClass( \"ui-button-disabled\" );\n\n            if ( isDisabled !== this.options.disabled ) {\n                this._setOptions( { disabled: isDisabled } );\n            }\n\n            this._updateTooltip();\n        }\n    } );\n\n// DEPRECATED\n    if ( $.uiBackCompat !== false ) {\n\n        // Text and Icons options\n        $.widget( \"ui.button\", $.ui.button, {\n            options: {\n                text: true,\n                icons: {\n                    primary: null,\n                    secondary: null\n                }\n            },\n\n            _create: function() {\n                if ( this.options.showLabel && !this.options.text ) {\n                    this.options.showLabel = this.options.text;\n                }\n                if ( !this.options.showLabel && this.options.text ) {\n                    this.options.text = this.options.showLabel;\n                }\n                if ( !this.options.icon && ( this.options.icons.primary ||\n                    this.options.icons.secondary ) ) {\n                    if ( this.options.icons.primary ) {\n                        this.options.icon = this.options.icons.primary;\n                    } else {\n                        this.options.icon = this.options.icons.secondary;\n                        this.options.iconPosition = \"end\";\n                    }\n                } else if ( this.options.icon ) {\n                    this.options.icons.primary = this.options.icon;\n                }\n                this._super();\n            },\n\n            _setOption: function( key, value ) {\n                if ( key === \"text\" ) {\n                    this._super( \"showLabel\", value );\n                    return;\n                }\n                if ( key === \"showLabel\" ) {\n                    this.options.text = value;\n                }\n                if ( key === \"icon\" ) {\n                    this.options.icons.primary = value;\n                }\n                if ( key === \"icons\" ) {\n                    if ( value.primary ) {\n                        this._super( \"icon\", value.primary );\n                        this._super( \"iconPosition\", \"beginning\" );\n                    } else if ( value.secondary ) {\n                        this._super( \"icon\", value.secondary );\n                        this._super( \"iconPosition\", \"end\" );\n                    }\n                }\n                this._superApply( arguments );\n            }\n        } );\n\n        $.fn.button = ( function( orig ) {\n            return function( options ) {\n                var isMethodCall = typeof options === \"string\";\n                var args = Array.prototype.slice.call( arguments, 1 );\n                var returnValue = this;\n\n                if ( isMethodCall ) {\n\n                    // If this is an empty collection, we need to have the instance method\n                    // return undefined instead of the jQuery instance\n                    if ( !this.length && options === \"instance\" ) {\n                        returnValue = undefined;\n                    } else {\n                        this.each( function() {\n                            var methodValue;\n                            var type = $( this ).attr( \"type\" );\n                            var name = type !== \"checkbox\" && type !== \"radio\" ?\n                                \"button\" :\n                                \"checkboxradio\";\n                            var instance = $.data( this, \"ui-\" + name );\n\n                            if ( options === \"instance\" ) {\n                                returnValue = instance;\n                                return false;\n                            }\n\n                            if ( !instance ) {\n                                return $.error( \"cannot call methods on button\" +\n                                    \" prior to initialization; \" +\n                                    \"attempted to call method '\" + options + \"'\" );\n                            }\n\n                            if ( typeof instance[ options ] !== \"function\" ||\n                                options.charAt( 0 ) === \"_\" ) {\n                                return $.error( \"no such method '\" + options + \"' for button\" +\n                                    \" widget instance\" );\n                            }\n\n                            methodValue = instance[ options ].apply( instance, args );\n\n                            if ( methodValue !== instance && methodValue !== undefined ) {\n                                returnValue = methodValue && methodValue.jquery ?\n                                    returnValue.pushStack( methodValue.get() ) :\n                                    methodValue;\n                                return false;\n                            }\n                        } );\n                    }\n                } else {\n\n                    // Allow multiple hashes to be passed on init\n                    if ( args.length ) {\n                        options = $.widget.extend.apply( null, [ options ].concat( args ) );\n                    }\n\n                    this.each( function() {\n                        var type = $( this ).attr( \"type\" );\n                        var name = type !== \"checkbox\" && type !== \"radio\" ? \"button\" : \"checkboxradio\";\n                        var instance = $.data( this, \"ui-\" + name );\n\n                        if ( instance ) {\n                            instance.option( options || {} );\n                            if ( instance._init ) {\n                                instance._init();\n                            }\n                        } else {\n                            if ( name === \"button\" ) {\n                                orig.call( $( this ), options );\n                                return;\n                            }\n\n                            $( this ).checkboxradio( $.extend( { icon: false }, options ) );\n                        }\n                    } );\n                }\n\n                return returnValue;\n            };\n        } )( $.fn.button );\n\n        $.fn.buttonset = function() {\n            if ( !$.ui.controlgroup ) {\n                $.error( \"Controlgroup widget missing\" );\n            }\n            if ( arguments[ 0 ] === \"option\" && arguments[ 1 ] === \"items\" && arguments[ 2 ] ) {\n                return this.controlgroup.apply( this,\n                    [ arguments[ 0 ], \"items.button\", arguments[ 2 ] ] );\n            }\n            if ( arguments[ 0 ] === \"option\" && arguments[ 1 ] === \"items\" ) {\n                return this.controlgroup.apply( this, [ arguments[ 0 ], \"items.button\" ] );\n            }\n            if ( typeof arguments[ 0 ] === \"object\" && arguments[ 0 ].items ) {\n                arguments[ 0 ].items = {\n                    button: arguments[ 0 ].items\n                };\n            }\n            return this.controlgroup.apply( this, arguments );\n        };\n    }\n\n    return $.ui.button;\n\n} );\n","jquery/ui-modules/widgets/slider.js":"/*!\n * jQuery UI Slider 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Slider\n//>>group: Widgets\n//>>description: Displays a flexible slider with ranges and accessibility via keyboard.\n//>>docs: http://api.jqueryui.com/slider/\n//>>demos: http://jqueryui.com/slider/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/slider.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../keycode\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.slider\", $.ui.mouse, {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"slide\",\n\n        options: {\n            animate: false,\n            classes: {\n                \"ui-slider\": \"ui-corner-all\",\n                \"ui-slider-handle\": \"ui-corner-all\",\n\n                // Note: ui-widget-header isn't the most fittingly semantic framework class for this\n                // element, but worked best visually with a variety of themes\n                \"ui-slider-range\": \"ui-corner-all ui-widget-header\"\n            },\n            distance: 0,\n            max: 100,\n            min: 0,\n            orientation: \"horizontal\",\n            range: false,\n            step: 1,\n            value: 0,\n            values: null,\n\n            // Callbacks\n            change: null,\n            slide: null,\n            start: null,\n            stop: null\n        },\n\n        // Number of pages in a slider\n        // (how many times can you page up/down to go through the whole range)\n        numPages: 5,\n\n        _create: function() {\n            this._keySliding = false;\n            this._mouseSliding = false;\n            this._animateOff = true;\n            this._handleIndex = null;\n            this._detectOrientation();\n            this._mouseInit();\n            this._calculateNewMax();\n\n            this._addClass( \"ui-slider ui-slider-\" + this.orientation,\n                \"ui-widget ui-widget-content\" );\n\n            this._refresh();\n\n            this._animateOff = false;\n        },\n\n        _refresh: function() {\n            this._createRange();\n            this._createHandles();\n            this._setupEvents();\n            this._refreshValue();\n        },\n\n        _createHandles: function() {\n            var i, handleCount,\n                options = this.options,\n                existingHandles = this.element.find( \".ui-slider-handle\" ),\n                handle = \"<span tabindex='0'></span>\",\n                handles = [];\n\n            handleCount = ( options.values && options.values.length ) || 1;\n\n            if ( existingHandles.length > handleCount ) {\n                existingHandles.slice( handleCount ).remove();\n                existingHandles = existingHandles.slice( 0, handleCount );\n            }\n\n            for ( i = existingHandles.length; i < handleCount; i++ ) {\n                handles.push( handle );\n            }\n\n            this.handles = existingHandles.add( $( handles.join( \"\" ) ).appendTo( this.element ) );\n\n            this._addClass( this.handles, \"ui-slider-handle\", \"ui-state-default\" );\n\n            this.handle = this.handles.eq( 0 );\n\n            this.handles.each( function( i ) {\n                $( this )\n                    .data( \"ui-slider-handle-index\", i )\n                    .attr( \"tabIndex\", 0 );\n            } );\n        },\n\n        _createRange: function() {\n            var options = this.options;\n\n            if ( options.range ) {\n                if ( options.range === true ) {\n                    if ( !options.values ) {\n                        options.values = [ this._valueMin(), this._valueMin() ];\n                    } else if ( options.values.length && options.values.length !== 2 ) {\n                        options.values = [ options.values[ 0 ], options.values[ 0 ] ];\n                    } else if ( Array.isArray( options.values ) ) {\n                        options.values = options.values.slice( 0 );\n                    }\n                }\n\n                if ( !this.range || !this.range.length ) {\n                    this.range = $( \"<div>\" )\n                        .appendTo( this.element );\n\n                    this._addClass( this.range, \"ui-slider-range\" );\n                } else {\n                    this._removeClass( this.range, \"ui-slider-range-min ui-slider-range-max\" );\n\n                    // Handle range switching from true to min/max\n                    this.range.css( {\n                        \"left\": \"\",\n                        \"bottom\": \"\"\n                    } );\n                }\n                if ( options.range === \"min\" || options.range === \"max\" ) {\n                    this._addClass( this.range, \"ui-slider-range-\" + options.range );\n                }\n            } else {\n                if ( this.range ) {\n                    this.range.remove();\n                }\n                this.range = null;\n            }\n        },\n\n        _setupEvents: function() {\n            this._off( this.handles );\n            this._on( this.handles, this._handleEvents );\n            this._hoverable( this.handles );\n            this._focusable( this.handles );\n        },\n\n        _destroy: function() {\n            this.handles.remove();\n            if ( this.range ) {\n                this.range.remove();\n            }\n\n            this._mouseDestroy();\n        },\n\n        _mouseCapture: function( event ) {\n            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,\n                that = this,\n                o = this.options;\n\n            if ( o.disabled ) {\n                return false;\n            }\n\n            this.elementSize = {\n                width: this.element.outerWidth(),\n                height: this.element.outerHeight()\n            };\n            this.elementOffset = this.element.offset();\n\n            position = { x: event.pageX, y: event.pageY };\n            normValue = this._normValueFromMouse( position );\n            distance = this._valueMax() - this._valueMin() + 1;\n            this.handles.each( function( i ) {\n                var thisDistance = Math.abs( normValue - that.values( i ) );\n                if ( ( distance > thisDistance ) ||\n                    ( distance === thisDistance &&\n                        ( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {\n                    distance = thisDistance;\n                    closestHandle = $( this );\n                    index = i;\n                }\n            } );\n\n            allowed = this._start( event, index );\n            if ( allowed === false ) {\n                return false;\n            }\n            this._mouseSliding = true;\n\n            this._handleIndex = index;\n\n            this._addClass( closestHandle, null, \"ui-state-active\" );\n            closestHandle.trigger( \"focus\" );\n\n            offset = closestHandle.offset();\n            mouseOverHandle = !$( event.target ).parents().addBack().is( \".ui-slider-handle\" );\n            this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {\n                left: event.pageX - offset.left - ( closestHandle.width() / 2 ),\n                top: event.pageY - offset.top -\n                    ( closestHandle.height() / 2 ) -\n                    ( parseInt( closestHandle.css( \"borderTopWidth\" ), 10 ) || 0 ) -\n                    ( parseInt( closestHandle.css( \"borderBottomWidth\" ), 10 ) || 0 ) +\n                    ( parseInt( closestHandle.css( \"marginTop\" ), 10 ) || 0 )\n            };\n\n            if ( !this.handles.hasClass( \"ui-state-hover\" ) ) {\n                this._slide( event, index, normValue );\n            }\n            this._animateOff = true;\n            return true;\n        },\n\n        _mouseStart: function() {\n            return true;\n        },\n\n        _mouseDrag: function( event ) {\n            var position = { x: event.pageX, y: event.pageY },\n                normValue = this._normValueFromMouse( position );\n\n            this._slide( event, this._handleIndex, normValue );\n\n            return false;\n        },\n\n        _mouseStop: function( event ) {\n            this._removeClass( this.handles, null, \"ui-state-active\" );\n            this._mouseSliding = false;\n\n            this._stop( event, this._handleIndex );\n            this._change( event, this._handleIndex );\n\n            this._handleIndex = null;\n            this._clickOffset = null;\n            this._animateOff = false;\n\n            return false;\n        },\n\n        _detectOrientation: function() {\n            this.orientation = ( this.options.orientation === \"vertical\" ) ? \"vertical\" : \"horizontal\";\n        },\n\n        _normValueFromMouse: function( position ) {\n            var pixelTotal,\n                pixelMouse,\n                percentMouse,\n                valueTotal,\n                valueMouse;\n\n            if ( this.orientation === \"horizontal\" ) {\n                pixelTotal = this.elementSize.width;\n                pixelMouse = position.x - this.elementOffset.left -\n                    ( this._clickOffset ? this._clickOffset.left : 0 );\n            } else {\n                pixelTotal = this.elementSize.height;\n                pixelMouse = position.y - this.elementOffset.top -\n                    ( this._clickOffset ? this._clickOffset.top : 0 );\n            }\n\n            percentMouse = ( pixelMouse / pixelTotal );\n            if ( percentMouse > 1 ) {\n                percentMouse = 1;\n            }\n            if ( percentMouse < 0 ) {\n                percentMouse = 0;\n            }\n            if ( this.orientation === \"vertical\" ) {\n                percentMouse = 1 - percentMouse;\n            }\n\n            valueTotal = this._valueMax() - this._valueMin();\n            valueMouse = this._valueMin() + percentMouse * valueTotal;\n\n            return this._trimAlignValue( valueMouse );\n        },\n\n        _uiHash: function( index, value, values ) {\n            var uiHash = {\n                handle: this.handles[ index ],\n                handleIndex: index,\n                value: value !== undefined ? value : this.value()\n            };\n\n            if ( this._hasMultipleValues() ) {\n                uiHash.value = value !== undefined ? value : this.values( index );\n                uiHash.values = values || this.values();\n            }\n\n            return uiHash;\n        },\n\n        _hasMultipleValues: function() {\n            return this.options.values && this.options.values.length;\n        },\n\n        _start: function( event, index ) {\n            return this._trigger( \"start\", event, this._uiHash( index ) );\n        },\n\n        _slide: function( event, index, newVal ) {\n            var allowed, otherVal,\n                currentValue = this.value(),\n                newValues = this.values();\n\n            if ( this._hasMultipleValues() ) {\n                otherVal = this.values( index ? 0 : 1 );\n                currentValue = this.values( index );\n\n                if ( this.options.values.length === 2 && this.options.range === true ) {\n                    newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );\n                }\n\n                newValues[ index ] = newVal;\n            }\n\n            if ( newVal === currentValue ) {\n                return;\n            }\n\n            allowed = this._trigger( \"slide\", event, this._uiHash( index, newVal, newValues ) );\n\n            // A slide can be canceled by returning false from the slide callback\n            if ( allowed === false ) {\n                return;\n            }\n\n            if ( this._hasMultipleValues() ) {\n                this.values( index, newVal );\n            } else {\n                this.value( newVal );\n            }\n        },\n\n        _stop: function( event, index ) {\n            this._trigger( \"stop\", event, this._uiHash( index ) );\n        },\n\n        _change: function( event, index ) {\n            if ( !this._keySliding && !this._mouseSliding ) {\n\n                //store the last changed value index for reference when handles overlap\n                this._lastChangedValue = index;\n                this._trigger( \"change\", event, this._uiHash( index ) );\n            }\n        },\n\n        value: function( newValue ) {\n            if ( arguments.length ) {\n                this.options.value = this._trimAlignValue( newValue );\n                this._refreshValue();\n                this._change( null, 0 );\n                return;\n            }\n\n            return this._value();\n        },\n\n        values: function( index, newValue ) {\n            var vals,\n                newValues,\n                i;\n\n            if ( arguments.length > 1 ) {\n                this.options.values[ index ] = this._trimAlignValue( newValue );\n                this._refreshValue();\n                this._change( null, index );\n                return;\n            }\n\n            if ( arguments.length ) {\n                if ( Array.isArray( arguments[ 0 ] ) ) {\n                    vals = this.options.values;\n                    newValues = arguments[ 0 ];\n                    for ( i = 0; i < vals.length; i += 1 ) {\n                        vals[ i ] = this._trimAlignValue( newValues[ i ] );\n                        this._change( null, i );\n                    }\n                    this._refreshValue();\n                } else {\n                    if ( this._hasMultipleValues() ) {\n                        return this._values( index );\n                    } else {\n                        return this.value();\n                    }\n                }\n            } else {\n                return this._values();\n            }\n        },\n\n        _setOption: function( key, value ) {\n            var i,\n                valsLength = 0;\n\n            if ( key === \"range\" && this.options.range === true ) {\n                if ( value === \"min\" ) {\n                    this.options.value = this._values( 0 );\n                    this.options.values = null;\n                } else if ( value === \"max\" ) {\n                    this.options.value = this._values( this.options.values.length - 1 );\n                    this.options.values = null;\n                }\n            }\n\n            if ( Array.isArray( this.options.values ) ) {\n                valsLength = this.options.values.length;\n            }\n\n            this._super( key, value );\n\n            switch ( key ) {\n                case \"orientation\":\n                    this._detectOrientation();\n                    this._removeClass( \"ui-slider-horizontal ui-slider-vertical\" )\n                        ._addClass( \"ui-slider-\" + this.orientation );\n                    this._refreshValue();\n                    if ( this.options.range ) {\n                        this._refreshRange( value );\n                    }\n\n                    // Reset positioning from previous orientation\n                    this.handles.css( value === \"horizontal\" ? \"bottom\" : \"left\", \"\" );\n                    break;\n                case \"value\":\n                    this._animateOff = true;\n                    this._refreshValue();\n                    this._change( null, 0 );\n                    this._animateOff = false;\n                    break;\n                case \"values\":\n                    this._animateOff = true;\n                    this._refreshValue();\n\n                    // Start from the last handle to prevent unreachable handles (#9046)\n                    for ( i = valsLength - 1; i >= 0; i-- ) {\n                        this._change( null, i );\n                    }\n                    this._animateOff = false;\n                    break;\n                case \"step\":\n                case \"min\":\n                case \"max\":\n                    this._animateOff = true;\n                    this._calculateNewMax();\n                    this._refreshValue();\n                    this._animateOff = false;\n                    break;\n                case \"range\":\n                    this._animateOff = true;\n                    this._refresh();\n                    this._animateOff = false;\n                    break;\n            }\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this._toggleClass( null, \"ui-state-disabled\", !!value );\n        },\n\n        //internal value getter\n        // _value() returns value trimmed by min and max, aligned by step\n        _value: function() {\n            var val = this.options.value;\n            val = this._trimAlignValue( val );\n\n            return val;\n        },\n\n        //internal values getter\n        // _values() returns array of values trimmed by min and max, aligned by step\n        // _values( index ) returns single value trimmed by min and max, aligned by step\n        _values: function( index ) {\n            var val,\n                vals,\n                i;\n\n            if ( arguments.length ) {\n                val = this.options.values[ index ];\n                val = this._trimAlignValue( val );\n\n                return val;\n            } else if ( this._hasMultipleValues() ) {\n\n                // .slice() creates a copy of the array\n                // this copy gets trimmed by min and max and then returned\n                vals = this.options.values.slice();\n                for ( i = 0; i < vals.length; i += 1 ) {\n                    vals[ i ] = this._trimAlignValue( vals[ i ] );\n                }\n\n                return vals;\n            } else {\n                return [];\n            }\n        },\n\n        // Returns the step-aligned value that val is closest to, between (inclusive) min and max\n        _trimAlignValue: function( val ) {\n            if ( val <= this._valueMin() ) {\n                return this._valueMin();\n            }\n            if ( val >= this._valueMax() ) {\n                return this._valueMax();\n            }\n            var step = ( this.options.step > 0 ) ? this.options.step : 1,\n                valModStep = ( val - this._valueMin() ) % step,\n                alignValue = val - valModStep;\n\n            if ( Math.abs( valModStep ) * 2 >= step ) {\n                alignValue += ( valModStep > 0 ) ? step : ( -step );\n            }\n\n            // Since JavaScript has problems with large floats, round\n            // the final value to 5 digits after the decimal point (see #4124)\n            return parseFloat( alignValue.toFixed( 5 ) );\n        },\n\n        _calculateNewMax: function() {\n            var max = this.options.max,\n                min = this._valueMin(),\n                step = this.options.step,\n                aboveMin = Math.round( ( max - min ) / step ) * step;\n            max = aboveMin + min;\n            if ( max > this.options.max ) {\n\n                //If max is not divisible by step, rounding off may increase its value\n                max -= step;\n            }\n            this.max = parseFloat( max.toFixed( this._precision() ) );\n        },\n\n        _precision: function() {\n            var precision = this._precisionOf( this.options.step );\n            if ( this.options.min !== null ) {\n                precision = Math.max( precision, this._precisionOf( this.options.min ) );\n            }\n            return precision;\n        },\n\n        _precisionOf: function( num ) {\n            var str = num.toString(),\n                decimal = str.indexOf( \".\" );\n            return decimal === -1 ? 0 : str.length - decimal - 1;\n        },\n\n        _valueMin: function() {\n            return this.options.min;\n        },\n\n        _valueMax: function() {\n            return this.max;\n        },\n\n        _refreshRange: function( orientation ) {\n            if ( orientation === \"vertical\" ) {\n                this.range.css( { \"width\": \"\", \"left\": \"\" } );\n            }\n            if ( orientation === \"horizontal\" ) {\n                this.range.css( { \"height\": \"\", \"bottom\": \"\" } );\n            }\n        },\n\n        _refreshValue: function() {\n            var lastValPercent, valPercent, value, valueMin, valueMax,\n                oRange = this.options.range,\n                o = this.options,\n                that = this,\n                animate = ( !this._animateOff ) ? o.animate : false,\n                _set = {};\n\n            if ( this._hasMultipleValues() ) {\n                this.handles.each( function( i ) {\n                    valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -\n                        that._valueMin() ) * 100;\n                    _set[ that.orientation === \"horizontal\" ? \"left\" : \"bottom\" ] = valPercent + \"%\";\n                    $( this ).stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( _set, o.animate );\n                    if ( that.options.range === true ) {\n                        if ( that.orientation === \"horizontal\" ) {\n                            if ( i === 0 ) {\n                                that.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                                    left: valPercent + \"%\"\n                                }, o.animate );\n                            }\n                            if ( i === 1 ) {\n                                that.range[ animate ? \"animate\" : \"css\" ]( {\n                                    width: ( valPercent - lastValPercent ) + \"%\"\n                                }, {\n                                    queue: false,\n                                    duration: o.animate\n                                } );\n                            }\n                        } else {\n                            if ( i === 0 ) {\n                                that.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                                    bottom: ( valPercent ) + \"%\"\n                                }, o.animate );\n                            }\n                            if ( i === 1 ) {\n                                that.range[ animate ? \"animate\" : \"css\" ]( {\n                                    height: ( valPercent - lastValPercent ) + \"%\"\n                                }, {\n                                    queue: false,\n                                    duration: o.animate\n                                } );\n                            }\n                        }\n                    }\n                    lastValPercent = valPercent;\n                } );\n            } else {\n                value = this.value();\n                valueMin = this._valueMin();\n                valueMax = this._valueMax();\n                valPercent = ( valueMax !== valueMin ) ?\n                    ( value - valueMin ) / ( valueMax - valueMin ) * 100 :\n                    0;\n                _set[ this.orientation === \"horizontal\" ? \"left\" : \"bottom\" ] = valPercent + \"%\";\n                this.handle.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( _set, o.animate );\n\n                if ( oRange === \"min\" && this.orientation === \"horizontal\" ) {\n                    this.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                        width: valPercent + \"%\"\n                    }, o.animate );\n                }\n                if ( oRange === \"max\" && this.orientation === \"horizontal\" ) {\n                    this.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                        width: ( 100 - valPercent ) + \"%\"\n                    }, o.animate );\n                }\n                if ( oRange === \"min\" && this.orientation === \"vertical\" ) {\n                    this.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                        height: valPercent + \"%\"\n                    }, o.animate );\n                }\n                if ( oRange === \"max\" && this.orientation === \"vertical\" ) {\n                    this.range.stop( 1, 1 )[ animate ? \"animate\" : \"css\" ]( {\n                        height: ( 100 - valPercent ) + \"%\"\n                    }, o.animate );\n                }\n            }\n        },\n\n        _handleEvents: {\n            keydown: function( event ) {\n                var allowed, curVal, newVal, step,\n                    index = $( event.target ).data( \"ui-slider-handle-index\" );\n\n                switch ( event.keyCode ) {\n                    case $.ui.keyCode.HOME:\n                    case $.ui.keyCode.END:\n                    case $.ui.keyCode.PAGE_UP:\n                    case $.ui.keyCode.PAGE_DOWN:\n                    case $.ui.keyCode.UP:\n                    case $.ui.keyCode.RIGHT:\n                    case $.ui.keyCode.DOWN:\n                    case $.ui.keyCode.LEFT:\n                        event.preventDefault();\n                        if ( !this._keySliding ) {\n                            this._keySliding = true;\n                            this._addClass( $( event.target ), null, \"ui-state-active\" );\n                            allowed = this._start( event, index );\n                            if ( allowed === false ) {\n                                return;\n                            }\n                        }\n                        break;\n                }\n\n                step = this.options.step;\n                if ( this._hasMultipleValues() ) {\n                    curVal = newVal = this.values( index );\n                } else {\n                    curVal = newVal = this.value();\n                }\n\n                switch ( event.keyCode ) {\n                    case $.ui.keyCode.HOME:\n                        newVal = this._valueMin();\n                        break;\n                    case $.ui.keyCode.END:\n                        newVal = this._valueMax();\n                        break;\n                    case $.ui.keyCode.PAGE_UP:\n                        newVal = this._trimAlignValue(\n                            curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )\n                        );\n                        break;\n                    case $.ui.keyCode.PAGE_DOWN:\n                        newVal = this._trimAlignValue(\n                            curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );\n                        break;\n                    case $.ui.keyCode.UP:\n                    case $.ui.keyCode.RIGHT:\n                        if ( curVal === this._valueMax() ) {\n                            return;\n                        }\n                        newVal = this._trimAlignValue( curVal + step );\n                        break;\n                    case $.ui.keyCode.DOWN:\n                    case $.ui.keyCode.LEFT:\n                        if ( curVal === this._valueMin() ) {\n                            return;\n                        }\n                        newVal = this._trimAlignValue( curVal - step );\n                        break;\n                }\n\n                this._slide( event, index, newVal );\n            },\n            keyup: function( event ) {\n                var index = $( event.target ).data( \"ui-slider-handle-index\" );\n\n                if ( this._keySliding ) {\n                    this._keySliding = false;\n                    this._stop( event, index );\n                    this._change( event, index );\n                    this._removeClass( $( event.target ), null, \"ui-state-active\" );\n                }\n            }\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/autocomplete.js":"/*!\n * jQuery UI Autocomplete 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Autocomplete\n//>>group: Widgets\n//>>description: Lists suggested words as the user is typing.\n//>>docs: http://api.jqueryui.com/autocomplete/\n//>>demos: http://jqueryui.com/autocomplete/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/autocomplete.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./menu\",\n            \"../keycode\",\n            \"../position\",\n            \"../safe-active-element\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.autocomplete\", {\n        version: \"1.13.2\",\n        defaultElement: \"<input>\",\n        options: {\n            appendTo: null,\n            autoFocus: false,\n            delay: 300,\n            minLength: 1,\n            position: {\n                my: \"left top\",\n                at: \"left bottom\",\n                collision: \"none\"\n            },\n            source: null,\n\n            // Callbacks\n            change: null,\n            close: null,\n            focus: null,\n            open: null,\n            response: null,\n            search: null,\n            select: null\n        },\n\n        requestIndex: 0,\n        pending: 0,\n        liveRegionTimer: null,\n\n        _create: function() {\n\n            // Some browsers only repeat keydown events, not keypress events,\n            // so we use the suppressKeyPress flag to determine if we've already\n            // handled the keydown event. #7269\n            // Unfortunately the code for & in keypress is the same as the up arrow,\n            // so we use the suppressKeyPressRepeat flag to avoid handling keypress\n            // events when we know the keydown event was used to modify the\n            // search term. #7799\n            var suppressKeyPress, suppressKeyPressRepeat, suppressInput,\n                nodeName = this.element[ 0 ].nodeName.toLowerCase(),\n                isTextarea = nodeName === \"textarea\",\n                isInput = nodeName === \"input\";\n\n            // Textareas are always multi-line\n            // Inputs are always single-line, even if inside a contentEditable element\n            // IE also treats inputs as contentEditable\n            // All other element types are determined by whether or not they're contentEditable\n            this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );\n\n            this.valueMethod = this.element[ isTextarea || isInput ? \"val\" : \"text\" ];\n            this.isNewMenu = true;\n\n            this._addClass( \"ui-autocomplete-input\" );\n            this.element.attr( \"autocomplete\", \"off\" );\n\n            this._on( this.element, {\n                keydown: function( event ) {\n                    if ( this.element.prop( \"readOnly\" ) ) {\n                        suppressKeyPress = true;\n                        suppressInput = true;\n                        suppressKeyPressRepeat = true;\n                        return;\n                    }\n\n                    suppressKeyPress = false;\n                    suppressInput = false;\n                    suppressKeyPressRepeat = false;\n                    var keyCode = $.ui.keyCode;\n                    switch ( event.keyCode ) {\n                        case keyCode.PAGE_UP:\n                            suppressKeyPress = true;\n                            this._move( \"previousPage\", event );\n                            break;\n                        case keyCode.PAGE_DOWN:\n                            suppressKeyPress = true;\n                            this._move( \"nextPage\", event );\n                            break;\n                        case keyCode.UP:\n                            suppressKeyPress = true;\n                            this._keyEvent( \"previous\", event );\n                            break;\n                        case keyCode.DOWN:\n                            suppressKeyPress = true;\n                            this._keyEvent( \"next\", event );\n                            break;\n                        case keyCode.ENTER:\n\n                            // when menu is open and has focus\n                            if ( this.menu.active ) {\n\n                                // #6055 - Opera still allows the keypress to occur\n                                // which causes forms to submit\n                                suppressKeyPress = true;\n                                event.preventDefault();\n                                this.menu.select( event );\n                            }\n                            break;\n                        case keyCode.TAB:\n                            if ( this.menu.active ) {\n                                this.menu.select( event );\n                            }\n                            break;\n                        case keyCode.ESCAPE:\n                            if ( this.menu.element.is( \":visible\" ) ) {\n                                if ( !this.isMultiLine ) {\n                                    this._value( this.term );\n                                }\n                                this.close( event );\n\n                                // Different browsers have different default behavior for escape\n                                // Single press can mean undo or clear\n                                // Double press in IE means clear the whole form\n                                event.preventDefault();\n                            }\n                            break;\n                        default:\n                            suppressKeyPressRepeat = true;\n\n                            // search timeout should be triggered before the input value is changed\n                            this._searchTimeout( event );\n                            break;\n                    }\n                },\n                keypress: function( event ) {\n                    if ( suppressKeyPress ) {\n                        suppressKeyPress = false;\n                        if ( !this.isMultiLine || this.menu.element.is( \":visible\" ) ) {\n                            event.preventDefault();\n                        }\n                        return;\n                    }\n                    if ( suppressKeyPressRepeat ) {\n                        return;\n                    }\n\n                    // Replicate some key handlers to allow them to repeat in Firefox and Opera\n                    var keyCode = $.ui.keyCode;\n                    switch ( event.keyCode ) {\n                        case keyCode.PAGE_UP:\n                            this._move( \"previousPage\", event );\n                            break;\n                        case keyCode.PAGE_DOWN:\n                            this._move( \"nextPage\", event );\n                            break;\n                        case keyCode.UP:\n                            this._keyEvent( \"previous\", event );\n                            break;\n                        case keyCode.DOWN:\n                            this._keyEvent( \"next\", event );\n                            break;\n                    }\n                },\n                input: function( event ) {\n                    if ( suppressInput ) {\n                        suppressInput = false;\n                        event.preventDefault();\n                        return;\n                    }\n                    this._searchTimeout( event );\n                },\n                focus: function() {\n                    this.selectedItem = null;\n                    this.previous = this._value();\n                },\n                blur: function( event ) {\n                    clearTimeout( this.searching );\n                    this.close( event );\n                    this._change( event );\n                }\n            } );\n\n            this._initSource();\n            this.menu = $( \"<ul>\" )\n                .appendTo( this._appendTo() )\n                .menu( {\n\n                    // disable ARIA support, the live region takes care of that\n                    role: null\n                } )\n                .hide()\n\n                // Support: IE 11 only, Edge <= 14\n                // For other browsers, we preventDefault() on the mousedown event\n                // to keep the dropdown from taking focus from the input. This doesn't\n                // work for IE/Edge, causing problems with selection and scrolling (#9638)\n                // Happily, IE and Edge support an \"unselectable\" attribute that\n                // prevents an element from receiving focus, exactly what we want here.\n                .attr( {\n                    \"unselectable\": \"on\"\n                } )\n                .menu( \"instance\" );\n\n            this._addClass( this.menu.element, \"ui-autocomplete\", \"ui-front\" );\n            this._on( this.menu.element, {\n                mousedown: function( event ) {\n\n                    // Prevent moving focus out of the text field\n                    event.preventDefault();\n                },\n                menufocus: function( event, ui ) {\n                    var label, item;\n\n                    // support: Firefox\n                    // Prevent accidental activation of menu items in Firefox (#7024 #9118)\n                    if ( this.isNewMenu ) {\n                        this.isNewMenu = false;\n                        if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {\n                            this.menu.blur();\n\n                            this.document.one( \"mousemove\", function() {\n                                $( event.target ).trigger( event.originalEvent );\n                            } );\n\n                            return;\n                        }\n                    }\n\n                    item = ui.item.data( \"ui-autocomplete-item\" );\n                    if ( false !== this._trigger( \"focus\", event, { item: item } ) ) {\n\n                        // use value to match what will end up in the input, if it was a key event\n                        if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {\n                            this._value( item.value );\n                        }\n                    }\n\n                    // Announce the value in the liveRegion\n                    label = ui.item.attr( \"aria-label\" ) || item.value;\n                    if ( label && String.prototype.trim.call( label ).length ) {\n                        clearTimeout( this.liveRegionTimer );\n                        this.liveRegionTimer = this._delay( function() {\n                            this.liveRegion.html( $( \"<div>\" ).text( label ) );\n                        }, 100 );\n                    }\n                },\n                menuselect: function( event, ui ) {\n                    var item = ui.item.data( \"ui-autocomplete-item\" ),\n                        previous = this.previous;\n\n                    // Only trigger when focus was lost (click on menu)\n                    if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {\n                        this.element.trigger( \"focus\" );\n                        this.previous = previous;\n\n                        // #6109 - IE triggers two focus events and the second\n                        // is asynchronous, so we need to reset the previous\n                        // term synchronously and asynchronously :-(\n                        this._delay( function() {\n                            this.previous = previous;\n                            this.selectedItem = item;\n                        } );\n                    }\n\n                    if ( false !== this._trigger( \"select\", event, { item: item } ) ) {\n                        this._value( item.value );\n                    }\n\n                    // reset the term after the select event\n                    // this allows custom select handling to work properly\n                    this.term = this._value();\n\n                    this.close( event );\n                    this.selectedItem = item;\n                }\n            } );\n\n            this.liveRegion = $( \"<div>\", {\n                role: \"status\",\n                \"aria-live\": \"assertive\",\n                \"aria-relevant\": \"additions\"\n            } )\n                .appendTo( this.document[ 0 ].body );\n\n            this._addClass( this.liveRegion, null, \"ui-helper-hidden-accessible\" );\n\n            // Turning off autocomplete prevents the browser from remembering the\n            // value when navigating through history, so we re-enable autocomplete\n            // if the page is unloaded before the widget is destroyed. #7790\n            this._on( this.window, {\n                beforeunload: function() {\n                    this.element.removeAttr( \"autocomplete\" );\n                }\n            } );\n        },\n\n        _destroy: function() {\n            clearTimeout( this.searching );\n            this.element.removeAttr( \"autocomplete\" );\n            this.menu.element.remove();\n            this.liveRegion.remove();\n        },\n\n        _setOption: function( key, value ) {\n            this._super( key, value );\n            if ( key === \"source\" ) {\n                this._initSource();\n            }\n            if ( key === \"appendTo\" ) {\n                this.menu.element.appendTo( this._appendTo() );\n            }\n            if ( key === \"disabled\" && value && this.xhr ) {\n                this.xhr.abort();\n            }\n        },\n\n        _isEventTargetInWidget: function( event ) {\n            var menuElement = this.menu.element[ 0 ];\n\n            return event.target === this.element[ 0 ] ||\n                event.target === menuElement ||\n                $.contains( menuElement, event.target );\n        },\n\n        _closeOnClickOutside: function( event ) {\n            if ( !this._isEventTargetInWidget( event ) ) {\n                this.close();\n            }\n        },\n\n        _appendTo: function() {\n            var element = this.options.appendTo;\n\n            if ( element ) {\n                element = element.jquery || element.nodeType ?\n                    $( element ) :\n                    this.document.find( element ).eq( 0 );\n            }\n\n            if ( !element || !element[ 0 ] ) {\n                element = this.element.closest( \".ui-front, dialog\" );\n            }\n\n            if ( !element.length ) {\n                element = this.document[ 0 ].body;\n            }\n\n            return element;\n        },\n\n        _initSource: function() {\n            var array, url,\n                that = this;\n            if ( Array.isArray( this.options.source ) ) {\n                array = this.options.source;\n                this.source = function( request, response ) {\n                    response( $.ui.autocomplete.filter( array, request.term ) );\n                };\n            } else if ( typeof this.options.source === \"string\" ) {\n                url = this.options.source;\n                this.source = function( request, response ) {\n                    if ( that.xhr ) {\n                        that.xhr.abort();\n                    }\n                    that.xhr = $.ajax( {\n                        url: url,\n                        data: request,\n                        dataType: \"json\",\n                        success: function( data ) {\n                            response( data );\n                        },\n                        error: function() {\n                            response( [] );\n                        }\n                    } );\n                };\n            } else {\n                this.source = this.options.source;\n            }\n        },\n\n        _searchTimeout: function( event ) {\n            clearTimeout( this.searching );\n            this.searching = this._delay( function() {\n\n                // Search if the value has changed, or if the user retypes the same value (see #7434)\n                var equalValues = this.term === this._value(),\n                    menuVisible = this.menu.element.is( \":visible\" ),\n                    modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;\n\n                if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {\n                    this.selectedItem = null;\n                    this.search( null, event );\n                }\n            }, this.options.delay );\n        },\n\n        search: function( value, event ) {\n            value = value != null ? value : this._value();\n\n            // Always save the actual value, not the one passed as an argument\n            this.term = this._value();\n\n            if ( value.length < this.options.minLength ) {\n                return this.close( event );\n            }\n\n            if ( this._trigger( \"search\", event ) === false ) {\n                return;\n            }\n\n            return this._search( value );\n        },\n\n        _search: function( value ) {\n            this.pending++;\n            this._addClass( \"ui-autocomplete-loading\" );\n            this.cancelSearch = false;\n\n            this.source( { term: value }, this._response() );\n        },\n\n        _response: function() {\n            var index = ++this.requestIndex;\n\n            return function( content ) {\n                if ( index === this.requestIndex ) {\n                    this.__response( content );\n                }\n\n                this.pending--;\n                if ( !this.pending ) {\n                    this._removeClass( \"ui-autocomplete-loading\" );\n                }\n            }.bind( this );\n        },\n\n        __response: function( content ) {\n            if ( content ) {\n                content = this._normalize( content );\n            }\n            this._trigger( \"response\", null, { content: content } );\n            if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {\n                this._suggest( content );\n                this._trigger( \"open\" );\n            } else {\n\n                // use ._close() instead of .close() so we don't cancel future searches\n                this._close();\n            }\n        },\n\n        close: function( event ) {\n            this.cancelSearch = true;\n            this._close( event );\n        },\n\n        _close: function( event ) {\n\n            // Remove the handler that closes the menu on outside clicks\n            this._off( this.document, \"mousedown\" );\n\n            if ( this.menu.element.is( \":visible\" ) ) {\n                this.menu.element.hide();\n                this.menu.blur();\n                this.isNewMenu = true;\n                this._trigger( \"close\", event );\n            }\n        },\n\n        _change: function( event ) {\n            if ( this.previous !== this._value() ) {\n                this._trigger( \"change\", event, { item: this.selectedItem } );\n            }\n        },\n\n        _normalize: function( items ) {\n\n            // assume all items have the right format when the first item is complete\n            if ( items.length && items[ 0 ].label && items[ 0 ].value ) {\n                return items;\n            }\n            return $.map( items, function( item ) {\n                if ( typeof item === \"string\" ) {\n                    return {\n                        label: item,\n                        value: item\n                    };\n                }\n                return $.extend( {}, item, {\n                    label: item.label || item.value,\n                    value: item.value || item.label\n                } );\n            } );\n        },\n\n        _suggest: function( items ) {\n            var ul = this.menu.element.empty();\n            this._renderMenu( ul, items );\n            this.isNewMenu = true;\n            this.menu.refresh();\n\n            // Size and position menu\n            ul.show();\n            this._resizeMenu();\n            ul.position( $.extend( {\n                of: this.element\n            }, this.options.position ) );\n\n            if ( this.options.autoFocus ) {\n                this.menu.next();\n            }\n\n            // Listen for interactions outside of the widget (#6642)\n            this._on( this.document, {\n                mousedown: \"_closeOnClickOutside\"\n            } );\n        },\n\n        _resizeMenu: function() {\n            var ul = this.menu.element;\n            ul.outerWidth( Math.max(\n\n                // Firefox wraps long text (possibly a rounding bug)\n                // so we add 1px to avoid the wrapping (#7513)\n                ul.width( \"\" ).outerWidth() + 1,\n                this.element.outerWidth()\n            ) );\n        },\n\n        _renderMenu: function( ul, items ) {\n            var that = this;\n            $.each( items, function( index, item ) {\n                that._renderItemData( ul, item );\n            } );\n        },\n\n        _renderItemData: function( ul, item ) {\n            return this._renderItem( ul, item ).data( \"ui-autocomplete-item\", item );\n        },\n\n        _renderItem: function( ul, item ) {\n            return $( \"<li>\" )\n                .append( $( \"<div>\" ).text( item.label ) )\n                .appendTo( ul );\n        },\n\n        _move: function( direction, event ) {\n            if ( !this.menu.element.is( \":visible\" ) ) {\n                this.search( null, event );\n                return;\n            }\n            if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||\n                this.menu.isLastItem() && /^next/.test( direction ) ) {\n\n                if ( !this.isMultiLine ) {\n                    this._value( this.term );\n                }\n\n                this.menu.blur();\n                return;\n            }\n            this.menu[ direction ]( event );\n        },\n\n        widget: function() {\n            return this.menu.element;\n        },\n\n        _value: function() {\n            return this.valueMethod.apply( this.element, arguments );\n        },\n\n        _keyEvent: function( keyEvent, event ) {\n            if ( !this.isMultiLine || this.menu.element.is( \":visible\" ) ) {\n                this._move( keyEvent, event );\n\n                // Prevents moving cursor to beginning/end of the text field in some browsers\n                event.preventDefault();\n            }\n        },\n\n        // Support: Chrome <=50\n        // We should be able to just use this.element.prop( \"isContentEditable\" )\n        // but hidden elements always report false in Chrome.\n        // https://code.google.com/p/chromium/issues/detail?id=313082\n        _isContentEditable: function( element ) {\n            if ( !element.length ) {\n                return false;\n            }\n\n            var editable = element.prop( \"contentEditable\" );\n\n            if ( editable === \"inherit\" ) {\n                return this._isContentEditable( element.parent() );\n            }\n\n            return editable === \"true\";\n        }\n    } );\n\n    $.extend( $.ui.autocomplete, {\n        escapeRegex: function( value ) {\n            return value.replace( /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\" );\n        },\n        filter: function( array, term ) {\n            var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), \"i\" );\n            return $.grep( array, function( value ) {\n                return matcher.test( value.label || value.value || value );\n            } );\n        }\n    } );\n\n// Live region extension, adding a `messages` option\n// NOTE: This is an experimental API. We are still investigating\n// a full solution for string manipulation and internationalization.\n    $.widget( \"ui.autocomplete\", $.ui.autocomplete, {\n        options: {\n            messages: {\n                noResults: \"No search results.\",\n                results: function( amount ) {\n                    return amount + ( amount > 1 ? \" results are\" : \" result is\" ) +\n                        \" available, use up and down arrow keys to navigate.\";\n                }\n            }\n        },\n\n        __response: function( content ) {\n            var message;\n            this._superApply( arguments );\n            if ( this.options.disabled || this.cancelSearch ) {\n                return;\n            }\n            if ( content && content.length ) {\n                message = this.options.messages.results( content.length );\n            } else {\n                message = this.options.messages.noResults;\n            }\n            clearTimeout( this.liveRegionTimer );\n            this.liveRegionTimer = this._delay( function() {\n                this.liveRegion.html( $( \"<div>\" ).text( message ) );\n            }, 100 );\n        }\n    } );\n\n    return $.ui.autocomplete;\n\n} );\n","jquery/ui-modules/widgets/spinner.js":"/*!\n * jQuery UI Spinner 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Spinner\n//>>group: Widgets\n//>>description: Displays buttons to easily input numbers via the keyboard or mouse.\n//>>docs: http://api.jqueryui.com/spinner/\n//>>demos: http://jqueryui.com/spinner/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/spinner.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./button\",\n            \"../version\",\n            \"../keycode\",\n            \"../safe-active-element\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    function spinnerModifier( fn ) {\n        return function() {\n            var previous = this.element.val();\n            fn.apply( this, arguments );\n            this._refresh();\n            if ( previous !== this.element.val() ) {\n                this._trigger( \"change\" );\n            }\n        };\n    }\n\n    $.widget( \"ui.spinner\", {\n        version: \"1.13.2\",\n        defaultElement: \"<input>\",\n        widgetEventPrefix: \"spin\",\n        options: {\n            classes: {\n                \"ui-spinner\": \"ui-corner-all\",\n                \"ui-spinner-down\": \"ui-corner-br\",\n                \"ui-spinner-up\": \"ui-corner-tr\"\n            },\n            culture: null,\n            icons: {\n                down: \"ui-icon-triangle-1-s\",\n                up: \"ui-icon-triangle-1-n\"\n            },\n            incremental: true,\n            max: null,\n            min: null,\n            numberFormat: null,\n            page: 10,\n            step: 1,\n\n            change: null,\n            spin: null,\n            start: null,\n            stop: null\n        },\n\n        _create: function() {\n\n            // handle string values that need to be parsed\n            this._setOption( \"max\", this.options.max );\n            this._setOption( \"min\", this.options.min );\n            this._setOption( \"step\", this.options.step );\n\n            // Only format if there is a value, prevents the field from being marked\n            // as invalid in Firefox, see #9573.\n            if ( this.value() !== \"\" ) {\n\n                // Format the value, but don't constrain.\n                this._value( this.element.val(), true );\n            }\n\n            this._draw();\n            this._on( this._events );\n            this._refresh();\n\n            // Turning off autocomplete prevents the browser from remembering the\n            // value when navigating through history, so we re-enable autocomplete\n            // if the page is unloaded before the widget is destroyed. #7790\n            this._on( this.window, {\n                beforeunload: function() {\n                    this.element.removeAttr( \"autocomplete\" );\n                }\n            } );\n        },\n\n        _getCreateOptions: function() {\n            var options = this._super();\n            var element = this.element;\n\n            $.each( [ \"min\", \"max\", \"step\" ], function( i, option ) {\n                var value = element.attr( option );\n                if ( value != null && value.length ) {\n                    options[ option ] = value;\n                }\n            } );\n\n            return options;\n        },\n\n        _events: {\n            keydown: function( event ) {\n                if ( this._start( event ) && this._keydown( event ) ) {\n                    event.preventDefault();\n                }\n            },\n            keyup: \"_stop\",\n            focus: function() {\n                this.previous = this.element.val();\n            },\n            blur: function( event ) {\n                if ( this.cancelBlur ) {\n                    delete this.cancelBlur;\n                    return;\n                }\n\n                this._stop();\n                this._refresh();\n                if ( this.previous !== this.element.val() ) {\n                    this._trigger( \"change\", event );\n                }\n            },\n            mousewheel: function( event, delta ) {\n                var activeElement = $.ui.safeActiveElement( this.document[ 0 ] );\n                var isActive = this.element[ 0 ] === activeElement;\n\n                if ( !isActive || !delta ) {\n                    return;\n                }\n\n                if ( !this.spinning && !this._start( event ) ) {\n                    return false;\n                }\n\n                this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );\n                clearTimeout( this.mousewheelTimer );\n                this.mousewheelTimer = this._delay( function() {\n                    if ( this.spinning ) {\n                        this._stop( event );\n                    }\n                }, 100 );\n                event.preventDefault();\n            },\n            \"mousedown .ui-spinner-button\": function( event ) {\n                var previous;\n\n                // We never want the buttons to have focus; whenever the user is\n                // interacting with the spinner, the focus should be on the input.\n                // If the input is focused then this.previous is properly set from\n                // when the input first received focus. If the input is not focused\n                // then we need to set this.previous based on the value before spinning.\n                previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?\n                    this.previous : this.element.val();\n                function checkFocus() {\n                    var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );\n                    if ( !isActive ) {\n                        this.element.trigger( \"focus\" );\n                        this.previous = previous;\n\n                        // support: IE\n                        // IE sets focus asynchronously, so we need to check if focus\n                        // moved off of the input because the user clicked on the button.\n                        this._delay( function() {\n                            this.previous = previous;\n                        } );\n                    }\n                }\n\n                // Ensure focus is on (or stays on) the text field\n                event.preventDefault();\n                checkFocus.call( this );\n\n                // Support: IE\n                // IE doesn't prevent moving focus even with event.preventDefault()\n                // so we set a flag to know when we should ignore the blur event\n                // and check (again) if focus moved off of the input.\n                this.cancelBlur = true;\n                this._delay( function() {\n                    delete this.cancelBlur;\n                    checkFocus.call( this );\n                } );\n\n                if ( this._start( event ) === false ) {\n                    return;\n                }\n\n                this._repeat( null, $( event.currentTarget )\n                    .hasClass( \"ui-spinner-up\" ) ? 1 : -1, event );\n            },\n            \"mouseup .ui-spinner-button\": \"_stop\",\n            \"mouseenter .ui-spinner-button\": function( event ) {\n\n                // button will add ui-state-active if mouse was down while mouseleave and kept down\n                if ( !$( event.currentTarget ).hasClass( \"ui-state-active\" ) ) {\n                    return;\n                }\n\n                if ( this._start( event ) === false ) {\n                    return false;\n                }\n                this._repeat( null, $( event.currentTarget )\n                    .hasClass( \"ui-spinner-up\" ) ? 1 : -1, event );\n            },\n\n            // TODO: do we really want to consider this a stop?\n            // shouldn't we just stop the repeater and wait until mouseup before\n            // we trigger the stop event?\n            \"mouseleave .ui-spinner-button\": \"_stop\"\n        },\n\n        // Support mobile enhanced option and make backcompat more sane\n        _enhance: function() {\n            this.uiSpinner = this.element\n                .attr( \"autocomplete\", \"off\" )\n                .wrap( \"<span>\" )\n                .parent()\n\n                // Add buttons\n                .append(\n                    \"<a></a><a></a>\"\n                );\n        },\n\n        _draw: function() {\n            this._enhance();\n\n            this._addClass( this.uiSpinner, \"ui-spinner\", \"ui-widget ui-widget-content\" );\n            this._addClass( \"ui-spinner-input\" );\n\n            this.element.attr( \"role\", \"spinbutton\" );\n\n            // Button bindings\n            this.buttons = this.uiSpinner.children( \"a\" )\n                .attr( \"tabIndex\", -1 )\n                .attr( \"aria-hidden\", true )\n                .button( {\n                    classes: {\n                        \"ui-button\": \"\"\n                    }\n                } );\n\n            // TODO: Right now button does not support classes this is already updated in button PR\n            this._removeClass( this.buttons, \"ui-corner-all\" );\n\n            this._addClass( this.buttons.first(), \"ui-spinner-button ui-spinner-up\" );\n            this._addClass( this.buttons.last(), \"ui-spinner-button ui-spinner-down\" );\n            this.buttons.first().button( {\n                \"icon\": this.options.icons.up,\n                \"showLabel\": false\n            } );\n            this.buttons.last().button( {\n                \"icon\": this.options.icons.down,\n                \"showLabel\": false\n            } );\n\n            // IE 6 doesn't understand height: 50% for the buttons\n            // unless the wrapper has an explicit height\n            if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&\n                this.uiSpinner.height() > 0 ) {\n                this.uiSpinner.height( this.uiSpinner.height() );\n            }\n        },\n\n        _keydown: function( event ) {\n            var options = this.options,\n                keyCode = $.ui.keyCode;\n\n            switch ( event.keyCode ) {\n                case keyCode.UP:\n                    this._repeat( null, 1, event );\n                    return true;\n                case keyCode.DOWN:\n                    this._repeat( null, -1, event );\n                    return true;\n                case keyCode.PAGE_UP:\n                    this._repeat( null, options.page, event );\n                    return true;\n                case keyCode.PAGE_DOWN:\n                    this._repeat( null, -options.page, event );\n                    return true;\n            }\n\n            return false;\n        },\n\n        _start: function( event ) {\n            if ( !this.spinning && this._trigger( \"start\", event ) === false ) {\n                return false;\n            }\n\n            if ( !this.counter ) {\n                this.counter = 1;\n            }\n            this.spinning = true;\n            return true;\n        },\n\n        _repeat: function( i, steps, event ) {\n            i = i || 500;\n\n            clearTimeout( this.timer );\n            this.timer = this._delay( function() {\n                this._repeat( 40, steps, event );\n            }, i );\n\n            this._spin( steps * this.options.step, event );\n        },\n\n        _spin: function( step, event ) {\n            var value = this.value() || 0;\n\n            if ( !this.counter ) {\n                this.counter = 1;\n            }\n\n            value = this._adjustValue( value + step * this._increment( this.counter ) );\n\n            if ( !this.spinning || this._trigger( \"spin\", event, { value: value } ) !== false ) {\n                this._value( value );\n                this.counter++;\n            }\n        },\n\n        _increment: function( i ) {\n            var incremental = this.options.incremental;\n\n            if ( incremental ) {\n                return typeof incremental === \"function\" ?\n                    incremental( i ) :\n                    Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );\n            }\n\n            return 1;\n        },\n\n        _precision: function() {\n            var precision = this._precisionOf( this.options.step );\n            if ( this.options.min !== null ) {\n                precision = Math.max( precision, this._precisionOf( this.options.min ) );\n            }\n            return precision;\n        },\n\n        _precisionOf: function( num ) {\n            var str = num.toString(),\n                decimal = str.indexOf( \".\" );\n            return decimal === -1 ? 0 : str.length - decimal - 1;\n        },\n\n        _adjustValue: function( value ) {\n            var base, aboveMin,\n                options = this.options;\n\n            // Make sure we're at a valid step\n            // - find out where we are relative to the base (min or 0)\n            base = options.min !== null ? options.min : 0;\n            aboveMin = value - base;\n\n            // - round to the nearest step\n            aboveMin = Math.round( aboveMin / options.step ) * options.step;\n\n            // - rounding is based on 0, so adjust back to our base\n            value = base + aboveMin;\n\n            // Fix precision from bad JS floating point math\n            value = parseFloat( value.toFixed( this._precision() ) );\n\n            // Clamp the value\n            if ( options.max !== null && value > options.max ) {\n                return options.max;\n            }\n            if ( options.min !== null && value < options.min ) {\n                return options.min;\n            }\n\n            return value;\n        },\n\n        _stop: function( event ) {\n            if ( !this.spinning ) {\n                return;\n            }\n\n            clearTimeout( this.timer );\n            clearTimeout( this.mousewheelTimer );\n            this.counter = 0;\n            this.spinning = false;\n            this._trigger( \"stop\", event );\n        },\n\n        _setOption: function( key, value ) {\n            var prevValue, first, last;\n\n            if ( key === \"culture\" || key === \"numberFormat\" ) {\n                prevValue = this._parse( this.element.val() );\n                this.options[ key ] = value;\n                this.element.val( this._format( prevValue ) );\n                return;\n            }\n\n            if ( key === \"max\" || key === \"min\" || key === \"step\" ) {\n                if ( typeof value === \"string\" ) {\n                    value = this._parse( value );\n                }\n            }\n            if ( key === \"icons\" ) {\n                first = this.buttons.first().find( \".ui-icon\" );\n                this._removeClass( first, null, this.options.icons.up );\n                this._addClass( first, null, value.up );\n                last = this.buttons.last().find( \".ui-icon\" );\n                this._removeClass( last, null, this.options.icons.down );\n                this._addClass( last, null, value.down );\n            }\n\n            this._super( key, value );\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this._toggleClass( this.uiSpinner, null, \"ui-state-disabled\", !!value );\n            this.element.prop( \"disabled\", !!value );\n            this.buttons.button( value ? \"disable\" : \"enable\" );\n        },\n\n        _setOptions: spinnerModifier( function( options ) {\n            this._super( options );\n        } ),\n\n        _parse: function( val ) {\n            if ( typeof val === \"string\" && val !== \"\" ) {\n                val = window.Globalize && this.options.numberFormat ?\n                    Globalize.parseFloat( val, 10, this.options.culture ) : +val;\n            }\n            return val === \"\" || isNaN( val ) ? null : val;\n        },\n\n        _format: function( value ) {\n            if ( value === \"\" ) {\n                return \"\";\n            }\n            return window.Globalize && this.options.numberFormat ?\n                Globalize.format( value, this.options.numberFormat, this.options.culture ) :\n                value;\n        },\n\n        _refresh: function() {\n            this.element.attr( {\n                \"aria-valuemin\": this.options.min,\n                \"aria-valuemax\": this.options.max,\n\n                // TODO: what should we do with values that can't be parsed?\n                \"aria-valuenow\": this._parse( this.element.val() )\n            } );\n        },\n\n        isValid: function() {\n            var value = this.value();\n\n            // Null is invalid\n            if ( value === null ) {\n                return false;\n            }\n\n            // If value gets adjusted, it's invalid\n            return value === this._adjustValue( value );\n        },\n\n        // Update the value without triggering change\n        _value: function( value, allowAny ) {\n            var parsed;\n            if ( value !== \"\" ) {\n                parsed = this._parse( value );\n                if ( parsed !== null ) {\n                    if ( !allowAny ) {\n                        parsed = this._adjustValue( parsed );\n                    }\n                    value = this._format( parsed );\n                }\n            }\n            this.element.val( value );\n            this._refresh();\n        },\n\n        _destroy: function() {\n            this.element\n                .prop( \"disabled\", false )\n                .removeAttr( \"autocomplete role aria-valuemin aria-valuemax aria-valuenow\" );\n\n            this.uiSpinner.replaceWith( this.element );\n        },\n\n        stepUp: spinnerModifier( function( steps ) {\n            this._stepUp( steps );\n        } ),\n        _stepUp: function( steps ) {\n            if ( this._start() ) {\n                this._spin( ( steps || 1 ) * this.options.step );\n                this._stop();\n            }\n        },\n\n        stepDown: spinnerModifier( function( steps ) {\n            this._stepDown( steps );\n        } ),\n        _stepDown: function( steps ) {\n            if ( this._start() ) {\n                this._spin( ( steps || 1 ) * -this.options.step );\n                this._stop();\n            }\n        },\n\n        pageUp: spinnerModifier( function( pages ) {\n            this._stepUp( ( pages || 1 ) * this.options.page );\n        } ),\n\n        pageDown: spinnerModifier( function( pages ) {\n            this._stepDown( ( pages || 1 ) * this.options.page );\n        } ),\n\n        value: function( newVal ) {\n            if ( !arguments.length ) {\n                return this._parse( this.element.val() );\n            }\n            spinnerModifier( this._value ).call( this, newVal );\n        },\n\n        widget: function() {\n            return this.uiSpinner;\n        }\n    } );\n\n// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for spinner html extension points\n        $.widget( \"ui.spinner\", $.ui.spinner, {\n            _enhance: function() {\n                this.uiSpinner = this.element\n                    .attr( \"autocomplete\", \"off\" )\n                    .wrap( this._uiSpinnerHtml() )\n                    .parent()\n\n                    // Add buttons\n                    .append( this._buttonHtml() );\n            },\n            _uiSpinnerHtml: function() {\n                return \"<span>\";\n            },\n\n            _buttonHtml: function() {\n                return \"<a></a><a></a>\";\n            }\n        } );\n    }\n\n    return $.ui.spinner;\n\n} );\n","jquery/ui-modules/widgets/selectmenu.js":"/*!\n * jQuery UI Selectmenu 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Selectmenu\n//>>group: Widgets\n/* eslint-disable max-len */\n//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.\n/* eslint-enable max-len */\n//>>docs: http://api.jqueryui.com/selectmenu/\n//>>demos: http://jqueryui.com/selectmenu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./menu\",\n            \"../form-reset-mixin\",\n            \"../keycode\",\n            \"../labels\",\n            \"../position\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.selectmenu\", [ $.ui.formResetMixin, {\n        version: \"1.13.2\",\n        defaultElement: \"<select>\",\n        options: {\n            appendTo: null,\n            classes: {\n                \"ui-selectmenu-button-open\": \"ui-corner-top\",\n                \"ui-selectmenu-button-closed\": \"ui-corner-all\"\n            },\n            disabled: null,\n            icons: {\n                button: \"ui-icon-triangle-1-s\"\n            },\n            position: {\n                my: \"left top\",\n                at: \"left bottom\",\n                collision: \"none\"\n            },\n            width: false,\n\n            // Callbacks\n            change: null,\n            close: null,\n            focus: null,\n            open: null,\n            select: null\n        },\n\n        _create: function() {\n            var selectmenuId = this.element.uniqueId().attr( \"id\" );\n            this.ids = {\n                element: selectmenuId,\n                button: selectmenuId + \"-button\",\n                menu: selectmenuId + \"-menu\"\n            };\n\n            this._drawButton();\n            this._drawMenu();\n            this._bindFormResetHandler();\n\n            this._rendered = false;\n            this.menuItems = $();\n        },\n\n        _drawButton: function() {\n            var icon,\n                that = this,\n                item = this._parseOption(\n                    this.element.find( \"option:selected\" ),\n                    this.element[ 0 ].selectedIndex\n                );\n\n            // Associate existing label with the new button\n            this.labels = this.element.labels().attr( \"for\", this.ids.button );\n            this._on( this.labels, {\n                click: function( event ) {\n                    this.button.trigger( \"focus\" );\n                    event.preventDefault();\n                }\n            } );\n\n            // Hide original select element\n            this.element.hide();\n\n            // Create button\n            this.button = $( \"<span>\", {\n                tabindex: this.options.disabled ? -1 : 0,\n                id: this.ids.button,\n                role: \"combobox\",\n                \"aria-expanded\": \"false\",\n                \"aria-autocomplete\": \"list\",\n                \"aria-owns\": this.ids.menu,\n                \"aria-haspopup\": \"true\",\n                title: this.element.attr( \"title\" )\n            } )\n                .insertAfter( this.element );\n\n            this._addClass( this.button, \"ui-selectmenu-button ui-selectmenu-button-closed\",\n                \"ui-button ui-widget\" );\n\n            icon = $( \"<span>\" ).appendTo( this.button );\n            this._addClass( icon, \"ui-selectmenu-icon\", \"ui-icon \" + this.options.icons.button );\n            this.buttonItem = this._renderButtonItem( item )\n                .appendTo( this.button );\n\n            if ( this.options.width !== false ) {\n                this._resizeButton();\n            }\n\n            this._on( this.button, this._buttonEvents );\n            this.button.one( \"focusin\", function() {\n\n                // Delay rendering the menu items until the button receives focus.\n                // The menu may have already been rendered via a programmatic open.\n                if ( !that._rendered ) {\n                    that._refreshMenu();\n                }\n            } );\n        },\n\n        _drawMenu: function() {\n            var that = this;\n\n            // Create menu\n            this.menu = $( \"<ul>\", {\n                \"aria-hidden\": \"true\",\n                \"aria-labelledby\": this.ids.button,\n                id: this.ids.menu\n            } );\n\n            // Wrap menu\n            this.menuWrap = $( \"<div>\" ).append( this.menu );\n            this._addClass( this.menuWrap, \"ui-selectmenu-menu\", \"ui-front\" );\n            this.menuWrap.appendTo( this._appendTo() );\n\n            // Initialize menu widget\n            this.menuInstance = this.menu\n                .menu( {\n                    classes: {\n                        \"ui-menu\": \"ui-corner-bottom\"\n                    },\n                    role: \"listbox\",\n                    select: function( event, ui ) {\n                        event.preventDefault();\n\n                        // Support: IE8\n                        // If the item was selected via a click, the text selection\n                        // will be destroyed in IE\n                        that._setSelection();\n\n                        that._select( ui.item.data( \"ui-selectmenu-item\" ), event );\n                    },\n                    focus: function( event, ui ) {\n                        var item = ui.item.data( \"ui-selectmenu-item\" );\n\n                        // Prevent inital focus from firing and check if its a newly focused item\n                        if ( that.focusIndex != null && item.index !== that.focusIndex ) {\n                            that._trigger( \"focus\", event, { item: item } );\n                            if ( !that.isOpen ) {\n                                that._select( item, event );\n                            }\n                        }\n                        that.focusIndex = item.index;\n\n                        that.button.attr( \"aria-activedescendant\",\n                            that.menuItems.eq( item.index ).attr( \"id\" ) );\n                    }\n                } )\n                .menu( \"instance\" );\n\n            // Don't close the menu on mouseleave\n            this.menuInstance._off( this.menu, \"mouseleave\" );\n\n            // Cancel the menu's collapseAll on document click\n            this.menuInstance._closeOnDocumentClick = function() {\n                return false;\n            };\n\n            // Selects often contain empty items, but never contain dividers\n            this.menuInstance._isDivider = function() {\n                return false;\n            };\n        },\n\n        refresh: function() {\n            this._refreshMenu();\n            this.buttonItem.replaceWith(\n                this.buttonItem = this._renderButtonItem(\n\n                    // Fall back to an empty object in case there are no options\n                    this._getSelectedItem().data( \"ui-selectmenu-item\" ) || {}\n                )\n            );\n            if ( this.options.width === null ) {\n                this._resizeButton();\n            }\n        },\n\n        _refreshMenu: function() {\n            var item,\n                options = this.element.find( \"option\" );\n\n            this.menu.empty();\n\n            this._parseOptions( options );\n            this._renderMenu( this.menu, this.items );\n\n            this.menuInstance.refresh();\n            this.menuItems = this.menu.find( \"li\" )\n                .not( \".ui-selectmenu-optgroup\" )\n                .find( \".ui-menu-item-wrapper\" );\n\n            this._rendered = true;\n\n            if ( !options.length ) {\n                return;\n            }\n\n            item = this._getSelectedItem();\n\n            // Update the menu to have the correct item focused\n            this.menuInstance.focus( null, item );\n            this._setAria( item.data( \"ui-selectmenu-item\" ) );\n\n            // Set disabled state\n            this._setOption( \"disabled\", this.element.prop( \"disabled\" ) );\n        },\n\n        open: function( event ) {\n            if ( this.options.disabled ) {\n                return;\n            }\n\n            // If this is the first time the menu is being opened, render the items\n            if ( !this._rendered ) {\n                this._refreshMenu();\n            } else {\n\n                // Menu clears focus on close, reset focus to selected item\n                this._removeClass( this.menu.find( \".ui-state-active\" ), null, \"ui-state-active\" );\n                this.menuInstance.focus( null, this._getSelectedItem() );\n            }\n\n            // If there are no options, don't open the menu\n            if ( !this.menuItems.length ) {\n                return;\n            }\n\n            this.isOpen = true;\n            this._toggleAttr();\n            this._resizeMenu();\n            this._position();\n\n            this._on( this.document, this._documentClick );\n\n            this._trigger( \"open\", event );\n        },\n\n        _position: function() {\n            this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );\n        },\n\n        close: function( event ) {\n            if ( !this.isOpen ) {\n                return;\n            }\n\n            this.isOpen = false;\n            this._toggleAttr();\n\n            this.range = null;\n            this._off( this.document );\n\n            this._trigger( \"close\", event );\n        },\n\n        widget: function() {\n            return this.button;\n        },\n\n        menuWidget: function() {\n            return this.menu;\n        },\n\n        _renderButtonItem: function( item ) {\n            var buttonItem = $( \"<span>\" );\n\n            this._setText( buttonItem, item.label );\n            this._addClass( buttonItem, \"ui-selectmenu-text\" );\n\n            return buttonItem;\n        },\n\n        _renderMenu: function( ul, items ) {\n            var that = this,\n                currentOptgroup = \"\";\n\n            $.each( items, function( index, item ) {\n                var li;\n\n                if ( item.optgroup !== currentOptgroup ) {\n                    li = $( \"<li>\", {\n                        text: item.optgroup\n                    } );\n                    that._addClass( li, \"ui-selectmenu-optgroup\", \"ui-menu-divider\" +\n                        ( item.element.parent( \"optgroup\" ).prop( \"disabled\" ) ?\n                            \" ui-state-disabled\" :\n                            \"\" ) );\n\n                    li.appendTo( ul );\n\n                    currentOptgroup = item.optgroup;\n                }\n\n                that._renderItemData( ul, item );\n            } );\n        },\n\n        _renderItemData: function( ul, item ) {\n            return this._renderItem( ul, item ).data( \"ui-selectmenu-item\", item );\n        },\n\n        _renderItem: function( ul, item ) {\n            var li = $( \"<li>\" ),\n                wrapper = $( \"<div>\", {\n                    title: item.element.attr( \"title\" )\n                } );\n\n            if ( item.disabled ) {\n                this._addClass( li, null, \"ui-state-disabled\" );\n            }\n            this._setText( wrapper, item.label );\n\n            return li.append( wrapper ).appendTo( ul );\n        },\n\n        _setText: function( element, value ) {\n            if ( value ) {\n                element.text( value );\n            } else {\n                element.html( \"&#160;\" );\n            }\n        },\n\n        _move: function( direction, event ) {\n            var item, next,\n                filter = \".ui-menu-item\";\n\n            if ( this.isOpen ) {\n                item = this.menuItems.eq( this.focusIndex ).parent( \"li\" );\n            } else {\n                item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( \"li\" );\n                filter += \":not(.ui-state-disabled)\";\n            }\n\n            if ( direction === \"first\" || direction === \"last\" ) {\n                next = item[ direction === \"first\" ? \"prevAll\" : \"nextAll\" ]( filter ).eq( -1 );\n            } else {\n                next = item[ direction + \"All\" ]( filter ).eq( 0 );\n            }\n\n            if ( next.length ) {\n                this.menuInstance.focus( event, next );\n            }\n        },\n\n        _getSelectedItem: function() {\n            return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( \"li\" );\n        },\n\n        _toggle: function( event ) {\n            this[ this.isOpen ? \"close\" : \"open\" ]( event );\n        },\n\n        _setSelection: function() {\n            var selection;\n\n            if ( !this.range ) {\n                return;\n            }\n\n            if ( window.getSelection ) {\n                selection = window.getSelection();\n                selection.removeAllRanges();\n                selection.addRange( this.range );\n\n                // Support: IE8\n            } else {\n                this.range.select();\n            }\n\n            // Support: IE\n            // Setting the text selection kills the button focus in IE, but\n            // restoring the focus doesn't kill the selection.\n            this.button.trigger( \"focus\" );\n        },\n\n        _documentClick: {\n            mousedown: function( event ) {\n                if ( !this.isOpen ) {\n                    return;\n                }\n\n                if ( !$( event.target ).closest( \".ui-selectmenu-menu, #\" +\n                    $.escapeSelector( this.ids.button ) ).length ) {\n                    this.close( event );\n                }\n            }\n        },\n\n        _buttonEvents: {\n\n            // Prevent text selection from being reset when interacting with the selectmenu (#10144)\n            mousedown: function() {\n                var selection;\n\n                if ( window.getSelection ) {\n                    selection = window.getSelection();\n                    if ( selection.rangeCount ) {\n                        this.range = selection.getRangeAt( 0 );\n                    }\n\n                    // Support: IE8\n                } else {\n                    this.range = document.selection.createRange();\n                }\n            },\n\n            click: function( event ) {\n                this._setSelection();\n                this._toggle( event );\n            },\n\n            keydown: function( event ) {\n                var preventDefault = true;\n                switch ( event.keyCode ) {\n                    case $.ui.keyCode.TAB:\n                    case $.ui.keyCode.ESCAPE:\n                        this.close( event );\n                        preventDefault = false;\n                        break;\n                    case $.ui.keyCode.ENTER:\n                        if ( this.isOpen ) {\n                            this._selectFocusedItem( event );\n                        }\n                        break;\n                    case $.ui.keyCode.UP:\n                        if ( event.altKey ) {\n                            this._toggle( event );\n                        } else {\n                            this._move( \"prev\", event );\n                        }\n                        break;\n                    case $.ui.keyCode.DOWN:\n                        if ( event.altKey ) {\n                            this._toggle( event );\n                        } else {\n                            this._move( \"next\", event );\n                        }\n                        break;\n                    case $.ui.keyCode.SPACE:\n                        if ( this.isOpen ) {\n                            this._selectFocusedItem( event );\n                        } else {\n                            this._toggle( event );\n                        }\n                        break;\n                    case $.ui.keyCode.LEFT:\n                        this._move( \"prev\", event );\n                        break;\n                    case $.ui.keyCode.RIGHT:\n                        this._move( \"next\", event );\n                        break;\n                    case $.ui.keyCode.HOME:\n                    case $.ui.keyCode.PAGE_UP:\n                        this._move( \"first\", event );\n                        break;\n                    case $.ui.keyCode.END:\n                    case $.ui.keyCode.PAGE_DOWN:\n                        this._move( \"last\", event );\n                        break;\n                    default:\n                        this.menu.trigger( event );\n                        preventDefault = false;\n                }\n\n                if ( preventDefault ) {\n                    event.preventDefault();\n                }\n            }\n        },\n\n        _selectFocusedItem: function( event ) {\n            var item = this.menuItems.eq( this.focusIndex ).parent( \"li\" );\n            if ( !item.hasClass( \"ui-state-disabled\" ) ) {\n                this._select( item.data( \"ui-selectmenu-item\" ), event );\n            }\n        },\n\n        _select: function( item, event ) {\n            var oldIndex = this.element[ 0 ].selectedIndex;\n\n            // Change native select element\n            this.element[ 0 ].selectedIndex = item.index;\n            this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );\n            this._setAria( item );\n            this._trigger( \"select\", event, { item: item } );\n\n            if ( item.index !== oldIndex ) {\n                this._trigger( \"change\", event, { item: item } );\n            }\n\n            this.close( event );\n        },\n\n        _setAria: function( item ) {\n            var id = this.menuItems.eq( item.index ).attr( \"id\" );\n\n            this.button.attr( {\n                \"aria-labelledby\": id,\n                \"aria-activedescendant\": id\n            } );\n            this.menu.attr( \"aria-activedescendant\", id );\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"icons\" ) {\n                var icon = this.button.find( \"span.ui-icon\" );\n                this._removeClass( icon, null, this.options.icons.button )\n                    ._addClass( icon, null, value.button );\n            }\n\n            this._super( key, value );\n\n            if ( key === \"appendTo\" ) {\n                this.menuWrap.appendTo( this._appendTo() );\n            }\n\n            if ( key === \"width\" ) {\n                this._resizeButton();\n            }\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this.menuInstance.option( \"disabled\", value );\n            this.button.attr( \"aria-disabled\", value );\n            this._toggleClass( this.button, null, \"ui-state-disabled\", value );\n\n            this.element.prop( \"disabled\", value );\n            if ( value ) {\n                this.button.attr( \"tabindex\", -1 );\n                this.close();\n            } else {\n                this.button.attr( \"tabindex\", 0 );\n            }\n        },\n\n        _appendTo: function() {\n            var element = this.options.appendTo;\n\n            if ( element ) {\n                element = element.jquery || element.nodeType ?\n                    $( element ) :\n                    this.document.find( element ).eq( 0 );\n            }\n\n            if ( !element || !element[ 0 ] ) {\n                element = this.element.closest( \".ui-front, dialog\" );\n            }\n\n            if ( !element.length ) {\n                element = this.document[ 0 ].body;\n            }\n\n            return element;\n        },\n\n        _toggleAttr: function() {\n            this.button.attr( \"aria-expanded\", this.isOpen );\n\n            // We can't use two _toggleClass() calls here, because we need to make sure\n            // we always remove classes first and add them second, otherwise if both classes have the\n            // same theme class, it will be removed after we add it.\n            this._removeClass( this.button, \"ui-selectmenu-button-\" +\n                ( this.isOpen ? \"closed\" : \"open\" ) )\n                ._addClass( this.button, \"ui-selectmenu-button-\" +\n                    ( this.isOpen ? \"open\" : \"closed\" ) )\n                ._toggleClass( this.menuWrap, \"ui-selectmenu-open\", null, this.isOpen );\n\n            this.menu.attr( \"aria-hidden\", !this.isOpen );\n        },\n\n        _resizeButton: function() {\n            var width = this.options.width;\n\n            // For `width: false`, just remove inline style and stop\n            if ( width === false ) {\n                this.button.css( \"width\", \"\" );\n                return;\n            }\n\n            // For `width: null`, match the width of the original element\n            if ( width === null ) {\n                width = this.element.show().outerWidth();\n                this.element.hide();\n            }\n\n            this.button.outerWidth( width );\n        },\n\n        _resizeMenu: function() {\n            this.menu.outerWidth( Math.max(\n                this.button.outerWidth(),\n\n                // Support: IE10\n                // IE10 wraps long text (possibly a rounding bug)\n                // so we add 1px to avoid the wrapping\n                this.menu.width( \"\" ).outerWidth() + 1\n            ) );\n        },\n\n        _getCreateOptions: function() {\n            var options = this._super();\n\n            options.disabled = this.element.prop( \"disabled\" );\n\n            return options;\n        },\n\n        _parseOptions: function( options ) {\n            var that = this,\n                data = [];\n            options.each( function( index, item ) {\n                if ( item.hidden ) {\n                    return;\n                }\n\n                data.push( that._parseOption( $( item ), index ) );\n            } );\n            this.items = data;\n        },\n\n        _parseOption: function( option, index ) {\n            var optgroup = option.parent( \"optgroup\" );\n\n            return {\n                element: option,\n                index: index,\n                value: option.val(),\n                label: option.text(),\n                optgroup: optgroup.attr( \"label\" ) || \"\",\n                disabled: optgroup.prop( \"disabled\" ) || option.prop( \"disabled\" )\n            };\n        },\n\n        _destroy: function() {\n            this._unbindFormResetHandler();\n            this.menuWrap.remove();\n            this.button.remove();\n            this.element.show();\n            this.element.removeUniqueId();\n            this.labels.attr( \"for\", this.ids.element );\n        }\n    } ] );\n\n} );\n","jquery/ui-modules/widgets/tooltip.js":"/*!\n * jQuery UI Tooltip 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Tooltip\n//>>group: Widgets\n//>>description: Shows additional information for any element on hover or focus.\n//>>docs: http://api.jqueryui.com/tooltip/\n//>>demos: http://jqueryui.com/tooltip/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/tooltip.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../keycode\",\n            \"../position\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.tooltip\", {\n        version: \"1.13.2\",\n        options: {\n            classes: {\n                \"ui-tooltip\": \"ui-corner-all ui-widget-shadow\"\n            },\n            content: function() {\n                var title = $( this ).attr( \"title\" );\n\n                // Escape title, since we're going from an attribute to raw HTML\n                return $( \"<a>\" ).text( title ).html();\n            },\n            hide: true,\n\n            // Disabled elements have inconsistent behavior across browsers (#8661)\n            items: \"[title]:not([disabled])\",\n            position: {\n                my: \"left top+15\",\n                at: \"left bottom\",\n                collision: \"flipfit flip\"\n            },\n            show: true,\n            track: false,\n\n            // Callbacks\n            close: null,\n            open: null\n        },\n\n        _addDescribedBy: function( elem, id ) {\n            var describedby = ( elem.attr( \"aria-describedby\" ) || \"\" ).split( /\\s+/ );\n            describedby.push( id );\n            elem\n                .data( \"ui-tooltip-id\", id )\n                .attr( \"aria-describedby\", String.prototype.trim.call( describedby.join( \" \" ) ) );\n        },\n\n        _removeDescribedBy: function( elem ) {\n            var id = elem.data( \"ui-tooltip-id\" ),\n                describedby = ( elem.attr( \"aria-describedby\" ) || \"\" ).split( /\\s+/ ),\n                index = $.inArray( id, describedby );\n\n            if ( index !== -1 ) {\n                describedby.splice( index, 1 );\n            }\n\n            elem.removeData( \"ui-tooltip-id\" );\n            describedby = String.prototype.trim.call( describedby.join( \" \" ) );\n            if ( describedby ) {\n                elem.attr( \"aria-describedby\", describedby );\n            } else {\n                elem.removeAttr( \"aria-describedby\" );\n            }\n        },\n\n        _create: function() {\n            this._on( {\n                mouseover: \"open\",\n                focusin: \"open\"\n            } );\n\n            // IDs of generated tooltips, needed for destroy\n            this.tooltips = {};\n\n            // IDs of parent tooltips where we removed the title attribute\n            this.parents = {};\n\n            // Append the aria-live region so tooltips announce correctly\n            this.liveRegion = $( \"<div>\" )\n                .attr( {\n                    role: \"log\",\n                    \"aria-live\": \"assertive\",\n                    \"aria-relevant\": \"additions\"\n                } )\n                .appendTo( this.document[ 0 ].body );\n            this._addClass( this.liveRegion, null, \"ui-helper-hidden-accessible\" );\n\n            this.disabledTitles = $( [] );\n        },\n\n        _setOption: function( key, value ) {\n            var that = this;\n\n            this._super( key, value );\n\n            if ( key === \"content\" ) {\n                $.each( this.tooltips, function( id, tooltipData ) {\n                    that._updateContent( tooltipData.element );\n                } );\n            }\n        },\n\n        _setOptionDisabled: function( value ) {\n            this[ value ? \"_disable\" : \"_enable\" ]();\n        },\n\n        _disable: function() {\n            var that = this;\n\n            // Close open tooltips\n            $.each( this.tooltips, function( id, tooltipData ) {\n                var event = $.Event( \"blur\" );\n                event.target = event.currentTarget = tooltipData.element[ 0 ];\n                that.close( event, true );\n            } );\n\n            // Remove title attributes to prevent native tooltips\n            this.disabledTitles = this.disabledTitles.add(\n                this.element.find( this.options.items ).addBack()\n                    .filter( function() {\n                        var element = $( this );\n                        if ( element.is( \"[title]\" ) ) {\n                            return element\n                                .data( \"ui-tooltip-title\", element.attr( \"title\" ) )\n                                .removeAttr( \"title\" );\n                        }\n                    } )\n            );\n        },\n\n        _enable: function() {\n\n            // restore title attributes\n            this.disabledTitles.each( function() {\n                var element = $( this );\n                if ( element.data( \"ui-tooltip-title\" ) ) {\n                    element.attr( \"title\", element.data( \"ui-tooltip-title\" ) );\n                }\n            } );\n            this.disabledTitles = $( [] );\n        },\n\n        open: function( event ) {\n            var that = this,\n                target = $( event ? event.target : this.element )\n\n                    // we need closest here due to mouseover bubbling,\n                    // but always pointing at the same event target\n                    .closest( this.options.items );\n\n            // No element to show a tooltip for or the tooltip is already open\n            if ( !target.length || target.data( \"ui-tooltip-id\" ) ) {\n                return;\n            }\n\n            if ( target.attr( \"title\" ) ) {\n                target.data( \"ui-tooltip-title\", target.attr( \"title\" ) );\n            }\n\n            target.data( \"ui-tooltip-open\", true );\n\n            // Kill parent tooltips, custom or native, for hover\n            if ( event && event.type === \"mouseover\" ) {\n                target.parents().each( function() {\n                    var parent = $( this ),\n                        blurEvent;\n                    if ( parent.data( \"ui-tooltip-open\" ) ) {\n                        blurEvent = $.Event( \"blur\" );\n                        blurEvent.target = blurEvent.currentTarget = this;\n                        that.close( blurEvent, true );\n                    }\n                    if ( parent.attr( \"title\" ) ) {\n                        parent.uniqueId();\n                        that.parents[ this.id ] = {\n                            element: this,\n                            title: parent.attr( \"title\" )\n                        };\n                        parent.attr( \"title\", \"\" );\n                    }\n                } );\n            }\n\n            this._registerCloseHandlers( event, target );\n            this._updateContent( target, event );\n        },\n\n        _updateContent: function( target, event ) {\n            var content,\n                contentOption = this.options.content,\n                that = this,\n                eventType = event ? event.type : null;\n\n            if ( typeof contentOption === \"string\" || contentOption.nodeType ||\n                contentOption.jquery ) {\n                return this._open( event, target, contentOption );\n            }\n\n            content = contentOption.call( target[ 0 ], function( response ) {\n\n                // IE may instantly serve a cached response for ajax requests\n                // delay this call to _open so the other call to _open runs first\n                that._delay( function() {\n\n                    // Ignore async response if tooltip was closed already\n                    if ( !target.data( \"ui-tooltip-open\" ) ) {\n                        return;\n                    }\n\n                    // JQuery creates a special event for focusin when it doesn't\n                    // exist natively. To improve performance, the native event\n                    // object is reused and the type is changed. Therefore, we can't\n                    // rely on the type being correct after the event finished\n                    // bubbling, so we set it back to the previous value. (#8740)\n                    if ( event ) {\n                        event.type = eventType;\n                    }\n                    this._open( event, target, response );\n                } );\n            } );\n            if ( content ) {\n                this._open( event, target, content );\n            }\n        },\n\n        _open: function( event, target, content ) {\n            var tooltipData, tooltip, delayedShow, a11yContent,\n                positionOption = $.extend( {}, this.options.position );\n\n            if ( !content ) {\n                return;\n            }\n\n            // Content can be updated multiple times. If the tooltip already\n            // exists, then just update the content and bail.\n            tooltipData = this._find( target );\n            if ( tooltipData ) {\n                tooltipData.tooltip.find( \".ui-tooltip-content\" ).html( content );\n                return;\n            }\n\n            // If we have a title, clear it to prevent the native tooltip\n            // we have to check first to avoid defining a title if none exists\n            // (we don't want to cause an element to start matching [title])\n            //\n            // We use removeAttr only for key events, to allow IE to export the correct\n            // accessible attributes. For mouse events, set to empty string to avoid\n            // native tooltip showing up (happens only when removing inside mouseover).\n            if ( target.is( \"[title]\" ) ) {\n                if ( event && event.type === \"mouseover\" ) {\n                    target.attr( \"title\", \"\" );\n                } else {\n                    target.removeAttr( \"title\" );\n                }\n            }\n\n            tooltipData = this._tooltip( target );\n            tooltip = tooltipData.tooltip;\n            this._addDescribedBy( target, tooltip.attr( \"id\" ) );\n            tooltip.find( \".ui-tooltip-content\" ).html( content );\n\n            // Support: Voiceover on OS X, JAWS on IE <= 9\n            // JAWS announces deletions even when aria-relevant=\"additions\"\n            // Voiceover will sometimes re-read the entire log region's contents from the beginning\n            this.liveRegion.children().hide();\n            a11yContent = $( \"<div>\" ).html( tooltip.find( \".ui-tooltip-content\" ).html() );\n            a11yContent.removeAttr( \"name\" ).find( \"[name]\" ).removeAttr( \"name\" );\n            a11yContent.removeAttr( \"id\" ).find( \"[id]\" ).removeAttr( \"id\" );\n            a11yContent.appendTo( this.liveRegion );\n\n            function position( event ) {\n                positionOption.of = event;\n                if ( tooltip.is( \":hidden\" ) ) {\n                    return;\n                }\n                tooltip.position( positionOption );\n            }\n            if ( this.options.track && event && /^mouse/.test( event.type ) ) {\n                this._on( this.document, {\n                    mousemove: position\n                } );\n\n                // trigger once to override element-relative positioning\n                position( event );\n            } else {\n                tooltip.position( $.extend( {\n                    of: target\n                }, this.options.position ) );\n            }\n\n            tooltip.hide();\n\n            this._show( tooltip, this.options.show );\n\n            // Handle tracking tooltips that are shown with a delay (#8644). As soon\n            // as the tooltip is visible, position the tooltip using the most recent\n            // event.\n            // Adds the check to add the timers only when both delay and track options are set (#14682)\n            if ( this.options.track && this.options.show && this.options.show.delay ) {\n                delayedShow = this.delayedShow = setInterval( function() {\n                    if ( tooltip.is( \":visible\" ) ) {\n                        position( positionOption.of );\n                        clearInterval( delayedShow );\n                    }\n                }, 13 );\n            }\n\n            this._trigger( \"open\", event, { tooltip: tooltip } );\n        },\n\n        _registerCloseHandlers: function( event, target ) {\n            var events = {\n                keyup: function( event ) {\n                    if ( event.keyCode === $.ui.keyCode.ESCAPE ) {\n                        var fakeEvent = $.Event( event );\n                        fakeEvent.currentTarget = target[ 0 ];\n                        this.close( fakeEvent, true );\n                    }\n                }\n            };\n\n            // Only bind remove handler for delegated targets. Non-delegated\n            // tooltips will handle this in destroy.\n            if ( target[ 0 ] !== this.element[ 0 ] ) {\n                events.remove = function() {\n                    var targetElement = this._find( target );\n                    if ( targetElement ) {\n                        this._removeTooltip( targetElement.tooltip );\n                    }\n                };\n            }\n\n            if ( !event || event.type === \"mouseover\" ) {\n                events.mouseleave = \"close\";\n            }\n            if ( !event || event.type === \"focusin\" ) {\n                events.focusout = \"close\";\n            }\n            this._on( true, target, events );\n        },\n\n        close: function( event ) {\n            var tooltip,\n                that = this,\n                target = $( event ? event.currentTarget : this.element ),\n                tooltipData = this._find( target );\n\n            // The tooltip may already be closed\n            if ( !tooltipData ) {\n\n                // We set ui-tooltip-open immediately upon open (in open()), but only set the\n                // additional data once there's actually content to show (in _open()). So even if the\n                // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n                // the period between open() and _open().\n                target.removeData( \"ui-tooltip-open\" );\n                return;\n            }\n\n            tooltip = tooltipData.tooltip;\n\n            // Disabling closes the tooltip, so we need to track when we're closing\n            // to avoid an infinite loop in case the tooltip becomes disabled on close\n            if ( tooltipData.closing ) {\n                return;\n            }\n\n            // Clear the interval for delayed tracking tooltips\n            clearInterval( this.delayedShow );\n\n            // Only set title if we had one before (see comment in _open())\n            // If the title attribute has changed since open(), don't restore\n            if ( target.data( \"ui-tooltip-title\" ) && !target.attr( \"title\" ) ) {\n                target.attr( \"title\", target.data( \"ui-tooltip-title\" ) );\n            }\n\n            this._removeDescribedBy( target );\n\n            tooltipData.hiding = true;\n            tooltip.stop( true );\n            this._hide( tooltip, this.options.hide, function() {\n                that._removeTooltip( $( this ) );\n            } );\n\n            target.removeData( \"ui-tooltip-open\" );\n            this._off( target, \"mouseleave focusout keyup\" );\n\n            // Remove 'remove' binding only on delegated targets\n            if ( target[ 0 ] !== this.element[ 0 ] ) {\n                this._off( target, \"remove\" );\n            }\n            this._off( this.document, \"mousemove\" );\n\n            if ( event && event.type === \"mouseleave\" ) {\n                $.each( this.parents, function( id, parent ) {\n                    $( parent.element ).attr( \"title\", parent.title );\n                    delete that.parents[ id ];\n                } );\n            }\n\n            tooltipData.closing = true;\n            this._trigger( \"close\", event, { tooltip: tooltip } );\n            if ( !tooltipData.hiding ) {\n                tooltipData.closing = false;\n            }\n        },\n\n        _tooltip: function( element ) {\n            var tooltip = $( \"<div>\" ).attr( \"role\", \"tooltip\" ),\n                content = $( \"<div>\" ).appendTo( tooltip ),\n                id = tooltip.uniqueId().attr( \"id\" );\n\n            this._addClass( content, \"ui-tooltip-content\" );\n            this._addClass( tooltip, \"ui-tooltip\", \"ui-widget ui-widget-content\" );\n\n            tooltip.appendTo( this._appendTo( element ) );\n\n            return this.tooltips[ id ] = {\n                element: element,\n                tooltip: tooltip\n            };\n        },\n\n        _find: function( target ) {\n            var id = target.data( \"ui-tooltip-id\" );\n            return id ? this.tooltips[ id ] : null;\n        },\n\n        _removeTooltip: function( tooltip ) {\n\n            // Clear the interval for delayed tracking tooltips\n            clearInterval( this.delayedShow );\n\n            tooltip.remove();\n            delete this.tooltips[ tooltip.attr( \"id\" ) ];\n        },\n\n        _appendTo: function( target ) {\n            var element = target.closest( \".ui-front, dialog\" );\n\n            if ( !element.length ) {\n                element = this.document[ 0 ].body;\n            }\n\n            return element;\n        },\n\n        _destroy: function() {\n            var that = this;\n\n            // Close open tooltips\n            $.each( this.tooltips, function( id, tooltipData ) {\n\n                // Delegate to close method to handle common cleanup\n                var event = $.Event( \"blur\" ),\n                    element = tooltipData.element;\n                event.target = event.currentTarget = element[ 0 ];\n                that.close( event, true );\n\n                // Remove immediately; destroying an open tooltip doesn't use the\n                // hide animation\n                $( \"#\" + id ).remove();\n\n                // Restore the title\n                if ( element.data( \"ui-tooltip-title\" ) ) {\n\n                    // If the title attribute has changed since open(), don't restore\n                    if ( !element.attr( \"title\" ) ) {\n                        element.attr( \"title\", element.data( \"ui-tooltip-title\" ) );\n                    }\n                    element.removeData( \"ui-tooltip-title\" );\n                }\n            } );\n            this.liveRegion.remove();\n        }\n    } );\n\n// DEPRECATED\n// TODO: Switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for tooltipClass option\n        $.widget( \"ui.tooltip\", $.ui.tooltip, {\n            options: {\n                tooltipClass: null\n            },\n            _tooltip: function() {\n                var tooltipData = this._superApply( arguments );\n                if ( this.options.tooltipClass ) {\n                    tooltipData.tooltip.addClass( this.options.tooltipClass );\n                }\n                return tooltipData;\n            }\n        } );\n    }\n\n    return $.ui.tooltip;\n\n} );\n","jquery/ui-modules/widgets/draggable.js":"/*!\n * jQuery UI Draggable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Draggable\n//>>group: Interactions\n//>>description: Enables dragging functionality for any element.\n//>>docs: http://api.jqueryui.com/draggable/\n//>>demos: http://jqueryui.com/draggable/\n//>>css.structure: ../../themes/base/draggable.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../data\",\n            \"../plugin\",\n            \"../safe-active-element\",\n            \"../safe-blur\",\n            \"../scroll-parent\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.draggable\", $.ui.mouse, {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"drag\",\n        options: {\n            addClasses: true,\n            appendTo: \"parent\",\n            axis: false,\n            connectToSortable: false,\n            containment: false,\n            cursor: \"auto\",\n            cursorAt: false,\n            grid: false,\n            handle: false,\n            helper: \"original\",\n            iframeFix: false,\n            opacity: false,\n            refreshPositions: false,\n            revert: false,\n            revertDuration: 500,\n            scope: \"default\",\n            scroll: true,\n            scrollSensitivity: 20,\n            scrollSpeed: 20,\n            snap: false,\n            snapMode: \"both\",\n            snapTolerance: 20,\n            stack: false,\n            zIndex: false,\n\n            // Callbacks\n            drag: null,\n            start: null,\n            stop: null\n        },\n        _create: function() {\n\n            if ( this.options.helper === \"original\" ) {\n                this._setPositionRelative();\n            }\n            if ( this.options.addClasses ) {\n                this._addClass( \"ui-draggable\" );\n            }\n            this._setHandleClassName();\n\n            this._mouseInit();\n        },\n\n        _setOption: function( key, value ) {\n            this._super( key, value );\n            if ( key === \"handle\" ) {\n                this._removeHandleClassName();\n                this._setHandleClassName();\n            }\n        },\n\n        _destroy: function() {\n            if ( ( this.helper || this.element ).is( \".ui-draggable-dragging\" ) ) {\n                this.destroyOnClear = true;\n                return;\n            }\n            this._removeHandleClassName();\n            this._mouseDestroy();\n        },\n\n        _mouseCapture: function( event ) {\n            var o = this.options;\n\n            // Among others, prevent a drag on a resizable-handle\n            if ( this.helper || o.disabled ||\n                $( event.target ).closest( \".ui-resizable-handle\" ).length > 0 ) {\n                return false;\n            }\n\n            //Quit if we're not on a valid handle\n            this.handle = this._getHandle( event );\n            if ( !this.handle ) {\n                return false;\n            }\n\n            this._blurActiveElement( event );\n\n            this._blockFrames( o.iframeFix === true ? \"iframe\" : o.iframeFix );\n\n            return true;\n\n        },\n\n        _blockFrames: function( selector ) {\n            this.iframeBlocks = this.document.find( selector ).map( function() {\n                var iframe = $( this );\n\n                return $( \"<div>\" )\n                    .css( \"position\", \"absolute\" )\n                    .appendTo( iframe.parent() )\n                    .outerWidth( iframe.outerWidth() )\n                    .outerHeight( iframe.outerHeight() )\n                    .offset( iframe.offset() )[ 0 ];\n            } );\n        },\n\n        _unblockFrames: function() {\n            if ( this.iframeBlocks ) {\n                this.iframeBlocks.remove();\n                delete this.iframeBlocks;\n            }\n        },\n\n        _blurActiveElement: function( event ) {\n            var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),\n                target = $( event.target );\n\n            // Don't blur if the event occurred on an element that is within\n            // the currently focused element\n            // See #10527, #12472\n            if ( target.closest( activeElement ).length ) {\n                return;\n            }\n\n            // Blur any element that currently has focus, see #4261\n            $.ui.safeBlur( activeElement );\n        },\n\n        _mouseStart: function( event ) {\n\n            var o = this.options;\n\n            //Create and append the visible helper\n            this.helper = this._createHelper( event );\n\n            this._addClass( this.helper, \"ui-draggable-dragging\" );\n\n            //Cache the helper size\n            this._cacheHelperProportions();\n\n            //If ddmanager is used for droppables, set the global draggable\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.current = this;\n            }\n\n            /*\n             * - Position generation -\n             * This block generates everything position related - it's the core of draggables.\n             */\n\n            //Cache the margins of the original element\n            this._cacheMargins();\n\n            //Store the helper's css position\n            this.cssPosition = this.helper.css( \"position\" );\n            this.scrollParent = this.helper.scrollParent( true );\n            this.offsetParent = this.helper.offsetParent();\n            this.hasFixedAncestor = this.helper.parents().filter( function() {\n                return $( this ).css( \"position\" ) === \"fixed\";\n            } ).length > 0;\n\n            //The element's absolute position on the page minus margins\n            this.positionAbs = this.element.offset();\n            this._refreshOffsets( event );\n\n            //Generate the original position\n            this.originalPosition = this.position = this._generatePosition( event, false );\n            this.originalPageX = event.pageX;\n            this.originalPageY = event.pageY;\n\n            //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n            if ( o.cursorAt ) {\n                this._adjustOffsetFromHelper( o.cursorAt );\n            }\n\n            //Set a containment if given in the options\n            this._setContainment();\n\n            //Trigger event + callbacks\n            if ( this._trigger( \"start\", event ) === false ) {\n                this._clear();\n                return false;\n            }\n\n            //Recache the helper size\n            this._cacheHelperProportions();\n\n            //Prepare the droppable offsets\n            if ( $.ui.ddmanager && !o.dropBehaviour ) {\n                $.ui.ddmanager.prepareOffsets( this, event );\n            }\n\n            // Execute the drag once - this causes the helper not to be visible before getting its\n            // correct position\n            this._mouseDrag( event, true );\n\n            // If the ddmanager is used for droppables, inform the manager that dragging has started\n            // (see #5003)\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.dragStart( this, event );\n            }\n\n            return true;\n        },\n\n        _refreshOffsets: function( event ) {\n            this.offset = {\n                top: this.positionAbs.top - this.margins.top,\n                left: this.positionAbs.left - this.margins.left,\n                scroll: false,\n                parent: this._getParentOffset(),\n                relative: this._getRelativeOffset()\n            };\n\n            this.offset.click = {\n                left: event.pageX - this.offset.left,\n                top: event.pageY - this.offset.top\n            };\n        },\n\n        _mouseDrag: function( event, noPropagation ) {\n\n            // reset any necessary cached properties (see #5009)\n            if ( this.hasFixedAncestor ) {\n                this.offset.parent = this._getParentOffset();\n            }\n\n            //Compute the helpers position\n            this.position = this._generatePosition( event, true );\n            this.positionAbs = this._convertPositionTo( \"absolute\" );\n\n            //Call plugins and callbacks and use the resulting position if something is returned\n            if ( !noPropagation ) {\n                var ui = this._uiHash();\n                if ( this._trigger( \"drag\", event, ui ) === false ) {\n                    this._mouseUp( new $.Event( \"mouseup\", event ) );\n                    return false;\n                }\n                this.position = ui.position;\n            }\n\n            this.helper[ 0 ].style.left = this.position.left + \"px\";\n            this.helper[ 0 ].style.top = this.position.top + \"px\";\n\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.drag( this, event );\n            }\n\n            return false;\n        },\n\n        _mouseStop: function( event ) {\n\n            //If we are using droppables, inform the manager about the drop\n            var that = this,\n                dropped = false;\n            if ( $.ui.ddmanager && !this.options.dropBehaviour ) {\n                dropped = $.ui.ddmanager.drop( this, event );\n            }\n\n            //if a drop comes from outside (a sortable)\n            if ( this.dropped ) {\n                dropped = this.dropped;\n                this.dropped = false;\n            }\n\n            if ( ( this.options.revert === \"invalid\" && !dropped ) ||\n                ( this.options.revert === \"valid\" && dropped ) ||\n                this.options.revert === true || ( typeof this.options.revert === \"function\" &&\n                    this.options.revert.call( this.element, dropped ) )\n            ) {\n                $( this.helper ).animate(\n                    this.originalPosition,\n                    parseInt( this.options.revertDuration, 10 ),\n                    function() {\n                        if ( that._trigger( \"stop\", event ) !== false ) {\n                            that._clear();\n                        }\n                    }\n                );\n            } else {\n                if ( this._trigger( \"stop\", event ) !== false ) {\n                    this._clear();\n                }\n            }\n\n            return false;\n        },\n\n        _mouseUp: function( event ) {\n            this._unblockFrames();\n\n            // If the ddmanager is used for droppables, inform the manager that dragging has stopped\n            // (see #5003)\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.dragStop( this, event );\n            }\n\n            // Only need to focus if the event occurred on the draggable itself, see #10527\n            if ( this.handleElement.is( event.target ) ) {\n\n                // The interaction is over; whether or not the click resulted in a drag,\n                // focus the element\n                this.element.trigger( \"focus\" );\n            }\n\n            return $.ui.mouse.prototype._mouseUp.call( this, event );\n        },\n\n        cancel: function() {\n\n            if ( this.helper.is( \".ui-draggable-dragging\" ) ) {\n                this._mouseUp( new $.Event( \"mouseup\", { target: this.element[ 0 ] } ) );\n            } else {\n                this._clear();\n            }\n\n            return this;\n\n        },\n\n        _getHandle: function( event ) {\n            return this.options.handle ?\n                !!$( event.target ).closest( this.element.find( this.options.handle ) ).length :\n                true;\n        },\n\n        _setHandleClassName: function() {\n            this.handleElement = this.options.handle ?\n                this.element.find( this.options.handle ) : this.element;\n            this._addClass( this.handleElement, \"ui-draggable-handle\" );\n        },\n\n        _removeHandleClassName: function() {\n            this._removeClass( this.handleElement, \"ui-draggable-handle\" );\n        },\n\n        _createHelper: function( event ) {\n\n            var o = this.options,\n                helperIsFunction = typeof o.helper === \"function\",\n                helper = helperIsFunction ?\n                    $( o.helper.apply( this.element[ 0 ], [ event ] ) ) :\n                    ( o.helper === \"clone\" ?\n                        this.element.clone().removeAttr( \"id\" ) :\n                        this.element );\n\n            if ( !helper.parents( \"body\" ).length ) {\n                helper.appendTo( ( o.appendTo === \"parent\" ?\n                    this.element[ 0 ].parentNode :\n                    o.appendTo ) );\n            }\n\n            // Http://bugs.jqueryui.com/ticket/9446\n            // a helper function can return the original element\n            // which wouldn't have been set to relative in _create\n            if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {\n                this._setPositionRelative();\n            }\n\n            if ( helper[ 0 ] !== this.element[ 0 ] &&\n                !( /(fixed|absolute)/ ).test( helper.css( \"position\" ) ) ) {\n                helper.css( \"position\", \"absolute\" );\n            }\n\n            return helper;\n\n        },\n\n        _setPositionRelative: function() {\n            if ( !( /^(?:r|a|f)/ ).test( this.element.css( \"position\" ) ) ) {\n                this.element[ 0 ].style.position = \"relative\";\n            }\n        },\n\n        _adjustOffsetFromHelper: function( obj ) {\n            if ( typeof obj === \"string\" ) {\n                obj = obj.split( \" \" );\n            }\n            if ( Array.isArray( obj ) ) {\n                obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };\n            }\n            if ( \"left\" in obj ) {\n                this.offset.click.left = obj.left + this.margins.left;\n            }\n            if ( \"right\" in obj ) {\n                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n            }\n            if ( \"top\" in obj ) {\n                this.offset.click.top = obj.top + this.margins.top;\n            }\n            if ( \"bottom\" in obj ) {\n                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n            }\n        },\n\n        _isRootNode: function( element ) {\n            return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];\n        },\n\n        _getParentOffset: function() {\n\n            //Get the offsetParent and cache its position\n            var po = this.offsetParent.offset(),\n                document = this.document[ 0 ];\n\n            // This is a special case where we need to modify a offset calculated on start, since the\n            // following happened:\n            // 1. The position of the helper is absolute, so it's position is calculated based on the\n            // next positioned parent\n            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n            // the document, which means that the scroll is included in the initial calculation of the\n            // offset of the parent, and never recalculated upon drag\n            if ( this.cssPosition === \"absolute\" && this.scrollParent[ 0 ] !== document &&\n                $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {\n                po.left += this.scrollParent.scrollLeft();\n                po.top += this.scrollParent.scrollTop();\n            }\n\n            if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {\n                po = { top: 0, left: 0 };\n            }\n\n            return {\n                top: po.top + ( parseInt( this.offsetParent.css( \"borderTopWidth\" ), 10 ) || 0 ),\n                left: po.left + ( parseInt( this.offsetParent.css( \"borderLeftWidth\" ), 10 ) || 0 )\n            };\n\n        },\n\n        _getRelativeOffset: function() {\n            if ( this.cssPosition !== \"relative\" ) {\n                return { top: 0, left: 0 };\n            }\n\n            var p = this.element.position(),\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );\n\n            return {\n                top: p.top - ( parseInt( this.helper.css( \"top\" ), 10 ) || 0 ) +\n                    ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),\n                left: p.left - ( parseInt( this.helper.css( \"left\" ), 10 ) || 0 ) +\n                    ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )\n            };\n\n        },\n\n        _cacheMargins: function() {\n            this.margins = {\n                left: ( parseInt( this.element.css( \"marginLeft\" ), 10 ) || 0 ),\n                top: ( parseInt( this.element.css( \"marginTop\" ), 10 ) || 0 ),\n                right: ( parseInt( this.element.css( \"marginRight\" ), 10 ) || 0 ),\n                bottom: ( parseInt( this.element.css( \"marginBottom\" ), 10 ) || 0 )\n            };\n        },\n\n        _cacheHelperProportions: function() {\n            this.helperProportions = {\n                width: this.helper.outerWidth(),\n                height: this.helper.outerHeight()\n            };\n        },\n\n        _setContainment: function() {\n\n            var isUserScrollable, c, ce,\n                o = this.options,\n                document = this.document[ 0 ];\n\n            this.relativeContainer = null;\n\n            if ( !o.containment ) {\n                this.containment = null;\n                return;\n            }\n\n            if ( o.containment === \"window\" ) {\n                this.containment = [\n                    $( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,\n                    $( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,\n                    $( window ).scrollLeft() + $( window ).width() -\n                    this.helperProportions.width - this.margins.left,\n                    $( window ).scrollTop() +\n                    ( $( window ).height() || document.body.parentNode.scrollHeight ) -\n                    this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if ( o.containment === \"document\" ) {\n                this.containment = [\n                    0,\n                    0,\n                    $( document ).width() - this.helperProportions.width - this.margins.left,\n                    ( $( document ).height() || document.body.parentNode.scrollHeight ) -\n                    this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if ( o.containment.constructor === Array ) {\n                this.containment = o.containment;\n                return;\n            }\n\n            if ( o.containment === \"parent\" ) {\n                o.containment = this.helper[ 0 ].parentNode;\n            }\n\n            c = $( o.containment );\n            ce = c[ 0 ];\n\n            if ( !ce ) {\n                return;\n            }\n\n            isUserScrollable = /(scroll|auto)/.test( c.css( \"overflow\" ) );\n\n            this.containment = [\n                ( parseInt( c.css( \"borderLeftWidth\" ), 10 ) || 0 ) +\n                ( parseInt( c.css( \"paddingLeft\" ), 10 ) || 0 ),\n                ( parseInt( c.css( \"borderTopWidth\" ), 10 ) || 0 ) +\n                ( parseInt( c.css( \"paddingTop\" ), 10 ) || 0 ),\n                ( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -\n                ( parseInt( c.css( \"borderRightWidth\" ), 10 ) || 0 ) -\n                ( parseInt( c.css( \"paddingRight\" ), 10 ) || 0 ) -\n                this.helperProportions.width -\n                this.margins.left -\n                this.margins.right,\n                ( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -\n                ( parseInt( c.css( \"borderBottomWidth\" ), 10 ) || 0 ) -\n                ( parseInt( c.css( \"paddingBottom\" ), 10 ) || 0 ) -\n                this.helperProportions.height -\n                this.margins.top -\n                this.margins.bottom\n            ];\n            this.relativeContainer = c;\n        },\n\n        _convertPositionTo: function( d, pos ) {\n\n            if ( !pos ) {\n                pos = this.position;\n            }\n\n            var mod = d === \"absolute\" ? 1 : -1,\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pos.top\t+\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top * mod -\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.top :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pos.left +\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left * mod\t-\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.left :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )\n                )\n            };\n\n        },\n\n        _generatePosition: function( event, constrainPosition ) {\n\n            var containment, co, top, left,\n                o = this.options,\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),\n                pageX = event.pageX,\n                pageY = event.pageY;\n\n            // Cache the scroll\n            if ( !scrollIsRootNode || !this.offset.scroll ) {\n                this.offset.scroll = {\n                    top: this.scrollParent.scrollTop(),\n                    left: this.scrollParent.scrollLeft()\n                };\n            }\n\n            /*\n             * - Position constraining -\n             * Constrain the position to a mix of grid, containment.\n             */\n\n            // If we are not dragging yet, we won't check for options\n            if ( constrainPosition ) {\n                if ( this.containment ) {\n                    if ( this.relativeContainer ) {\n                        co = this.relativeContainer.offset();\n                        containment = [\n                            this.containment[ 0 ] + co.left,\n                            this.containment[ 1 ] + co.top,\n                            this.containment[ 2 ] + co.left,\n                            this.containment[ 3 ] + co.top\n                        ];\n                    } else {\n                        containment = this.containment;\n                    }\n\n                    if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {\n                        pageX = containment[ 0 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {\n                        pageY = containment[ 1 ] + this.offset.click.top;\n                    }\n                    if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {\n                        pageX = containment[ 2 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {\n                        pageY = containment[ 3 ] + this.offset.click.top;\n                    }\n                }\n\n                if ( o.grid ) {\n\n                    //Check for grid elements set to 0 to prevent divide by 0 error causing invalid\n                    // argument errors in IE (see ticket #6950)\n                    top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -\n                        this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;\n                    pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||\n                        top - this.offset.click.top > containment[ 3 ] ) ?\n                        top :\n                        ( ( top - this.offset.click.top >= containment[ 1 ] ) ?\n                            top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;\n\n                    left = o.grid[ 0 ] ? this.originalPageX +\n                        Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :\n                        this.originalPageX;\n                    pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||\n                        left - this.offset.click.left > containment[ 2 ] ) ?\n                        left :\n                        ( ( left - this.offset.click.left >= containment[ 0 ] ) ?\n                            left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;\n                }\n\n                if ( o.axis === \"y\" ) {\n                    pageX = this.originalPageX;\n                }\n\n                if ( o.axis === \"x\" ) {\n                    pageY = this.originalPageY;\n                }\n            }\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pageY -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.top -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top +\n                    ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.top :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pageX -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.left -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left +\n                    ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.left :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )\n                )\n            };\n\n        },\n\n        _clear: function() {\n            this._removeClass( this.helper, \"ui-draggable-dragging\" );\n            if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {\n                this.helper.remove();\n            }\n            this.helper = null;\n            this.cancelHelperRemoval = false;\n            if ( this.destroyOnClear ) {\n                this.destroy();\n            }\n        },\n\n        // From now on bulk stuff - mainly helpers\n\n        _trigger: function( type, event, ui ) {\n            ui = ui || this._uiHash();\n            $.ui.plugin.call( this, type, [ event, ui, this ], true );\n\n            // Absolute position and offset (see #6884 ) have to be recalculated after plugins\n            if ( /^(drag|start|stop)/.test( type ) ) {\n                this.positionAbs = this._convertPositionTo( \"absolute\" );\n                ui.offset = this.positionAbs;\n            }\n            return $.Widget.prototype._trigger.call( this, type, event, ui );\n        },\n\n        plugins: {},\n\n        _uiHash: function() {\n            return {\n                helper: this.helper,\n                position: this.position,\n                originalPosition: this.originalPosition,\n                offset: this.positionAbs\n            };\n        }\n\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"connectToSortable\", {\n        start: function( event, ui, draggable ) {\n            var uiSortable = $.extend( {}, ui, {\n                item: draggable.element\n            } );\n\n            draggable.sortables = [];\n            $( draggable.options.connectToSortable ).each( function() {\n                var sortable = $( this ).sortable( \"instance\" );\n\n                if ( sortable && !sortable.options.disabled ) {\n                    draggable.sortables.push( sortable );\n\n                    // RefreshPositions is called at drag start to refresh the containerCache\n                    // which is used in drag. This ensures it's initialized and synchronized\n                    // with any changes that might have happened on the page since initialization.\n                    sortable.refreshPositions();\n                    sortable._trigger( \"activate\", event, uiSortable );\n                }\n            } );\n        },\n        stop: function( event, ui, draggable ) {\n            var uiSortable = $.extend( {}, ui, {\n                item: draggable.element\n            } );\n\n            draggable.cancelHelperRemoval = false;\n\n            $.each( draggable.sortables, function() {\n                var sortable = this;\n\n                if ( sortable.isOver ) {\n                    sortable.isOver = 0;\n\n                    // Allow this sortable to handle removing the helper\n                    draggable.cancelHelperRemoval = true;\n                    sortable.cancelHelperRemoval = false;\n\n                    // Use _storedCSS To restore properties in the sortable,\n                    // as this also handles revert (#9675) since the draggable\n                    // may have modified them in unexpected ways (#8809)\n                    sortable._storedCSS = {\n                        position: sortable.placeholder.css( \"position\" ),\n                        top: sortable.placeholder.css( \"top\" ),\n                        left: sortable.placeholder.css( \"left\" )\n                    };\n\n                    sortable._mouseStop( event );\n\n                    // Once drag has ended, the sortable should return to using\n                    // its original helper, not the shared helper from draggable\n                    sortable.options.helper = sortable.options._helper;\n                } else {\n\n                    // Prevent this Sortable from removing the helper.\n                    // However, don't set the draggable to remove the helper\n                    // either as another connected Sortable may yet handle the removal.\n                    sortable.cancelHelperRemoval = true;\n\n                    sortable._trigger( \"deactivate\", event, uiSortable );\n                }\n            } );\n        },\n        drag: function( event, ui, draggable ) {\n            $.each( draggable.sortables, function() {\n                var innermostIntersecting = false,\n                    sortable = this;\n\n                // Copy over variables that sortable's _intersectsWith uses\n                sortable.positionAbs = draggable.positionAbs;\n                sortable.helperProportions = draggable.helperProportions;\n                sortable.offset.click = draggable.offset.click;\n\n                if ( sortable._intersectsWith( sortable.containerCache ) ) {\n                    innermostIntersecting = true;\n\n                    $.each( draggable.sortables, function() {\n\n                        // Copy over variables that sortable's _intersectsWith uses\n                        this.positionAbs = draggable.positionAbs;\n                        this.helperProportions = draggable.helperProportions;\n                        this.offset.click = draggable.offset.click;\n\n                        if ( this !== sortable &&\n                            this._intersectsWith( this.containerCache ) &&\n                            $.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {\n                            innermostIntersecting = false;\n                        }\n\n                        return innermostIntersecting;\n                    } );\n                }\n\n                if ( innermostIntersecting ) {\n\n                    // If it intersects, we use a little isOver variable and set it once,\n                    // so that the move-in stuff gets fired only once.\n                    if ( !sortable.isOver ) {\n                        sortable.isOver = 1;\n\n                        // Store draggable's parent in case we need to reappend to it later.\n                        draggable._parent = ui.helper.parent();\n\n                        sortable.currentItem = ui.helper\n                            .appendTo( sortable.element )\n                            .data( \"ui-sortable-item\", true );\n\n                        // Store helper option to later restore it\n                        sortable.options._helper = sortable.options.helper;\n\n                        sortable.options.helper = function() {\n                            return ui.helper[ 0 ];\n                        };\n\n                        // Fire the start events of the sortable with our passed browser event,\n                        // and our own helper (so it doesn't create a new one)\n                        event.target = sortable.currentItem[ 0 ];\n                        sortable._mouseCapture( event, true );\n                        sortable._mouseStart( event, true, true );\n\n                        // Because the browser event is way off the new appended portlet,\n                        // modify necessary variables to reflect the changes\n                        sortable.offset.click.top = draggable.offset.click.top;\n                        sortable.offset.click.left = draggable.offset.click.left;\n                        sortable.offset.parent.left -= draggable.offset.parent.left -\n                            sortable.offset.parent.left;\n                        sortable.offset.parent.top -= draggable.offset.parent.top -\n                            sortable.offset.parent.top;\n\n                        draggable._trigger( \"toSortable\", event );\n\n                        // Inform draggable that the helper is in a valid drop zone,\n                        // used solely in the revert option to handle \"valid/invalid\".\n                        draggable.dropped = sortable.element;\n\n                        // Need to refreshPositions of all sortables in the case that\n                        // adding to one sortable changes the location of the other sortables (#9675)\n                        $.each( draggable.sortables, function() {\n                            this.refreshPositions();\n                        } );\n\n                        // Hack so receive/update callbacks work (mostly)\n                        draggable.currentItem = draggable.element;\n                        sortable.fromOutside = draggable;\n                    }\n\n                    if ( sortable.currentItem ) {\n                        sortable._mouseDrag( event );\n\n                        // Copy the sortable's position because the draggable's can potentially reflect\n                        // a relative position, while sortable is always absolute, which the dragged\n                        // element has now become. (#8809)\n                        ui.position = sortable.position;\n                    }\n                } else {\n\n                    // If it doesn't intersect with the sortable, and it intersected before,\n                    // we fake the drag stop of the sortable, but make sure it doesn't remove\n                    // the helper by using cancelHelperRemoval.\n                    if ( sortable.isOver ) {\n\n                        sortable.isOver = 0;\n                        sortable.cancelHelperRemoval = true;\n\n                        // Calling sortable's mouseStop would trigger a revert,\n                        // so revert must be temporarily false until after mouseStop is called.\n                        sortable.options._revert = sortable.options.revert;\n                        sortable.options.revert = false;\n\n                        sortable._trigger( \"out\", event, sortable._uiHash( sortable ) );\n                        sortable._mouseStop( event, true );\n\n                        // Restore sortable behaviors that were modfied\n                        // when the draggable entered the sortable area (#9481)\n                        sortable.options.revert = sortable.options._revert;\n                        sortable.options.helper = sortable.options._helper;\n\n                        if ( sortable.placeholder ) {\n                            sortable.placeholder.remove();\n                        }\n\n                        // Restore and recalculate the draggable's offset considering the sortable\n                        // may have modified them in unexpected ways. (#8809, #10669)\n                        ui.helper.appendTo( draggable._parent );\n                        draggable._refreshOffsets( event );\n                        ui.position = draggable._generatePosition( event, true );\n\n                        draggable._trigger( \"fromSortable\", event );\n\n                        // Inform draggable that the helper is no longer in a valid drop zone\n                        draggable.dropped = false;\n\n                        // Need to refreshPositions of all sortables just in case removing\n                        // from one sortable changes the location of other sortables (#9675)\n                        $.each( draggable.sortables, function() {\n                            this.refreshPositions();\n                        } );\n                    }\n                }\n            } );\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"cursor\", {\n        start: function( event, ui, instance ) {\n            var t = $( \"body\" ),\n                o = instance.options;\n\n            if ( t.css( \"cursor\" ) ) {\n                o._cursor = t.css( \"cursor\" );\n            }\n            t.css( \"cursor\", o.cursor );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n            if ( o._cursor ) {\n                $( \"body\" ).css( \"cursor\", o._cursor );\n            }\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"opacity\", {\n        start: function( event, ui, instance ) {\n            var t = $( ui.helper ),\n                o = instance.options;\n            if ( t.css( \"opacity\" ) ) {\n                o._opacity = t.css( \"opacity\" );\n            }\n            t.css( \"opacity\", o.opacity );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n            if ( o._opacity ) {\n                $( ui.helper ).css( \"opacity\", o._opacity );\n            }\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"scroll\", {\n        start: function( event, ui, i ) {\n            if ( !i.scrollParentNotHidden ) {\n                i.scrollParentNotHidden = i.helper.scrollParent( false );\n            }\n\n            if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&\n                i.scrollParentNotHidden[ 0 ].tagName !== \"HTML\" ) {\n                i.overflowOffset = i.scrollParentNotHidden.offset();\n            }\n        },\n        drag: function( event, ui, i  ) {\n\n            var o = i.options,\n                scrolled = false,\n                scrollParent = i.scrollParentNotHidden[ 0 ],\n                document = i.document[ 0 ];\n\n            if ( scrollParent !== document && scrollParent.tagName !== \"HTML\" ) {\n                if ( !o.axis || o.axis !== \"x\" ) {\n                    if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <\n                        o.scrollSensitivity ) {\n                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n                    } else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {\n                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n                    }\n                }\n\n                if ( !o.axis || o.axis !== \"y\" ) {\n                    if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <\n                        o.scrollSensitivity ) {\n                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n                    } else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {\n                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n                    }\n                }\n\n            } else {\n\n                if ( !o.axis || o.axis !== \"x\" ) {\n                    if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );\n                    } else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <\n                        o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );\n                    }\n                }\n\n                if ( !o.axis || o.axis !== \"y\" ) {\n                    if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollLeft(\n                            $( document ).scrollLeft() - o.scrollSpeed\n                        );\n                    } else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <\n                        o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollLeft(\n                            $( document ).scrollLeft() + o.scrollSpeed\n                        );\n                    }\n                }\n\n            }\n\n            if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {\n                $.ui.ddmanager.prepareOffsets( i, event );\n            }\n\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"snap\", {\n        start: function( event, ui, i ) {\n\n            var o = i.options;\n\n            i.snapElements = [];\n\n            $( o.snap.constructor !== String ? ( o.snap.items || \":data(ui-draggable)\" ) : o.snap )\n                .each( function() {\n                    var $t = $( this ),\n                        $o = $t.offset();\n                    if ( this !== i.element[ 0 ] ) {\n                        i.snapElements.push( {\n                            item: this,\n                            width: $t.outerWidth(), height: $t.outerHeight(),\n                            top: $o.top, left: $o.left\n                        } );\n                    }\n                } );\n\n        },\n        drag: function( event, ui, inst ) {\n\n            var ts, bs, ls, rs, l, r, t, b, i, first,\n                o = inst.options,\n                d = o.snapTolerance,\n                x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,\n                y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;\n\n            for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {\n\n                l = inst.snapElements[ i ].left - inst.margins.left;\n                r = l + inst.snapElements[ i ].width;\n                t = inst.snapElements[ i ].top - inst.margins.top;\n                b = t + inst.snapElements[ i ].height;\n\n                if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||\n                    !$.contains( inst.snapElements[ i ].item.ownerDocument,\n                        inst.snapElements[ i ].item ) ) {\n                    if ( inst.snapElements[ i ].snapping ) {\n                        if ( inst.options.snap.release ) {\n                            inst.options.snap.release.call(\n                                inst.element,\n                                event,\n                                $.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )\n                            );\n                        }\n                    }\n                    inst.snapElements[ i ].snapping = false;\n                    continue;\n                }\n\n                if ( o.snapMode !== \"inner\" ) {\n                    ts = Math.abs( t - y2 ) <= d;\n                    bs = Math.abs( b - y1 ) <= d;\n                    ls = Math.abs( l - x2 ) <= d;\n                    rs = Math.abs( r - x1 ) <= d;\n                    if ( ts ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: t - inst.helperProportions.height,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( bs ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: b,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( ls ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: l - inst.helperProportions.width\n                        } ).left;\n                    }\n                    if ( rs ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: r\n                        } ).left;\n                    }\n                }\n\n                first = ( ts || bs || ls || rs );\n\n                if ( o.snapMode !== \"outer\" ) {\n                    ts = Math.abs( t - y1 ) <= d;\n                    bs = Math.abs( b - y2 ) <= d;\n                    ls = Math.abs( l - x1 ) <= d;\n                    rs = Math.abs( r - x2 ) <= d;\n                    if ( ts ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: t,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( bs ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: b - inst.helperProportions.height,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( ls ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: l\n                        } ).left;\n                    }\n                    if ( rs ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: r - inst.helperProportions.width\n                        } ).left;\n                    }\n                }\n\n                if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {\n                    if ( inst.options.snap.snap ) {\n                        inst.options.snap.snap.call(\n                            inst.element,\n                            event,\n                            $.extend( inst._uiHash(), {\n                                snapItem: inst.snapElements[ i ].item\n                            } ) );\n                    }\n                }\n                inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );\n\n            }\n\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"stack\", {\n        start: function( event, ui, instance ) {\n            var min,\n                o = instance.options,\n                group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {\n                    return ( parseInt( $( a ).css( \"zIndex\" ), 10 ) || 0 ) -\n                        ( parseInt( $( b ).css( \"zIndex\" ), 10 ) || 0 );\n                } );\n\n            if ( !group.length ) {\n                return;\n            }\n\n            min = parseInt( $( group[ 0 ] ).css( \"zIndex\" ), 10 ) || 0;\n            $( group ).each( function( i ) {\n                $( this ).css( \"zIndex\", min + i );\n            } );\n            this.css( \"zIndex\", ( min + group.length ) );\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"zIndex\", {\n        start: function( event, ui, instance ) {\n            var t = $( ui.helper ),\n                o = instance.options;\n\n            if ( t.css( \"zIndex\" ) ) {\n                o._zIndex = t.css( \"zIndex\" );\n            }\n            t.css( \"zIndex\", o.zIndex );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n\n            if ( o._zIndex ) {\n                $( ui.helper ).css( \"zIndex\", o._zIndex );\n            }\n        }\n    } );\n\n    return $.ui.draggable;\n\n} );\n","jquery/ui-modules/widgets/droppable.js":"/*!\n * jQuery UI Droppable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Droppable\n//>>group: Interactions\n//>>description: Enables drop targets for draggable elements.\n//>>docs: http://api.jqueryui.com/droppable/\n//>>demos: http://jqueryui.com/droppable/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./draggable\",\n            \"./mouse\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.droppable\", {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"drop\",\n        options: {\n            accept: \"*\",\n            addClasses: true,\n            greedy: false,\n            scope: \"default\",\n            tolerance: \"intersect\",\n\n            // Callbacks\n            activate: null,\n            deactivate: null,\n            drop: null,\n            out: null,\n            over: null\n        },\n        _create: function() {\n\n            var proportions,\n                o = this.options,\n                accept = o.accept;\n\n            this.isover = false;\n            this.isout = true;\n\n            this.accept = typeof accept === \"function\" ? accept : function( d ) {\n                return d.is( accept );\n            };\n\n            this.proportions = function( /* valueToWrite */ ) {\n                if ( arguments.length ) {\n\n                    // Store the droppable's proportions\n                    proportions = arguments[ 0 ];\n                } else {\n\n                    // Retrieve or derive the droppable's proportions\n                    return proportions ?\n                        proportions :\n                        proportions = {\n                            width: this.element[ 0 ].offsetWidth,\n                            height: this.element[ 0 ].offsetHeight\n                        };\n                }\n            };\n\n            this._addToManager( o.scope );\n\n            if ( o.addClasses ) {\n                this._addClass( \"ui-droppable\" );\n            }\n\n        },\n\n        _addToManager: function( scope ) {\n\n            // Add the reference and positions to the manager\n            $.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];\n            $.ui.ddmanager.droppables[ scope ].push( this );\n        },\n\n        _splice: function( drop ) {\n            var i = 0;\n            for ( ; i < drop.length; i++ ) {\n                if ( drop[ i ] === this ) {\n                    drop.splice( i, 1 );\n                }\n            }\n        },\n\n        _destroy: function() {\n            var drop = $.ui.ddmanager.droppables[ this.options.scope ];\n\n            this._splice( drop );\n        },\n\n        _setOption: function( key, value ) {\n\n            if ( key === \"accept\" ) {\n                this.accept = typeof value === \"function\" ? value : function( d ) {\n                    return d.is( value );\n                };\n            } else if ( key === \"scope\" ) {\n                var drop = $.ui.ddmanager.droppables[ this.options.scope ];\n\n                this._splice( drop );\n                this._addToManager( value );\n            }\n\n            this._super( key, value );\n        },\n\n        _activate: function( event ) {\n            var draggable = $.ui.ddmanager.current;\n\n            this._addActiveClass();\n            if ( draggable ) {\n                this._trigger( \"activate\", event, this.ui( draggable ) );\n            }\n        },\n\n        _deactivate: function( event ) {\n            var draggable = $.ui.ddmanager.current;\n\n            this._removeActiveClass();\n            if ( draggable ) {\n                this._trigger( \"deactivate\", event, this.ui( draggable ) );\n            }\n        },\n\n        _over: function( event ) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return;\n            }\n\n            if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||\n                draggable.element ) ) ) {\n                this._addHoverClass();\n                this._trigger( \"over\", event, this.ui( draggable ) );\n            }\n\n        },\n\n        _out: function( event ) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return;\n            }\n\n            if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||\n                draggable.element ) ) ) {\n                this._removeHoverClass();\n                this._trigger( \"out\", event, this.ui( draggable ) );\n            }\n\n        },\n\n        _drop: function( event, custom ) {\n\n            var draggable = custom || $.ui.ddmanager.current,\n                childrenIntersection = false;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return false;\n            }\n\n            this.element\n                .find( \":data(ui-droppable)\" )\n                .not( \".ui-draggable-dragging\" )\n                .each( function() {\n                    var inst = $( this ).droppable( \"instance\" );\n                    if (\n                        inst.options.greedy &&\n                        !inst.options.disabled &&\n                        inst.options.scope === draggable.options.scope &&\n                        inst.accept.call(\n                            inst.element[ 0 ], ( draggable.currentItem || draggable.element )\n                        ) &&\n                        $.ui.intersect(\n                            draggable,\n                            $.extend( inst, { offset: inst.element.offset() } ),\n                            inst.options.tolerance, event\n                        )\n                    ) {\n                        childrenIntersection = true;\n                        return false;\n                    }\n                } );\n            if ( childrenIntersection ) {\n                return false;\n            }\n\n            if ( this.accept.call( this.element[ 0 ],\n                ( draggable.currentItem || draggable.element ) ) ) {\n                this._removeActiveClass();\n                this._removeHoverClass();\n\n                this._trigger( \"drop\", event, this.ui( draggable ) );\n                return this.element;\n            }\n\n            return false;\n\n        },\n\n        ui: function( c ) {\n            return {\n                draggable: ( c.currentItem || c.element ),\n                helper: c.helper,\n                position: c.position,\n                offset: c.positionAbs\n            };\n        },\n\n        // Extension points just to make backcompat sane and avoid duplicating logic\n        // TODO: Remove in 1.14 along with call to it below\n        _addHoverClass: function() {\n            this._addClass( \"ui-droppable-hover\" );\n        },\n\n        _removeHoverClass: function() {\n            this._removeClass( \"ui-droppable-hover\" );\n        },\n\n        _addActiveClass: function() {\n            this._addClass( \"ui-droppable-active\" );\n        },\n\n        _removeActiveClass: function() {\n            this._removeClass( \"ui-droppable-active\" );\n        }\n    } );\n\n    $.ui.intersect = ( function() {\n        function isOverAxis( x, reference, size ) {\n            return ( x >= reference ) && ( x < ( reference + size ) );\n        }\n\n        return function( draggable, droppable, toleranceMode, event ) {\n\n            if ( !droppable.offset ) {\n                return false;\n            }\n\n            var x1 = ( draggable.positionAbs ||\n                    draggable.position.absolute ).left + draggable.margins.left,\n                y1 = ( draggable.positionAbs ||\n                    draggable.position.absolute ).top + draggable.margins.top,\n                x2 = x1 + draggable.helperProportions.width,\n                y2 = y1 + draggable.helperProportions.height,\n                l = droppable.offset.left,\n                t = droppable.offset.top,\n                r = l + droppable.proportions().width,\n                b = t + droppable.proportions().height;\n\n            switch ( toleranceMode ) {\n                case \"fit\":\n                    return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );\n                case \"intersect\":\n                    return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half\n                        x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half\n                        t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half\n                        y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half\n                case \"pointer\":\n                    return isOverAxis( event.pageY, t, droppable.proportions().height ) &&\n                        isOverAxis( event.pageX, l, droppable.proportions().width );\n                case \"touch\":\n                    return (\n                        ( y1 >= t && y1 <= b ) || // Top edge touching\n                        ( y2 >= t && y2 <= b ) || // Bottom edge touching\n                        ( y1 < t && y2 > b ) // Surrounded vertically\n                    ) && (\n                        ( x1 >= l && x1 <= r ) || // Left edge touching\n                        ( x2 >= l && x2 <= r ) || // Right edge touching\n                        ( x1 < l && x2 > r ) // Surrounded horizontally\n                    );\n                default:\n                    return false;\n            }\n        };\n    } )();\n\n    /*\n        This manager tracks offsets of draggables and droppables\n    */\n    $.ui.ddmanager = {\n        current: null,\n        droppables: { \"default\": [] },\n        prepareOffsets: function( t, event ) {\n\n            var i, j,\n                m = $.ui.ddmanager.droppables[ t.options.scope ] || [],\n                type = event ? event.type : null, // workaround for #2317\n                list = ( t.currentItem || t.element ).find( \":data(ui-droppable)\" ).addBack();\n\n            droppablesLoop: for ( i = 0; i < m.length; i++ ) {\n\n                // No disabled and non-accepted\n                if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],\n                    ( t.currentItem || t.element ) ) ) ) {\n                    continue;\n                }\n\n                // Filter out elements in the current dragged item\n                for ( j = 0; j < list.length; j++ ) {\n                    if ( list[ j ] === m[ i ].element[ 0 ] ) {\n                        m[ i ].proportions().height = 0;\n                        continue droppablesLoop;\n                    }\n                }\n\n                m[ i ].visible = m[ i ].element.css( \"display\" ) !== \"none\";\n                if ( !m[ i ].visible ) {\n                    continue;\n                }\n\n                // Activate the droppable if used directly from draggables\n                if ( type === \"mousedown\" ) {\n                    m[ i ]._activate.call( m[ i ], event );\n                }\n\n                m[ i ].offset = m[ i ].element.offset();\n                m[ i ].proportions( {\n                    width: m[ i ].element[ 0 ].offsetWidth,\n                    height: m[ i ].element[ 0 ].offsetHeight\n                } );\n\n            }\n\n        },\n        drop: function( draggable, event ) {\n\n            var dropped = false;\n\n            // Create a copy of the droppables in case the list changes during the drop (#9116)\n            $.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {\n\n                if ( !this.options ) {\n                    return;\n                }\n                if ( !this.options.disabled && this.visible &&\n                    $.ui.intersect( draggable, this, this.options.tolerance, event ) ) {\n                    dropped = this._drop.call( this, event ) || dropped;\n                }\n\n                if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],\n                    ( draggable.currentItem || draggable.element ) ) ) {\n                    this.isout = true;\n                    this.isover = false;\n                    this._deactivate.call( this, event );\n                }\n\n            } );\n            return dropped;\n\n        },\n        dragStart: function( draggable, event ) {\n\n            // Listen for scrolling so that if the dragging causes scrolling the position of the\n            // droppables can be recalculated (see #5003)\n            draggable.element.parentsUntil( \"body\" ).on( \"scroll.droppable\", function() {\n                if ( !draggable.options.refreshPositions ) {\n                    $.ui.ddmanager.prepareOffsets( draggable, event );\n                }\n            } );\n        },\n        drag: function( draggable, event ) {\n\n            // If you have a highly dynamic page, you might try this option. It renders positions\n            // every time you move the mouse.\n            if ( draggable.options.refreshPositions ) {\n                $.ui.ddmanager.prepareOffsets( draggable, event );\n            }\n\n            // Run through all droppables and check their positions based on specific tolerance options\n            $.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {\n\n                if ( this.options.disabled || this.greedyChild || !this.visible ) {\n                    return;\n                }\n\n                var parentInstance, scope, parent,\n                    intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),\n                    c = !intersects && this.isover ?\n                        \"isout\" :\n                        ( intersects && !this.isover ? \"isover\" : null );\n                if ( !c ) {\n                    return;\n                }\n\n                if ( this.options.greedy ) {\n\n                    // find droppable parents with same scope\n                    scope = this.options.scope;\n                    parent = this.element.parents( \":data(ui-droppable)\" ).filter( function() {\n                        return $( this ).droppable( \"instance\" ).options.scope === scope;\n                    } );\n\n                    if ( parent.length ) {\n                        parentInstance = $( parent[ 0 ] ).droppable( \"instance\" );\n                        parentInstance.greedyChild = ( c === \"isover\" );\n                    }\n                }\n\n                // We just moved into a greedy child\n                if ( parentInstance && c === \"isover\" ) {\n                    parentInstance.isover = false;\n                    parentInstance.isout = true;\n                    parentInstance._out.call( parentInstance, event );\n                }\n\n                this[ c ] = true;\n                this[ c === \"isout\" ? \"isover\" : \"isout\" ] = false;\n                this[ c === \"isover\" ? \"_over\" : \"_out\" ].call( this, event );\n\n                // We just moved out of a greedy child\n                if ( parentInstance && c === \"isout\" ) {\n                    parentInstance.isout = false;\n                    parentInstance.isover = true;\n                    parentInstance._over.call( parentInstance, event );\n                }\n            } );\n\n        },\n        dragStop: function( draggable, event ) {\n            draggable.element.parentsUntil( \"body\" ).off( \"scroll.droppable\" );\n\n            // Call prepareOffsets one final time since IE does not fire return scroll events when\n            // overflow was caused by drag (see #5003)\n            if ( !draggable.options.refreshPositions ) {\n                $.ui.ddmanager.prepareOffsets( draggable, event );\n            }\n        }\n    };\n\n// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for activeClass and hoverClass options\n        $.widget( \"ui.droppable\", $.ui.droppable, {\n            options: {\n                hoverClass: false,\n                activeClass: false\n            },\n            _addActiveClass: function() {\n                this._super();\n                if ( this.options.activeClass ) {\n                    this.element.addClass( this.options.activeClass );\n                }\n            },\n            _removeActiveClass: function() {\n                this._super();\n                if ( this.options.activeClass ) {\n                    this.element.removeClass( this.options.activeClass );\n                }\n            },\n            _addHoverClass: function() {\n                this._super();\n                if ( this.options.hoverClass ) {\n                    this.element.addClass( this.options.hoverClass );\n                }\n            },\n            _removeHoverClass: function() {\n                this._super();\n                if ( this.options.hoverClass ) {\n                    this.element.removeClass( this.options.hoverClass );\n                }\n            }\n        } );\n    }\n\n    return $.ui.droppable;\n\n} );\n","jquery/ui-modules/widgets/resizable.js":"/*!\n * jQuery UI Resizable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Resizable\n//>>group: Interactions\n//>>description: Enables resize functionality for any element.\n//>>docs: http://api.jqueryui.com/resizable/\n//>>demos: http://jqueryui.com/resizable/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/resizable.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../disable-selection\",\n            \"../plugin\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.resizable\", $.ui.mouse, {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"resize\",\n        options: {\n            alsoResize: false,\n            animate: false,\n            animateDuration: \"slow\",\n            animateEasing: \"swing\",\n            aspectRatio: false,\n            autoHide: false,\n            classes: {\n                \"ui-resizable-se\": \"ui-icon ui-icon-gripsmall-diagonal-se\"\n            },\n            containment: false,\n            ghost: false,\n            grid: false,\n            handles: \"e,s,se\",\n            helper: false,\n            maxHeight: null,\n            maxWidth: null,\n            minHeight: 10,\n            minWidth: 10,\n\n            // See #7960\n            zIndex: 90,\n\n            // Callbacks\n            resize: null,\n            start: null,\n            stop: null\n        },\n\n        _num: function( value ) {\n            return parseFloat( value ) || 0;\n        },\n\n        _isNumber: function( value ) {\n            return !isNaN( parseFloat( value ) );\n        },\n\n        _hasScroll: function( el, a ) {\n\n            if ( $( el ).css( \"overflow\" ) === \"hidden\" ) {\n                return false;\n            }\n\n            var scroll = ( a && a === \"left\" ) ? \"scrollLeft\" : \"scrollTop\",\n                has = false;\n\n            if ( el[ scroll ] > 0 ) {\n                return true;\n            }\n\n            // TODO: determine which cases actually cause this to happen\n            // if the element doesn't have the scroll set, see if it's possible to\n            // set the scroll\n            try {\n                el[ scroll ] = 1;\n                has = ( el[ scroll ] > 0 );\n                el[ scroll ] = 0;\n            } catch ( e ) {\n\n                // `el` might be a string, then setting `scroll` will throw\n                // an error in strict mode; ignore it.\n            }\n            return has;\n        },\n\n        _create: function() {\n\n            var margins,\n                o = this.options,\n                that = this;\n            this._addClass( \"ui-resizable\" );\n\n            $.extend( this, {\n                _aspectRatio: !!( o.aspectRatio ),\n                aspectRatio: o.aspectRatio,\n                originalElement: this.element,\n                _proportionallyResizeElements: [],\n                _helper: o.helper || o.ghost || o.animate ? o.helper || \"ui-resizable-helper\" : null\n            } );\n\n            // Wrap the element if it cannot hold child nodes\n            if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {\n\n                this.element.wrap(\n                    $( \"<div class='ui-wrapper'></div>\" ).css( {\n                        overflow: \"hidden\",\n                        position: this.element.css( \"position\" ),\n                        width: this.element.outerWidth(),\n                        height: this.element.outerHeight(),\n                        top: this.element.css( \"top\" ),\n                        left: this.element.css( \"left\" )\n                    } )\n                );\n\n                this.element = this.element.parent().data(\n                    \"ui-resizable\", this.element.resizable( \"instance\" )\n                );\n\n                this.elementIsWrapper = true;\n\n                margins = {\n                    marginTop: this.originalElement.css( \"marginTop\" ),\n                    marginRight: this.originalElement.css( \"marginRight\" ),\n                    marginBottom: this.originalElement.css( \"marginBottom\" ),\n                    marginLeft: this.originalElement.css( \"marginLeft\" )\n                };\n\n                this.element.css( margins );\n                this.originalElement.css( \"margin\", 0 );\n\n                // support: Safari\n                // Prevent Safari textarea resize\n                this.originalResizeStyle = this.originalElement.css( \"resize\" );\n                this.originalElement.css( \"resize\", \"none\" );\n\n                this._proportionallyResizeElements.push( this.originalElement.css( {\n                    position: \"static\",\n                    zoom: 1,\n                    display: \"block\"\n                } ) );\n\n                // Support: IE9\n                // avoid IE jump (hard set the margin)\n                this.originalElement.css( margins );\n\n                this._proportionallyResize();\n            }\n\n            this._setupHandles();\n\n            if ( o.autoHide ) {\n                $( this.element )\n                    .on( \"mouseenter\", function() {\n                        if ( o.disabled ) {\n                            return;\n                        }\n                        that._removeClass( \"ui-resizable-autohide\" );\n                        that._handles.show();\n                    } )\n                    .on( \"mouseleave\", function() {\n                        if ( o.disabled ) {\n                            return;\n                        }\n                        if ( !that.resizing ) {\n                            that._addClass( \"ui-resizable-autohide\" );\n                            that._handles.hide();\n                        }\n                    } );\n            }\n\n            this._mouseInit();\n        },\n\n        _destroy: function() {\n\n            this._mouseDestroy();\n            this._addedHandles.remove();\n\n            var wrapper,\n                _destroy = function( exp ) {\n                    $( exp )\n                        .removeData( \"resizable\" )\n                        .removeData( \"ui-resizable\" )\n                        .off( \".resizable\" );\n                };\n\n            // TODO: Unwrap at same DOM position\n            if ( this.elementIsWrapper ) {\n                _destroy( this.element );\n                wrapper = this.element;\n                this.originalElement.css( {\n                    position: wrapper.css( \"position\" ),\n                    width: wrapper.outerWidth(),\n                    height: wrapper.outerHeight(),\n                    top: wrapper.css( \"top\" ),\n                    left: wrapper.css( \"left\" )\n                } ).insertAfter( wrapper );\n                wrapper.remove();\n            }\n\n            this.originalElement.css( \"resize\", this.originalResizeStyle );\n            _destroy( this.originalElement );\n\n            return this;\n        },\n\n        _setOption: function( key, value ) {\n            this._super( key, value );\n\n            switch ( key ) {\n                case \"handles\":\n                    this._removeHandles();\n                    this._setupHandles();\n                    break;\n                case \"aspectRatio\":\n                    this._aspectRatio = !!value;\n                    break;\n                default:\n                    break;\n            }\n        },\n\n        _setupHandles: function() {\n            var o = this.options, handle, i, n, hname, axis, that = this;\n            this.handles = o.handles ||\n                ( !$( \".ui-resizable-handle\", this.element ).length ?\n                    \"e,s,se\" : {\n                        n: \".ui-resizable-n\",\n                        e: \".ui-resizable-e\",\n                        s: \".ui-resizable-s\",\n                        w: \".ui-resizable-w\",\n                        se: \".ui-resizable-se\",\n                        sw: \".ui-resizable-sw\",\n                        ne: \".ui-resizable-ne\",\n                        nw: \".ui-resizable-nw\"\n                    } );\n\n            this._handles = $();\n            this._addedHandles = $();\n            if ( this.handles.constructor === String ) {\n\n                if ( this.handles === \"all\" ) {\n                    this.handles = \"n,e,s,w,se,sw,ne,nw\";\n                }\n\n                n = this.handles.split( \",\" );\n                this.handles = {};\n\n                for ( i = 0; i < n.length; i++ ) {\n\n                    handle = String.prototype.trim.call( n[ i ] );\n                    hname = \"ui-resizable-\" + handle;\n                    axis = $( \"<div>\" );\n                    this._addClass( axis, \"ui-resizable-handle \" + hname );\n\n                    axis.css( { zIndex: o.zIndex } );\n\n                    this.handles[ handle ] = \".ui-resizable-\" + handle;\n                    if ( !this.element.children( this.handles[ handle ] ).length ) {\n                        this.element.append( axis );\n                        this._addedHandles = this._addedHandles.add( axis );\n                    }\n                }\n\n            }\n\n            this._renderAxis = function( target ) {\n\n                var i, axis, padPos, padWrapper;\n\n                target = target || this.element;\n\n                for ( i in this.handles ) {\n\n                    if ( this.handles[ i ].constructor === String ) {\n                        this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();\n                    } else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {\n                        this.handles[ i ] = $( this.handles[ i ] );\n                        this._on( this.handles[ i ], { \"mousedown\": that._mouseDown } );\n                    }\n\n                    if ( this.elementIsWrapper &&\n                        this.originalElement[ 0 ]\n                            .nodeName\n                            .match( /^(textarea|input|select|button)$/i ) ) {\n                        axis = $( this.handles[ i ], this.element );\n\n                        padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?\n                            axis.outerHeight() :\n                            axis.outerWidth();\n\n                        padPos = [ \"padding\",\n                            /ne|nw|n/.test( i ) ? \"Top\" :\n                                /se|sw|s/.test( i ) ? \"Bottom\" :\n                                    /^e$/.test( i ) ? \"Right\" : \"Left\" ].join( \"\" );\n\n                        target.css( padPos, padWrapper );\n\n                        this._proportionallyResize();\n                    }\n\n                    this._handles = this._handles.add( this.handles[ i ] );\n                }\n            };\n\n            // TODO: make renderAxis a prototype function\n            this._renderAxis( this.element );\n\n            this._handles = this._handles.add( this.element.find( \".ui-resizable-handle\" ) );\n            this._handles.disableSelection();\n\n            this._handles.on( \"mouseover\", function() {\n                if ( !that.resizing ) {\n                    if ( this.className ) {\n                        axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );\n                    }\n                    that.axis = axis && axis[ 1 ] ? axis[ 1 ] : \"se\";\n                }\n            } );\n\n            if ( o.autoHide ) {\n                this._handles.hide();\n                this._addClass( \"ui-resizable-autohide\" );\n            }\n        },\n\n        _removeHandles: function() {\n            this._addedHandles.remove();\n        },\n\n        _mouseCapture: function( event ) {\n            var i, handle,\n                capture = false;\n\n            for ( i in this.handles ) {\n                handle = $( this.handles[ i ] )[ 0 ];\n                if ( handle === event.target || $.contains( handle, event.target ) ) {\n                    capture = true;\n                }\n            }\n\n            return !this.options.disabled && capture;\n        },\n\n        _mouseStart: function( event ) {\n\n            var curleft, curtop, cursor,\n                o = this.options,\n                el = this.element;\n\n            this.resizing = true;\n\n            this._renderProxy();\n\n            curleft = this._num( this.helper.css( \"left\" ) );\n            curtop = this._num( this.helper.css( \"top\" ) );\n\n            if ( o.containment ) {\n                curleft += $( o.containment ).scrollLeft() || 0;\n                curtop += $( o.containment ).scrollTop() || 0;\n            }\n\n            this.offset = this.helper.offset();\n            this.position = { left: curleft, top: curtop };\n\n            this.size = this._helper ? {\n                width: this.helper.width(),\n                height: this.helper.height()\n            } : {\n                width: el.width(),\n                height: el.height()\n            };\n\n            this.originalSize = this._helper ? {\n                width: el.outerWidth(),\n                height: el.outerHeight()\n            } : {\n                width: el.width(),\n                height: el.height()\n            };\n\n            this.sizeDiff = {\n                width: el.outerWidth() - el.width(),\n                height: el.outerHeight() - el.height()\n            };\n\n            this.originalPosition = { left: curleft, top: curtop };\n            this.originalMousePosition = { left: event.pageX, top: event.pageY };\n\n            this.aspectRatio = ( typeof o.aspectRatio === \"number\" ) ?\n                o.aspectRatio :\n                ( ( this.originalSize.width / this.originalSize.height ) || 1 );\n\n            cursor = $( \".ui-resizable-\" + this.axis ).css( \"cursor\" );\n            $( \"body\" ).css( \"cursor\", cursor === \"auto\" ? this.axis + \"-resize\" : cursor );\n\n            this._addClass( \"ui-resizable-resizing\" );\n            this._propagate( \"start\", event );\n            return true;\n        },\n\n        _mouseDrag: function( event ) {\n\n            var data, props,\n                smp = this.originalMousePosition,\n                a = this.axis,\n                dx = ( event.pageX - smp.left ) || 0,\n                dy = ( event.pageY - smp.top ) || 0,\n                trigger = this._change[ a ];\n\n            this._updatePrevProperties();\n\n            if ( !trigger ) {\n                return false;\n            }\n\n            data = trigger.apply( this, [ event, dx, dy ] );\n\n            this._updateVirtualBoundaries( event.shiftKey );\n            if ( this._aspectRatio || event.shiftKey ) {\n                data = this._updateRatio( data, event );\n            }\n\n            data = this._respectSize( data, event );\n\n            this._updateCache( data );\n\n            this._propagate( \"resize\", event );\n\n            props = this._applyChanges();\n\n            if ( !this._helper && this._proportionallyResizeElements.length ) {\n                this._proportionallyResize();\n            }\n\n            if ( !$.isEmptyObject( props ) ) {\n                this._updatePrevProperties();\n                this._trigger( \"resize\", event, this.ui() );\n                this._applyChanges();\n            }\n\n            return false;\n        },\n\n        _mouseStop: function( event ) {\n\n            this.resizing = false;\n            var pr, ista, soffseth, soffsetw, s, left, top,\n                o = this.options, that = this;\n\n            if ( this._helper ) {\n\n                pr = this._proportionallyResizeElements;\n                ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );\n                soffseth = ista && this._hasScroll( pr[ 0 ], \"left\" ) ? 0 : that.sizeDiff.height;\n                soffsetw = ista ? 0 : that.sizeDiff.width;\n\n                s = {\n                    width: ( that.helper.width()  - soffsetw ),\n                    height: ( that.helper.height() - soffseth )\n                };\n                left = ( parseFloat( that.element.css( \"left\" ) ) +\n                    ( that.position.left - that.originalPosition.left ) ) || null;\n                top = ( parseFloat( that.element.css( \"top\" ) ) +\n                    ( that.position.top - that.originalPosition.top ) ) || null;\n\n                if ( !o.animate ) {\n                    this.element.css( $.extend( s, { top: top, left: left } ) );\n                }\n\n                that.helper.height( that.size.height );\n                that.helper.width( that.size.width );\n\n                if ( this._helper && !o.animate ) {\n                    this._proportionallyResize();\n                }\n            }\n\n            $( \"body\" ).css( \"cursor\", \"auto\" );\n\n            this._removeClass( \"ui-resizable-resizing\" );\n\n            this._propagate( \"stop\", event );\n\n            if ( this._helper ) {\n                this.helper.remove();\n            }\n\n            return false;\n\n        },\n\n        _updatePrevProperties: function() {\n            this.prevPosition = {\n                top: this.position.top,\n                left: this.position.left\n            };\n            this.prevSize = {\n                width: this.size.width,\n                height: this.size.height\n            };\n        },\n\n        _applyChanges: function() {\n            var props = {};\n\n            if ( this.position.top !== this.prevPosition.top ) {\n                props.top = this.position.top + \"px\";\n            }\n            if ( this.position.left !== this.prevPosition.left ) {\n                props.left = this.position.left + \"px\";\n            }\n            if ( this.size.width !== this.prevSize.width ) {\n                props.width = this.size.width + \"px\";\n            }\n            if ( this.size.height !== this.prevSize.height ) {\n                props.height = this.size.height + \"px\";\n            }\n\n            this.helper.css( props );\n\n            return props;\n        },\n\n        _updateVirtualBoundaries: function( forceAspectRatio ) {\n            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,\n                o = this.options;\n\n            b = {\n                minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,\n                maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,\n                minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,\n                maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity\n            };\n\n            if ( this._aspectRatio || forceAspectRatio ) {\n                pMinWidth = b.minHeight * this.aspectRatio;\n                pMinHeight = b.minWidth / this.aspectRatio;\n                pMaxWidth = b.maxHeight * this.aspectRatio;\n                pMaxHeight = b.maxWidth / this.aspectRatio;\n\n                if ( pMinWidth > b.minWidth ) {\n                    b.minWidth = pMinWidth;\n                }\n                if ( pMinHeight > b.minHeight ) {\n                    b.minHeight = pMinHeight;\n                }\n                if ( pMaxWidth < b.maxWidth ) {\n                    b.maxWidth = pMaxWidth;\n                }\n                if ( pMaxHeight < b.maxHeight ) {\n                    b.maxHeight = pMaxHeight;\n                }\n            }\n            this._vBoundaries = b;\n        },\n\n        _updateCache: function( data ) {\n            this.offset = this.helper.offset();\n            if ( this._isNumber( data.left ) ) {\n                this.position.left = data.left;\n            }\n            if ( this._isNumber( data.top ) ) {\n                this.position.top = data.top;\n            }\n            if ( this._isNumber( data.height ) ) {\n                this.size.height = data.height;\n            }\n            if ( this._isNumber( data.width ) ) {\n                this.size.width = data.width;\n            }\n        },\n\n        _updateRatio: function( data ) {\n\n            var cpos = this.position,\n                csize = this.size,\n                a = this.axis;\n\n            if ( this._isNumber( data.height ) ) {\n                data.width = ( data.height * this.aspectRatio );\n            } else if ( this._isNumber( data.width ) ) {\n                data.height = ( data.width / this.aspectRatio );\n            }\n\n            if ( a === \"sw\" ) {\n                data.left = cpos.left + ( csize.width - data.width );\n                data.top = null;\n            }\n            if ( a === \"nw\" ) {\n                data.top = cpos.top + ( csize.height - data.height );\n                data.left = cpos.left + ( csize.width - data.width );\n            }\n\n            return data;\n        },\n\n        _respectSize: function( data ) {\n\n            var o = this._vBoundaries,\n                a = this.axis,\n                ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),\n                ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),\n                isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),\n                isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),\n                dw = this.originalPosition.left + this.originalSize.width,\n                dh = this.originalPosition.top + this.originalSize.height,\n                cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );\n            if ( isminw ) {\n                data.width = o.minWidth;\n            }\n            if ( isminh ) {\n                data.height = o.minHeight;\n            }\n            if ( ismaxw ) {\n                data.width = o.maxWidth;\n            }\n            if ( ismaxh ) {\n                data.height = o.maxHeight;\n            }\n\n            if ( isminw && cw ) {\n                data.left = dw - o.minWidth;\n            }\n            if ( ismaxw && cw ) {\n                data.left = dw - o.maxWidth;\n            }\n            if ( isminh && ch ) {\n                data.top = dh - o.minHeight;\n            }\n            if ( ismaxh && ch ) {\n                data.top = dh - o.maxHeight;\n            }\n\n            // Fixing jump error on top/left - bug #2330\n            if ( !data.width && !data.height && !data.left && data.top ) {\n                data.top = null;\n            } else if ( !data.width && !data.height && !data.top && data.left ) {\n                data.left = null;\n            }\n\n            return data;\n        },\n\n        _getPaddingPlusBorderDimensions: function( element ) {\n            var i = 0,\n                widths = [],\n                borders = [\n                    element.css( \"borderTopWidth\" ),\n                    element.css( \"borderRightWidth\" ),\n                    element.css( \"borderBottomWidth\" ),\n                    element.css( \"borderLeftWidth\" )\n                ],\n                paddings = [\n                    element.css( \"paddingTop\" ),\n                    element.css( \"paddingRight\" ),\n                    element.css( \"paddingBottom\" ),\n                    element.css( \"paddingLeft\" )\n                ];\n\n            for ( ; i < 4; i++ ) {\n                widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );\n                widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );\n            }\n\n            return {\n                height: widths[ 0 ] + widths[ 2 ],\n                width: widths[ 1 ] + widths[ 3 ]\n            };\n        },\n\n        _proportionallyResize: function() {\n\n            if ( !this._proportionallyResizeElements.length ) {\n                return;\n            }\n\n            var prel,\n                i = 0,\n                element = this.helper || this.element;\n\n            for ( ; i < this._proportionallyResizeElements.length; i++ ) {\n\n                prel = this._proportionallyResizeElements[ i ];\n\n                // TODO: Seems like a bug to cache this.outerDimensions\n                // considering that we are in a loop.\n                if ( !this.outerDimensions ) {\n                    this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );\n                }\n\n                prel.css( {\n                    height: ( element.height() - this.outerDimensions.height ) || 0,\n                    width: ( element.width() - this.outerDimensions.width ) || 0\n                } );\n\n            }\n\n        },\n\n        _renderProxy: function() {\n\n            var el = this.element, o = this.options;\n            this.elementOffset = el.offset();\n\n            if ( this._helper ) {\n\n                this.helper = this.helper || $( \"<div></div>\" ).css( { overflow: \"hidden\" } );\n\n                this._addClass( this.helper, this._helper );\n                this.helper.css( {\n                    width: this.element.outerWidth(),\n                    height: this.element.outerHeight(),\n                    position: \"absolute\",\n                    left: this.elementOffset.left + \"px\",\n                    top: this.elementOffset.top + \"px\",\n                    zIndex: ++o.zIndex //TODO: Don't modify option\n                } );\n\n                this.helper\n                    .appendTo( \"body\" )\n                    .disableSelection();\n\n            } else {\n                this.helper = this.element;\n            }\n\n        },\n\n        _change: {\n            e: function( event, dx ) {\n                return { width: this.originalSize.width + dx };\n            },\n            w: function( event, dx ) {\n                var cs = this.originalSize, sp = this.originalPosition;\n                return { left: sp.left + dx, width: cs.width - dx };\n            },\n            n: function( event, dx, dy ) {\n                var cs = this.originalSize, sp = this.originalPosition;\n                return { top: sp.top + dy, height: cs.height - dy };\n            },\n            s: function( event, dx, dy ) {\n                return { height: this.originalSize.height + dy };\n            },\n            se: function( event, dx, dy ) {\n                return $.extend( this._change.s.apply( this, arguments ),\n                    this._change.e.apply( this, [ event, dx, dy ] ) );\n            },\n            sw: function( event, dx, dy ) {\n                return $.extend( this._change.s.apply( this, arguments ),\n                    this._change.w.apply( this, [ event, dx, dy ] ) );\n            },\n            ne: function( event, dx, dy ) {\n                return $.extend( this._change.n.apply( this, arguments ),\n                    this._change.e.apply( this, [ event, dx, dy ] ) );\n            },\n            nw: function( event, dx, dy ) {\n                return $.extend( this._change.n.apply( this, arguments ),\n                    this._change.w.apply( this, [ event, dx, dy ] ) );\n            }\n        },\n\n        _propagate: function( n, event ) {\n            $.ui.plugin.call( this, n, [ event, this.ui() ] );\n            if ( n !== \"resize\" ) {\n                this._trigger( n, event, this.ui() );\n            }\n        },\n\n        plugins: {},\n\n        ui: function() {\n            return {\n                originalElement: this.originalElement,\n                element: this.element,\n                helper: this.helper,\n                position: this.position,\n                size: this.size,\n                originalSize: this.originalSize,\n                originalPosition: this.originalPosition\n            };\n        }\n\n    } );\n\n    /*\n     * Resizable Extensions\n     */\n\n    $.ui.plugin.add( \"resizable\", \"animate\", {\n\n        stop: function( event ) {\n            var that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                pr = that._proportionallyResizeElements,\n                ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),\n                soffseth = ista && that._hasScroll( pr[ 0 ], \"left\" ) ? 0 : that.sizeDiff.height,\n                soffsetw = ista ? 0 : that.sizeDiff.width,\n                style = {\n                    width: ( that.size.width - soffsetw ),\n                    height: ( that.size.height - soffseth )\n                },\n                left = ( parseFloat( that.element.css( \"left\" ) ) +\n                    ( that.position.left - that.originalPosition.left ) ) || null,\n                top = ( parseFloat( that.element.css( \"top\" ) ) +\n                    ( that.position.top - that.originalPosition.top ) ) || null;\n\n            that.element.animate(\n                $.extend( style, top && left ? { top: top, left: left } : {} ), {\n                    duration: o.animateDuration,\n                    easing: o.animateEasing,\n                    step: function() {\n\n                        var data = {\n                            width: parseFloat( that.element.css( \"width\" ) ),\n                            height: parseFloat( that.element.css( \"height\" ) ),\n                            top: parseFloat( that.element.css( \"top\" ) ),\n                            left: parseFloat( that.element.css( \"left\" ) )\n                        };\n\n                        if ( pr && pr.length ) {\n                            $( pr[ 0 ] ).css( { width: data.width, height: data.height } );\n                        }\n\n                        // Propagating resize, and updating values for each animation step\n                        that._updateCache( data );\n                        that._propagate( \"resize\", event );\n\n                    }\n                }\n            );\n        }\n\n    } );\n\n    $.ui.plugin.add( \"resizable\", \"containment\", {\n\n        start: function() {\n            var element, p, co, ch, cw, width, height,\n                that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                el = that.element,\n                oc = o.containment,\n                ce = ( oc instanceof $ ) ?\n                    oc.get( 0 ) :\n                    ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;\n\n            if ( !ce ) {\n                return;\n            }\n\n            that.containerElement = $( ce );\n\n            if ( /document/.test( oc ) || oc === document ) {\n                that.containerOffset = {\n                    left: 0,\n                    top: 0\n                };\n                that.containerPosition = {\n                    left: 0,\n                    top: 0\n                };\n\n                that.parentData = {\n                    element: $( document ),\n                    left: 0,\n                    top: 0,\n                    width: $( document ).width(),\n                    height: $( document ).height() || document.body.parentNode.scrollHeight\n                };\n            } else {\n                element = $( ce );\n                p = [];\n                $( [ \"Top\", \"Right\", \"Left\", \"Bottom\" ] ).each( function( i, name ) {\n                    p[ i ] = that._num( element.css( \"padding\" + name ) );\n                } );\n\n                that.containerOffset = element.offset();\n                that.containerPosition = element.position();\n                that.containerSize = {\n                    height: ( element.innerHeight() - p[ 3 ] ),\n                    width: ( element.innerWidth() - p[ 1 ] )\n                };\n\n                co = that.containerOffset;\n                ch = that.containerSize.height;\n                cw = that.containerSize.width;\n                width = ( that._hasScroll( ce, \"left\" ) ? ce.scrollWidth : cw );\n                height = ( that._hasScroll( ce ) ? ce.scrollHeight : ch );\n\n                that.parentData = {\n                    element: ce,\n                    left: co.left,\n                    top: co.top,\n                    width: width,\n                    height: height\n                };\n            }\n        },\n\n        resize: function( event ) {\n            var woset, hoset, isParent, isOffsetRelative,\n                that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                co = that.containerOffset,\n                cp = that.position,\n                pRatio = that._aspectRatio || event.shiftKey,\n                cop = {\n                    top: 0,\n                    left: 0\n                },\n                ce = that.containerElement,\n                continueResize = true;\n\n            if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( \"position\" ) ) ) {\n                cop = co;\n            }\n\n            if ( cp.left < ( that._helper ? co.left : 0 ) ) {\n                that.size.width = that.size.width +\n                    ( that._helper ?\n                        ( that.position.left - co.left ) :\n                        ( that.position.left - cop.left ) );\n\n                if ( pRatio ) {\n                    that.size.height = that.size.width / that.aspectRatio;\n                    continueResize = false;\n                }\n                that.position.left = o.helper ? co.left : 0;\n            }\n\n            if ( cp.top < ( that._helper ? co.top : 0 ) ) {\n                that.size.height = that.size.height +\n                    ( that._helper ?\n                        ( that.position.top - co.top ) :\n                        that.position.top );\n\n                if ( pRatio ) {\n                    that.size.width = that.size.height * that.aspectRatio;\n                    continueResize = false;\n                }\n                that.position.top = that._helper ? co.top : 0;\n            }\n\n            isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );\n            isOffsetRelative = /relative|absolute/.test( that.containerElement.css( \"position\" ) );\n\n            if ( isParent && isOffsetRelative ) {\n                that.offset.left = that.parentData.left + that.position.left;\n                that.offset.top = that.parentData.top + that.position.top;\n            } else {\n                that.offset.left = that.element.offset().left;\n                that.offset.top = that.element.offset().top;\n            }\n\n            woset = Math.abs( that.sizeDiff.width +\n                ( that._helper ?\n                    that.offset.left - cop.left :\n                    ( that.offset.left - co.left ) ) );\n\n            hoset = Math.abs( that.sizeDiff.height +\n                ( that._helper ?\n                    that.offset.top - cop.top :\n                    ( that.offset.top - co.top ) ) );\n\n            if ( woset + that.size.width >= that.parentData.width ) {\n                that.size.width = that.parentData.width - woset;\n                if ( pRatio ) {\n                    that.size.height = that.size.width / that.aspectRatio;\n                    continueResize = false;\n                }\n            }\n\n            if ( hoset + that.size.height >= that.parentData.height ) {\n                that.size.height = that.parentData.height - hoset;\n                if ( pRatio ) {\n                    that.size.width = that.size.height * that.aspectRatio;\n                    continueResize = false;\n                }\n            }\n\n            if ( !continueResize ) {\n                that.position.left = that.prevPosition.left;\n                that.position.top = that.prevPosition.top;\n                that.size.width = that.prevSize.width;\n                that.size.height = that.prevSize.height;\n            }\n        },\n\n        stop: function() {\n            var that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                co = that.containerOffset,\n                cop = that.containerPosition,\n                ce = that.containerElement,\n                helper = $( that.helper ),\n                ho = helper.offset(),\n                w = helper.outerWidth() - that.sizeDiff.width,\n                h = helper.outerHeight() - that.sizeDiff.height;\n\n            if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( \"position\" ) ) ) {\n                $( this ).css( {\n                    left: ho.left - cop.left - co.left,\n                    width: w,\n                    height: h\n                } );\n            }\n\n            if ( that._helper && !o.animate && ( /static/ ).test( ce.css( \"position\" ) ) ) {\n                $( this ).css( {\n                    left: ho.left - cop.left - co.left,\n                    width: w,\n                    height: h\n                } );\n            }\n        }\n    } );\n\n    $.ui.plugin.add( \"resizable\", \"alsoResize\", {\n\n        start: function() {\n            var that = $( this ).resizable( \"instance\" ),\n                o = that.options;\n\n            $( o.alsoResize ).each( function() {\n                var el = $( this );\n                el.data( \"ui-resizable-alsoresize\", {\n                    width: parseFloat( el.width() ), height: parseFloat( el.height() ),\n                    left: parseFloat( el.css( \"left\" ) ), top: parseFloat( el.css( \"top\" ) )\n                } );\n            } );\n        },\n\n        resize: function( event, ui ) {\n            var that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                os = that.originalSize,\n                op = that.originalPosition,\n                delta = {\n                    height: ( that.size.height - os.height ) || 0,\n                    width: ( that.size.width - os.width ) || 0,\n                    top: ( that.position.top - op.top ) || 0,\n                    left: ( that.position.left - op.left ) || 0\n                };\n\n            $( o.alsoResize ).each( function() {\n                var el = $( this ), start = $( this ).data( \"ui-resizable-alsoresize\" ), style = {},\n                    css = el.parents( ui.originalElement[ 0 ] ).length ?\n                        [ \"width\", \"height\" ] :\n                        [ \"width\", \"height\", \"top\", \"left\" ];\n\n                $.each( css, function( i, prop ) {\n                    var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );\n                    if ( sum && sum >= 0 ) {\n                        style[ prop ] = sum || null;\n                    }\n                } );\n\n                el.css( style );\n            } );\n        },\n\n        stop: function() {\n            $( this ).removeData( \"ui-resizable-alsoresize\" );\n        }\n    } );\n\n    $.ui.plugin.add( \"resizable\", \"ghost\", {\n\n        start: function() {\n\n            var that = $( this ).resizable( \"instance\" ), cs = that.size;\n\n            that.ghost = that.originalElement.clone();\n            that.ghost.css( {\n                opacity: 0.25,\n                display: \"block\",\n                position: \"relative\",\n                height: cs.height,\n                width: cs.width,\n                margin: 0,\n                left: 0,\n                top: 0\n            } );\n\n            that._addClass( that.ghost, \"ui-resizable-ghost\" );\n\n            // DEPRECATED\n            // TODO: remove after 1.12\n            if ( $.uiBackCompat !== false && typeof that.options.ghost === \"string\" ) {\n\n                // Ghost option\n                that.ghost.addClass( this.options.ghost );\n            }\n\n            that.ghost.appendTo( that.helper );\n\n        },\n\n        resize: function() {\n            var that = $( this ).resizable( \"instance\" );\n            if ( that.ghost ) {\n                that.ghost.css( {\n                    position: \"relative\",\n                    height: that.size.height,\n                    width: that.size.width\n                } );\n            }\n        },\n\n        stop: function() {\n            var that = $( this ).resizable( \"instance\" );\n            if ( that.ghost && that.helper ) {\n                that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );\n            }\n        }\n\n    } );\n\n    $.ui.plugin.add( \"resizable\", \"grid\", {\n\n        resize: function() {\n            var outerDimensions,\n                that = $( this ).resizable( \"instance\" ),\n                o = that.options,\n                cs = that.size,\n                os = that.originalSize,\n                op = that.originalPosition,\n                a = that.axis,\n                grid = typeof o.grid === \"number\" ? [ o.grid, o.grid ] : o.grid,\n                gridX = ( grid[ 0 ] || 1 ),\n                gridY = ( grid[ 1 ] || 1 ),\n                ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,\n                oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,\n                newWidth = os.width + ox,\n                newHeight = os.height + oy,\n                isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),\n                isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),\n                isMinWidth = o.minWidth && ( o.minWidth > newWidth ),\n                isMinHeight = o.minHeight && ( o.minHeight > newHeight );\n\n            o.grid = grid;\n\n            if ( isMinWidth ) {\n                newWidth += gridX;\n            }\n            if ( isMinHeight ) {\n                newHeight += gridY;\n            }\n            if ( isMaxWidth ) {\n                newWidth -= gridX;\n            }\n            if ( isMaxHeight ) {\n                newHeight -= gridY;\n            }\n\n            if ( /^(se|s|e)$/.test( a ) ) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n            } else if ( /^(ne)$/.test( a ) ) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n                that.position.top = op.top - oy;\n            } else if ( /^(sw)$/.test( a ) ) {\n                that.size.width = newWidth;\n                that.size.height = newHeight;\n                that.position.left = op.left - ox;\n            } else {\n                if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {\n                    outerDimensions = that._getPaddingPlusBorderDimensions( this );\n                }\n\n                if ( newHeight - gridY > 0 ) {\n                    that.size.height = newHeight;\n                    that.position.top = op.top - oy;\n                } else {\n                    newHeight = gridY - outerDimensions.height;\n                    that.size.height = newHeight;\n                    that.position.top = op.top + os.height - newHeight;\n                }\n                if ( newWidth - gridX > 0 ) {\n                    that.size.width = newWidth;\n                    that.position.left = op.left - ox;\n                } else {\n                    newWidth = gridX - outerDimensions.width;\n                    that.size.width = newWidth;\n                    that.position.left = op.left + os.width - newWidth;\n                }\n            }\n        }\n\n    } );\n\n    return $.ui.resizable;\n\n} );\n","jquery/ui-modules/widgets/mouse.js":"/*!\n * jQuery UI Mouse 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Mouse\n//>>group: Widgets\n//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.\n//>>docs: http://api.jqueryui.com/mouse/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../ie\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    var mouseHandled = false;\n    $( document ).on( \"mouseup\", function() {\n        mouseHandled = false;\n    } );\n\n    return $.widget( \"ui.mouse\", {\n        version: \"1.13.2\",\n        options: {\n            cancel: \"input, textarea, button, select, option\",\n            distance: 1,\n            delay: 0\n        },\n        _mouseInit: function() {\n            var that = this;\n\n            this.element\n                .on( \"mousedown.\" + this.widgetName, function( event ) {\n                    return that._mouseDown( event );\n                } )\n                .on( \"click.\" + this.widgetName, function( event ) {\n                    if ( true === $.data( event.target, that.widgetName + \".preventClickEvent\" ) ) {\n                        $.removeData( event.target, that.widgetName + \".preventClickEvent\" );\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                } );\n\n            this.started = false;\n        },\n\n        // TODO: make sure destroying one instance of mouse doesn't mess with\n        // other instances of mouse\n        _mouseDestroy: function() {\n            this.element.off( \".\" + this.widgetName );\n            if ( this._mouseMoveDelegate ) {\n                this.document\n                    .off( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                    .off( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n            }\n        },\n\n        _mouseDown: function( event ) {\n\n            // don't let more than one widget handle mouseStart\n            if ( mouseHandled ) {\n                return;\n            }\n\n            this._mouseMoved = false;\n\n            // We may have missed mouseup (out of window)\n            if ( this._mouseStarted ) {\n                this._mouseUp( event );\n            }\n\n            this._mouseDownEvent = event;\n\n            var that = this,\n                btnIsLeft = ( event.which === 1 ),\n\n                // event.target.nodeName works around a bug in IE 8 with\n                // disabled inputs (#7620)\n                elIsCancel = ( typeof this.options.cancel === \"string\" && event.target.nodeName ?\n                    $( event.target ).closest( this.options.cancel ).length : false );\n            if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {\n                return true;\n            }\n\n            this.mouseDelayMet = !this.options.delay;\n            if ( !this.mouseDelayMet ) {\n                this._mouseDelayTimer = setTimeout( function() {\n                    that.mouseDelayMet = true;\n                }, this.options.delay );\n            }\n\n            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {\n                this._mouseStarted = ( this._mouseStart( event ) !== false );\n                if ( !this._mouseStarted ) {\n                    event.preventDefault();\n                    return true;\n                }\n            }\n\n            // Click event may never have fired (Gecko & Opera)\n            if ( true === $.data( event.target, this.widgetName + \".preventClickEvent\" ) ) {\n                $.removeData( event.target, this.widgetName + \".preventClickEvent\" );\n            }\n\n            // These delegates are required to keep context\n            this._mouseMoveDelegate = function( event ) {\n                return that._mouseMove( event );\n            };\n            this._mouseUpDelegate = function( event ) {\n                return that._mouseUp( event );\n            };\n\n            this.document\n                .on( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                .on( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n\n            event.preventDefault();\n\n            mouseHandled = true;\n            return true;\n        },\n\n        _mouseMove: function( event ) {\n\n            // Only check for mouseups outside the document if you've moved inside the document\n            // at least once. This prevents the firing of mouseup in the case of IE<9, which will\n            // fire a mousemove event if content is placed under the cursor. See #7778\n            // Support: IE <9\n            if ( this._mouseMoved ) {\n\n                // IE mouseup check - mouseup happened when mouse was out of window\n                if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&\n                    !event.button ) {\n                    return this._mouseUp( event );\n\n                    // Iframe mouseup check - mouseup occurred in another document\n                } else if ( !event.which ) {\n\n                    // Support: Safari <=8 - 9\n                    // Safari sets which to 0 if you press any of the following keys\n                    // during a drag (#14461)\n                    if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||\n                        event.originalEvent.metaKey || event.originalEvent.shiftKey ) {\n                        this.ignoreMissingWhich = true;\n                    } else if ( !this.ignoreMissingWhich ) {\n                        return this._mouseUp( event );\n                    }\n                }\n            }\n\n            if ( event.which || event.button ) {\n                this._mouseMoved = true;\n            }\n\n            if ( this._mouseStarted ) {\n                this._mouseDrag( event );\n                return event.preventDefault();\n            }\n\n            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {\n                this._mouseStarted =\n                    ( this._mouseStart( this._mouseDownEvent, event ) !== false );\n                if ( this._mouseStarted ) {\n                    this._mouseDrag( event );\n                } else {\n                    this._mouseUp( event );\n                }\n            }\n\n            return !this._mouseStarted;\n        },\n\n        _mouseUp: function( event ) {\n            this.document\n                .off( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                .off( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n\n            if ( this._mouseStarted ) {\n                this._mouseStarted = false;\n\n                if ( event.target === this._mouseDownEvent.target ) {\n                    $.data( event.target, this.widgetName + \".preventClickEvent\", true );\n                }\n\n                this._mouseStop( event );\n            }\n\n            if ( this._mouseDelayTimer ) {\n                clearTimeout( this._mouseDelayTimer );\n                delete this._mouseDelayTimer;\n            }\n\n            this.ignoreMissingWhich = false;\n            mouseHandled = false;\n            event.preventDefault();\n        },\n\n        _mouseDistanceMet: function( event ) {\n            return ( Math.max(\n                    Math.abs( this._mouseDownEvent.pageX - event.pageX ),\n                    Math.abs( this._mouseDownEvent.pageY - event.pageY )\n                ) >= this.options.distance\n            );\n        },\n\n        _mouseDelayMet: function( /* event */ ) {\n            return this.mouseDelayMet;\n        },\n\n        // These are placeholder methods, to be overriden by extending plugin\n        _mouseStart: function( /* event */ ) {},\n        _mouseDrag: function( /* event */ ) {},\n        _mouseStop: function( /* event */ ) {},\n        _mouseCapture: function( /* event */ ) {\n            return true;\n        }\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-transfer.js":"/*!\n * jQuery UI Effects Transfer 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Transfer Effect\n//>>group: Effects\n//>>description: Displays a transfer effect from one element to another.\n//>>docs: http://api.jqueryui.com/transfer-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    var effect;\n    if ( $.uiBackCompat !== false ) {\n        effect = $.effects.define( \"transfer\", function( options, done ) {\n            $( this ).transfer( options, done );\n        } );\n    }\n    return effect;\n\n} );\n","jquery/ui-modules/effects/effect-shake.js":"/*!\n * jQuery UI Effects Shake 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Shake Effect\n//>>group: Effects\n//>>description: Shakes an element horizontally or vertically n times.\n//>>docs: http://api.jqueryui.com/shake-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"shake\", function( options, done ) {\n\n        var i = 1,\n            element = $( this ),\n            direction = options.direction || \"left\",\n            distance = options.distance || 20,\n            times = options.times || 3,\n            anims = times * 2 + 1,\n            speed = Math.round( options.duration / anims ),\n            ref = ( direction === \"up\" || direction === \"down\" ) ? \"top\" : \"left\",\n            positiveMotion = ( direction === \"up\" || direction === \"left\" ),\n            animation = {},\n            animation1 = {},\n            animation2 = {},\n\n            queuelen = element.queue().length;\n\n        $.effects.createPlaceholder( element );\n\n        // Animation\n        animation[ ref ] = ( positiveMotion ? \"-=\" : \"+=\" ) + distance;\n        animation1[ ref ] = ( positiveMotion ? \"+=\" : \"-=\" ) + distance * 2;\n        animation2[ ref ] = ( positiveMotion ? \"-=\" : \"+=\" ) + distance * 2;\n\n        // Animate\n        element.animate( animation, speed, options.easing );\n\n        // Shakes\n        for ( ; i < times; i++ ) {\n            element\n                .animate( animation1, speed, options.easing )\n                .animate( animation2, speed, options.easing );\n        }\n\n        element\n            .animate( animation1, speed, options.easing )\n            .animate( animation, speed / 2, options.easing )\n            .queue( done );\n\n        $.effects.unshift( element, queuelen, anims + 1 );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-bounce.js":"/*!\n * jQuery UI Effects Bounce 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Bounce Effect\n//>>group: Effects\n//>>description: Bounces an element horizontally or vertically n times.\n//>>docs: http://api.jqueryui.com/bounce-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"bounce\", function( options, done ) {\n        var upAnim, downAnim, refValue,\n            element = $( this ),\n\n            // Defaults:\n            mode = options.mode,\n            hide = mode === \"hide\",\n            show = mode === \"show\",\n            direction = options.direction || \"up\",\n            distance = options.distance,\n            times = options.times || 5,\n\n            // Number of internal animations\n            anims = times * 2 + ( show || hide ? 1 : 0 ),\n            speed = options.duration / anims,\n            easing = options.easing,\n\n            // Utility:\n            ref = ( direction === \"up\" || direction === \"down\" ) ? \"top\" : \"left\",\n            motion = ( direction === \"up\" || direction === \"left\" ),\n            i = 0,\n\n            queuelen = element.queue().length;\n\n        $.effects.createPlaceholder( element );\n\n        refValue = element.css( ref );\n\n        // Default distance for the BIGGEST bounce is the outer Distance / 3\n        if ( !distance ) {\n            distance = element[ ref === \"top\" ? \"outerHeight\" : \"outerWidth\" ]() / 3;\n        }\n\n        if ( show ) {\n            downAnim = { opacity: 1 };\n            downAnim[ ref ] = refValue;\n\n            // If we are showing, force opacity 0 and set the initial position\n            // then do the \"first\" animation\n            element\n                .css( \"opacity\", 0 )\n                .css( ref, motion ? -distance * 2 : distance * 2 )\n                .animate( downAnim, speed, easing );\n        }\n\n        // Start at the smallest distance if we are hiding\n        if ( hide ) {\n            distance = distance / Math.pow( 2, times - 1 );\n        }\n\n        downAnim = {};\n        downAnim[ ref ] = refValue;\n\n        // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n        for ( ; i < times; i++ ) {\n            upAnim = {};\n            upAnim[ ref ] = ( motion ? \"-=\" : \"+=\" ) + distance;\n\n            element\n                .animate( upAnim, speed, easing )\n                .animate( downAnim, speed, easing );\n\n            distance = hide ? distance * 2 : distance / 2;\n        }\n\n        // Last Bounce when Hiding\n        if ( hide ) {\n            upAnim = { opacity: 0 };\n            upAnim[ ref ] = ( motion ? \"-=\" : \"+=\" ) + distance;\n\n            element.animate( upAnim, speed, easing );\n        }\n\n        element.queue( done );\n\n        $.effects.unshift( element, queuelen, anims + 1 );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-size.js":"/*!\n * jQuery UI Effects Size 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Size Effect\n//>>group: Effects\n//>>description: Resize an element to a specified width and height.\n//>>docs: http://api.jqueryui.com/size-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"size\", function( options, done ) {\n\n        // Create element\n        var baseline, factor, temp,\n            element = $( this ),\n\n            // Copy for children\n            cProps = [ \"fontSize\" ],\n            vProps = [ \"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\" ],\n            hProps = [ \"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\" ],\n\n            // Set options\n            mode = options.mode,\n            restore = mode !== \"effect\",\n            scale = options.scale || \"both\",\n            origin = options.origin || [ \"middle\", \"center\" ],\n            position = element.css( \"position\" ),\n            pos = element.position(),\n            original = $.effects.scaledDimensions( element ),\n            from = options.from || original,\n            to = options.to || $.effects.scaledDimensions( element, 0 );\n\n        $.effects.createPlaceholder( element );\n\n        if ( mode === \"show\" ) {\n            temp = from;\n            from = to;\n            to = temp;\n        }\n\n        // Set scaling factor\n        factor = {\n            from: {\n                y: from.height / original.height,\n                x: from.width / original.width\n            },\n            to: {\n                y: to.height / original.height,\n                x: to.width / original.width\n            }\n        };\n\n        // Scale the css box\n        if ( scale === \"box\" || scale === \"both\" ) {\n\n            // Vertical props scaling\n            if ( factor.from.y !== factor.to.y ) {\n                from = $.effects.setTransition( element, vProps, factor.from.y, from );\n                to = $.effects.setTransition( element, vProps, factor.to.y, to );\n            }\n\n            // Horizontal props scaling\n            if ( factor.from.x !== factor.to.x ) {\n                from = $.effects.setTransition( element, hProps, factor.from.x, from );\n                to = $.effects.setTransition( element, hProps, factor.to.x, to );\n            }\n        }\n\n        // Scale the content\n        if ( scale === \"content\" || scale === \"both\" ) {\n\n            // Vertical props scaling\n            if ( factor.from.y !== factor.to.y ) {\n                from = $.effects.setTransition( element, cProps, factor.from.y, from );\n                to = $.effects.setTransition( element, cProps, factor.to.y, to );\n            }\n        }\n\n        // Adjust the position properties based on the provided origin points\n        if ( origin ) {\n            baseline = $.effects.getBaseline( origin, original );\n            from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;\n            from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;\n            to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;\n            to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;\n        }\n        delete from.outerHeight;\n        delete from.outerWidth;\n        element.css( from );\n\n        // Animate the children if desired\n        if ( scale === \"content\" || scale === \"both\" ) {\n\n            vProps = vProps.concat( [ \"marginTop\", \"marginBottom\" ] ).concat( cProps );\n            hProps = hProps.concat( [ \"marginLeft\", \"marginRight\" ] );\n\n            // Only animate children with width attributes specified\n            // TODO: is this right? should we include anything with css width specified as well\n            element.find( \"*[width]\" ).each( function() {\n                var child = $( this ),\n                    childOriginal = $.effects.scaledDimensions( child ),\n                    childFrom = {\n                        height: childOriginal.height * factor.from.y,\n                        width: childOriginal.width * factor.from.x,\n                        outerHeight: childOriginal.outerHeight * factor.from.y,\n                        outerWidth: childOriginal.outerWidth * factor.from.x\n                    },\n                    childTo = {\n                        height: childOriginal.height * factor.to.y,\n                        width: childOriginal.width * factor.to.x,\n                        outerHeight: childOriginal.height * factor.to.y,\n                        outerWidth: childOriginal.width * factor.to.x\n                    };\n\n                // Vertical props scaling\n                if ( factor.from.y !== factor.to.y ) {\n                    childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );\n                    childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );\n                }\n\n                // Horizontal props scaling\n                if ( factor.from.x !== factor.to.x ) {\n                    childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );\n                    childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );\n                }\n\n                if ( restore ) {\n                    $.effects.saveStyle( child );\n                }\n\n                // Animate children\n                child.css( childFrom );\n                child.animate( childTo, options.duration, options.easing, function() {\n\n                    // Restore children\n                    if ( restore ) {\n                        $.effects.restoreStyle( child );\n                    }\n                } );\n            } );\n        }\n\n        // Animate\n        element.animate( to, {\n            queue: false,\n            duration: options.duration,\n            easing: options.easing,\n            complete: function() {\n\n                var offset = element.offset();\n\n                if ( to.opacity === 0 ) {\n                    element.css( \"opacity\", from.opacity );\n                }\n\n                if ( !restore ) {\n                    element\n                        .css( \"position\", position === \"static\" ? \"relative\" : position )\n                        .offset( offset );\n\n                    // Need to save style here so that automatic style restoration\n                    // doesn't restore to the original styles from before the animation.\n                    $.effects.saveStyle( element );\n                }\n\n                done();\n            }\n        } );\n\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-slide.js":"/*!\n * jQuery UI Effects Slide 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Slide Effect\n//>>group: Effects\n//>>description: Slides an element in and out of the viewport.\n//>>docs: http://api.jqueryui.com/slide-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"slide\", \"show\", function( options, done ) {\n        var startClip, startRef,\n            element = $( this ),\n            map = {\n                up: [ \"bottom\", \"top\" ],\n                down: [ \"top\", \"bottom\" ],\n                left: [ \"right\", \"left\" ],\n                right: [ \"left\", \"right\" ]\n            },\n            mode = options.mode,\n            direction = options.direction || \"left\",\n            ref = ( direction === \"up\" || direction === \"down\" ) ? \"top\" : \"left\",\n            positiveMotion = ( direction === \"up\" || direction === \"left\" ),\n            distance = options.distance ||\n                element[ ref === \"top\" ? \"outerHeight\" : \"outerWidth\" ]( true ),\n            animation = {};\n\n        $.effects.createPlaceholder( element );\n\n        startClip = element.cssClip();\n        startRef = element.position()[ ref ];\n\n        // Define hide animation\n        animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;\n        animation.clip = element.cssClip();\n        animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];\n\n        // Reverse the animation if we're showing\n        if ( mode === \"show\" ) {\n            element.cssClip( animation.clip );\n            element.css( ref, animation[ ref ] );\n            animation.clip = startClip;\n            animation[ ref ] = startRef;\n        }\n\n        // Actually animate\n        element.animate( animation, {\n            queue: false,\n            duration: options.duration,\n            easing: options.easing,\n            complete: done\n        } );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-fold.js":"/*!\n * jQuery UI Effects Fold 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Fold Effect\n//>>group: Effects\n//>>description: Folds an element first horizontally and then vertically.\n//>>docs: http://api.jqueryui.com/fold-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"fold\", \"hide\", function( options, done ) {\n\n        // Create element\n        var element = $( this ),\n            mode = options.mode,\n            show = mode === \"show\",\n            hide = mode === \"hide\",\n            size = options.size || 15,\n            percent = /([0-9]+)%/.exec( size ),\n            horizFirst = !!options.horizFirst,\n            ref = horizFirst ? [ \"right\", \"bottom\" ] : [ \"bottom\", \"right\" ],\n            duration = options.duration / 2,\n\n            placeholder = $.effects.createPlaceholder( element ),\n\n            start = element.cssClip(),\n            animation1 = { clip: $.extend( {}, start ) },\n            animation2 = { clip: $.extend( {}, start ) },\n\n            distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],\n\n            queuelen = element.queue().length;\n\n        if ( percent ) {\n            size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];\n        }\n        animation1.clip[ ref[ 0 ] ] = size;\n        animation2.clip[ ref[ 0 ] ] = size;\n        animation2.clip[ ref[ 1 ] ] = 0;\n\n        if ( show ) {\n            element.cssClip( animation2.clip );\n            if ( placeholder ) {\n                placeholder.css( $.effects.clipToBox( animation2 ) );\n            }\n\n            animation2.clip = start;\n        }\n\n        // Animate\n        element\n            .queue( function( next ) {\n                if ( placeholder ) {\n                    placeholder\n                        .animate( $.effects.clipToBox( animation1 ), duration, options.easing )\n                        .animate( $.effects.clipToBox( animation2 ), duration, options.easing );\n                }\n\n                next();\n            } )\n            .animate( animation1, duration, options.easing )\n            .animate( animation2, duration, options.easing )\n            .queue( done );\n\n        $.effects.unshift( element, queuelen, 4 );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-highlight.js":"/*!\n * jQuery UI Effects Highlight 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Highlight Effect\n//>>group: Effects\n//>>description: Highlights the background of an element in a defined color for a custom duration.\n//>>docs: http://api.jqueryui.com/highlight-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"highlight\", \"show\", function( options, done ) {\n        var element = $( this ),\n            animation = {\n                backgroundColor: element.css( \"backgroundColor\" )\n            };\n\n        if ( options.mode === \"hide\" ) {\n            animation.opacity = 0;\n        }\n\n        $.effects.saveStyle( element );\n\n        element\n            .css( {\n                backgroundImage: \"none\",\n                backgroundColor: options.color || \"#ffff99\"\n            } )\n            .animate( animation, {\n                queue: false,\n                duration: options.duration,\n                easing: options.easing,\n                complete: done\n            } );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-puff.js":"/*!\n * jQuery UI Effects Puff 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Puff Effect\n//>>group: Effects\n//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.\n//>>docs: http://api.jqueryui.com/puff-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\",\n            \"./effect-scale\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"puff\", \"hide\", function( options, done ) {\n        var newOptions = $.extend( true, {}, options, {\n            fade: true,\n            percent: parseInt( options.percent, 10 ) || 150\n        } );\n\n        $.effects.effect.scale.call( this, newOptions, done );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-blind.js":"/*!\n * jQuery UI Effects Blind 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Blind Effect\n//>>group: Effects\n//>>description: Blinds the element.\n//>>docs: http://api.jqueryui.com/blind-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"blind\", \"hide\", function( options, done ) {\n        var map = {\n                up: [ \"bottom\", \"top\" ],\n                vertical: [ \"bottom\", \"top\" ],\n                down: [ \"top\", \"bottom\" ],\n                left: [ \"right\", \"left\" ],\n                horizontal: [ \"right\", \"left\" ],\n                right: [ \"left\", \"right\" ]\n            },\n            element = $( this ),\n            direction = options.direction || \"up\",\n            start = element.cssClip(),\n            animate = { clip: $.extend( {}, start ) },\n            placeholder = $.effects.createPlaceholder( element );\n\n        animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];\n\n        if ( options.mode === \"show\" ) {\n            element.cssClip( animate.clip );\n            if ( placeholder ) {\n                placeholder.css( $.effects.clipToBox( animate ) );\n            }\n\n            animate.clip = start;\n        }\n\n        if ( placeholder ) {\n            placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );\n        }\n\n        element.animate( animate, {\n            queue: false,\n            duration: options.duration,\n            easing: options.easing,\n            complete: done\n        } );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-pulsate.js":"/*!\n * jQuery UI Effects Pulsate 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Pulsate Effect\n//>>group: Effects\n//>>description: Pulsates an element n times by changing the opacity to zero and back.\n//>>docs: http://api.jqueryui.com/pulsate-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"pulsate\", \"show\", function( options, done ) {\n        var element = $( this ),\n            mode = options.mode,\n            show = mode === \"show\",\n            hide = mode === \"hide\",\n            showhide = show || hide,\n\n            // Showing or hiding leaves off the \"last\" animation\n            anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),\n            duration = options.duration / anims,\n            animateTo = 0,\n            i = 1,\n            queuelen = element.queue().length;\n\n        if ( show || !element.is( \":visible\" ) ) {\n            element.css( \"opacity\", 0 ).show();\n            animateTo = 1;\n        }\n\n        // Anims - 1 opacity \"toggles\"\n        for ( ; i < anims; i++ ) {\n            element.animate( { opacity: animateTo }, duration, options.easing );\n            animateTo = 1 - animateTo;\n        }\n\n        element.animate( { opacity: animateTo }, duration, options.easing );\n\n        element.queue( done );\n\n        $.effects.unshift( element, queuelen, anims + 1 );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-fade.js":"/*!\n * jQuery UI Effects Fade 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Fade Effect\n//>>group: Effects\n//>>description: Fades the element.\n//>>docs: http://api.jqueryui.com/fade-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"fade\", \"toggle\", function( options, done ) {\n        var show = options.mode === \"show\";\n\n        $( this )\n            .css( \"opacity\", show ? 0 : 1 )\n            .animate( {\n                opacity: show ? 1 : 0\n            }, {\n                queue: false,\n                duration: options.duration,\n                easing: options.easing,\n                complete: done\n            } );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-drop.js":"/*!\n * jQuery UI Effects Clip 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Clip Effect\n//>>group: Effects\n//>>description: Clips the element on and off like an old TV.\n//>>docs: http://api.jqueryui.com/clip-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"clip\", \"hide\", function( options, done ) {\n        var start,\n            animate = {},\n            element = $( this ),\n            direction = options.direction || \"vertical\",\n            both = direction === \"both\",\n            horizontal = both || direction === \"horizontal\",\n            vertical = both || direction === \"vertical\";\n\n        start = element.cssClip();\n        animate.clip = {\n            top: vertical ? ( start.bottom - start.top ) / 2 : start.top,\n            right: horizontal ? ( start.right - start.left ) / 2 : start.right,\n            bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,\n            left: horizontal ? ( start.right - start.left ) / 2 : start.left\n        };\n\n        $.effects.createPlaceholder( element );\n\n        if ( options.mode === \"show\" ) {\n            element.cssClip( animate.clip );\n            animate.clip = start;\n        }\n\n        element.animate( animate, {\n            queue: false,\n            duration: options.duration,\n            easing: options.easing,\n            complete: done\n        } );\n\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-clip.js":"/*!\n * jQuery UI Effects Clip 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Clip Effect\n//>>group: Effects\n//>>description: Clips the element on and off like an old TV.\n//>>docs: http://api.jqueryui.com/clip-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"clip\", \"hide\", function( options, done ) {\n        var start,\n            animate = {},\n            element = $( this ),\n            direction = options.direction || \"vertical\",\n            both = direction === \"both\",\n            horizontal = both || direction === \"horizontal\",\n            vertical = both || direction === \"vertical\";\n\n        start = element.cssClip();\n        animate.clip = {\n            top: vertical ? ( start.bottom - start.top ) / 2 : start.top,\n            right: horizontal ? ( start.right - start.left ) / 2 : start.right,\n            bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,\n            left: horizontal ? ( start.right - start.left ) / 2 : start.left\n        };\n\n        $.effects.createPlaceholder( element );\n\n        if ( options.mode === \"show\" ) {\n            element.cssClip( animate.clip );\n            animate.clip = start;\n        }\n\n        element.animate( animate, {\n            queue: false,\n            duration: options.duration,\n            easing: options.easing,\n            complete: done\n        } );\n\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-scale.js":"/*!\n * jQuery UI Effects Scale 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Scale Effect\n//>>group: Effects\n//>>description: Grows or shrinks an element and its content.\n//>>docs: http://api.jqueryui.com/scale-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\",\n            \"./effect-size\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"scale\", function( options, done ) {\n\n        // Create element\n        var el = $( this ),\n            mode = options.mode,\n            percent = parseInt( options.percent, 10 ) ||\n                ( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== \"effect\" ? 0 : 100 ) ),\n\n            newOptions = $.extend( true, {\n                from: $.effects.scaledDimensions( el ),\n                to: $.effects.scaledDimensions( el, percent, options.direction || \"both\" ),\n                origin: options.origin || [ \"middle\", \"center\" ]\n            }, options );\n\n        // Fade option to support puff\n        if ( options.fade ) {\n            newOptions.from.opacity = 1;\n            newOptions.to.opacity = 0;\n        }\n\n        $.effects.effect.size.call( this, newOptions, done );\n    } );\n\n} );\n","jquery/ui-modules/effects/effect-explode.js":"/*!\n * jQuery UI Effects Explode 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Explode Effect\n//>>group: Effects\n/* eslint-disable max-len */\n//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.\n/* eslint-enable max-len */\n//>>docs: http://api.jqueryui.com/explode-effect/\n//>>demos: http://jqueryui.com/effect/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../effect\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.effects.define( \"explode\", \"hide\", function( options, done ) {\n\n        var i, j, left, top, mx, my,\n            rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,\n            cells = rows,\n            element = $( this ),\n            mode = options.mode,\n            show = mode === \"show\",\n\n            // Show and then visibility:hidden the element before calculating offset\n            offset = element.show().css( \"visibility\", \"hidden\" ).offset(),\n\n            // Width and height of a piece\n            width = Math.ceil( element.outerWidth() / cells ),\n            height = Math.ceil( element.outerHeight() / rows ),\n            pieces = [];\n\n        // Children animate complete:\n        function childComplete() {\n            pieces.push( this );\n            if ( pieces.length === rows * cells ) {\n                animComplete();\n            }\n        }\n\n        // Clone the element for each row and cell.\n        for ( i = 0; i < rows; i++ ) { // ===>\n            top = offset.top + i * height;\n            my = i - ( rows - 1 ) / 2;\n\n            for ( j = 0; j < cells; j++ ) { // |||\n                left = offset.left + j * width;\n                mx = j - ( cells - 1 ) / 2;\n\n                // Create a clone of the now hidden main element that will be absolute positioned\n                // within a wrapper div off the -left and -top equal to size of our pieces\n                element\n                    .clone()\n                    .appendTo( \"body\" )\n                    .wrap( \"<div></div>\" )\n                    .css( {\n                        position: \"absolute\",\n                        visibility: \"visible\",\n                        left: -j * width,\n                        top: -i * height\n                    } )\n\n                    // Select the wrapper - make it overflow: hidden and absolute positioned based on\n                    // where the original was located +left and +top equal to the size of pieces\n                    .parent()\n                    .addClass( \"ui-effects-explode\" )\n                    .css( {\n                        position: \"absolute\",\n                        overflow: \"hidden\",\n                        width: width,\n                        height: height,\n                        left: left + ( show ? mx * width : 0 ),\n                        top: top + ( show ? my * height : 0 ),\n                        opacity: show ? 0 : 1\n                    } )\n                    .animate( {\n                        left: left + ( show ? 0 : mx * width ),\n                        top: top + ( show ? 0 : my * height ),\n                        opacity: show ? 1 : 0\n                    }, options.duration || 500, options.easing, childComplete );\n            }\n        }\n\n        function animComplete() {\n            element.css( {\n                visibility: \"visible\"\n            } );\n            $( pieces ).remove();\n            done();\n        }\n    } );\n\n} );\n","jquery/editableMultiselect/js/jquery.editable.js":"/**\n * @file Jeditable - jQuery in place edit plugin\n * @home https://github.com/NicolasCARPi/jquery_jeditable\n * @author Mika Tuupola, Dylan Verheul, Nicolas CARPi\n * @copyright \u00a9 2006 Mika Tuupola, Dylan Verheul, Nicolas CARPi\n * @licence MIT (see LICENCE file)\n * @name Jquery-jeditable\n * @type  jQuery\n *\n * @param {String|Function} target - URL or Function to send edited content to. Can also be 'disable', 'enable', or 'destroy'\n * @param {Object} [options] - Additional options\n * @param {Object} [options.ajaxoptions] - jQuery Ajax options. See https://api.jquery.com/jQuery.ajax/\n * @param {Function} [options.before] - Function to be executed before going into edit mode\n * @param {Function} [options.callback] - function(result, settings, submitdata) Function to run after submitting edited content\n * @param {String} [options.cancel] - Cancel button value, empty means no button\n * @param {String} [options.cancelcssclass] - CSS class to apply to cancel button\n * @param {Number} [options.cols] - Number of columns if using textarea\n * @param {String} [options.cssclass] - CSS class to apply to input form; use 'inherit' to copy from parent\n * @param {String} [options.inputcssclass] - CSS class to apply to input. 'inherit' to copy from parent\n * @param {Function} [options.intercept] - Intercept the returned data so you have a chance to process it before returning it in the page\n * @param {String|Function} [options.data] - Content loaded in the form\n * @param {String} [options.event='click'] - jQuery event such as 'click' or 'dblclick'. See https://api.jquery.com/category/events/\n * @param {String} [options.formid] - Give an id to the form that is produced\n * @param {String|Number} [options.height='auto'] - Height of the element in pixels or 'auto' or 'none'\n * @param {String} [options.id='id'] - POST parameter name of edited div id\n * @param {String} [options.indicator] - Indicator html to show when saving\n * @param {String} [options.label] - Label for the form\n * @param {String} [options.list] - HTML5 attribute for text input. Will suggest from a datalist with id of the list option\n * @param {String|Function} [options.loaddata] - Extra parameters to pass when fetching content before editing\n * @param {String} [options.loadtext='Loading\u2026'] - Text to display while loading external content\n * @param {String} [options.loadtype='GET'] - Request type for loadurl (GET or POST)\n * @param {String} [options.loadurl] - URL to fetch input content before editing\n * @param {Number} [options.max] - Maximum value for number type\n * @param {String} [options.maxlength] - The maximum number of character in the text field\n * @param {String} [options.method] - Method to use to send edited content (POST or PUT)\n * @param {Number} [options.min] - Minimum value for number type\n * @param {Boolean} [options.multiple] - Allow multiple selections in a select input\n * @param {String} [options.name='value'] - POST parameter name of edited content\n * @param {String|Function} [options.onblur='cancel'] - Use 'cancel', 'submit', 'ignore' or function. If function returns false, the form is cancelled.\n * @param {Function} [options.onedit] - function triggered upon edition; will cancel edition if it returns false\n * @param {Function} [options.onerror] - function(settings, original, xhr) { ... } called on error\n * @param {Function} [options.onreset] - function(settings, original) { ... } called before reset\n * @param {Function} [options.onsubmit] - function(settings, original) { ... } called before submit\n * @param {String} [options.pattern] - HTML5 attribute for text or URL input\n * @param {String} [options.placeholder='Click to edit'] - Placeholder text or html to insert when element is empty\n * @param {Number} [options.rows] - number of rows if using textarea\n * @param {Boolean} [options.select] - When true text is selected\n * @param {Function} [options.showfn]- Function that can animate the element when switching to edit mode\n * @param {String} [options.size] - The size of the text field\n * @param {String} [options.sortselectoptions] - Sort the options of a select form\n * @param {Number} [options.step] - Step size for number type\n * @param {String} [options.style] - Style to apply to input form; 'inherit' to copy from parent\n * @param {String} [options.submit] - submit button value, empty means no button\n * @param {String} [options.submitcssclass] - CSS class to apply to submit button\n * @param {Object|Function} [options.submitdata] - Extra parameters to send when submitting edited content. function(revert, settings, submitdata)\n * @param {String} [options.tooltip] - Tooltip text that appears on hover (via title attribute)\n * @param {String} [options.type='text'] - text, textarea, select, email, number, url (or any 3rd party input type)\n * @param {String|Number} [options.width='auto'] - The width of the element in pixels or 'auto' or 'none'\n *\n * @example <caption>Simple usage example:</caption>\n * $(\".editable\").editable(\"save.php\", {\n *     cancel : 'Cancel',\n *     submit : 'Save',\n *     tooltip : \"Click to edit...\",\n * });\n */\n(function($) {\n\n    'use strict';\n\n    // Keyboard accessibility/WAI-ARIA - allow users to navigate to an editable element using TAB/Shift+TAB\n    $.fn.editableAriaShim = function () {\n        this.attr({\n            role: 'button',\n            tabindex: 0\n        });\n        return this; // <-- object chaining.\n    };\n\n    // EDITABLE function\n    $.fn.editable = function(target, options) {\n\n        if ('disable' === target) {\n            $(this).data('disabled.editable', true);\n            return;\n        }\n        if ('enable' === target) {\n            $(this).data('disabled.editable', false);\n            return;\n        }\n        if ('destroy' === target) {\n            $(this)\n                .off($(this).data('event.editable'))\n                .removeData('disabled.editable')\n                .removeData('event.editable');\n            return;\n        }\n        var settings = $.extend({}, $.fn.editable.defaults, {target:target}, options);\n\n        /* setup some functions */\n        var plugin   = $.editable.types[settings.type].plugin || function() { };\n        var submit   = $.editable.types[settings.type].submit || function() { };\n        var buttons  = $.editable.types[settings.type].buttons || $.editable.types.defaults.buttons;\n        var content  = $.editable.types[settings.type].content || $.editable.types.defaults.content;\n        var element  = $.editable.types[settings.type].element || $.editable.types.defaults.element;\n        var reset    = $.editable.types[settings.type].reset || $.editable.types.defaults.reset;\n        var destroy  = $.editable.types[settings.type].destroy || $.editable.types.defaults.destroy;\n        var callback = settings.callback || function() { };\n        var intercept = settings.intercept || function(s) { return s; };\n        var onedit   = settings.onedit   || function() { };\n        var onsubmit = settings.onsubmit || function() { };\n        var onreset  = settings.onreset  || function() { };\n        var onerror  = settings.onerror  || reset;\n        var before   = settings.before || false;\n\n        // TOOLTIP\n        if (settings.tooltip) {\n            $(this).attr('title', settings.tooltip);\n        }\n\n        return this.each(function() {\n\n            /* Save this to self because this changes when scope changes. */\n            var self = this;\n\n            /* Save so it can be later used by $.editable('destroy') */\n            $(this).data('event.editable', settings.event);\n\n            /* If element is empty add something clickable (if requested) */\n            if (!$(this).html().trim()) {\n                $(this).html(settings.placeholder);\n            }\n\n            if ('destroy' === target) {\n                destroy.apply($(this).find('form'), [settings, self]);\n                return;\n            }\n\n            // EVENT IS FIRED\n            $(this).on(settings.event, function(e) {\n\n                /* Abort if element is disabled. */\n                if (true === $(this).data('disabled.editable')) {\n                    return;\n                }\n\n                // do nothing if user press Tab again, just go to next element, not into edit mode\n                if (e.which === 9) {\n                    return;\n                }\n\n                /* Prevent throwing an exception if edit field is clicked again. */\n                if (self.editing) {\n                    return;\n                }\n\n                /* Abort if onedit hook returns false. */\n                if (false === onedit.apply(this, [settings, self, e])) {\n                    return;\n                }\n\n                /* execute the before function if any was specified */\n                if (settings.before && (typeof settings.before === 'function')) {\n                    settings.before(e);\n                } else if (settings.before && !(typeof settings.before === 'function')) {\n                    throw \"The 'before' option needs to be provided as a function!\";\n                }\n\n                /* Prevent default action and bubbling. */\n                e.preventDefault();\n                e.stopPropagation();\n\n                /* Remove tooltip. */\n                if (settings.tooltip) {\n                    $(self).removeAttr('title');\n                }\n\n                /* Remove placeholder text, replace is here because of IE. */\n                if ($(this).html().toLowerCase().replace(/(;|\"|\\/)/g, '') ===\n                    settings.placeholder.toLowerCase().replace(/(;|\"|\\/)/g, '')) {\n                    $(this).html('');\n                }\n\n                self.editing    = true;\n                self.revert     = $(self).text();\n                $(self).html('');\n\n                /* Create the form object. */\n                var form = $('<form />');\n\n                /* Apply css or style or both. */\n                if (settings.cssclass) {\n                    if ('inherit' === settings.cssclass) {\n                        form.attr('class', $(self).attr('class'));\n                    } else {\n                        form.attr('class', settings.cssclass);\n                    }\n                }\n\n                if (settings.style) {\n                    if ('inherit' === settings.style) {\n                        form.attr('style', $(self).attr('style'));\n                        /* IE needs the second line or display won't be inherited. */\n                        form.css('display', $(self).css('display'));\n                    } else {\n                        form.attr('style', settings.style);\n                    }\n                }\n\n                // add a label if it exists\n                if (settings.label) {\n                    form.append('<label>' + settings.label + '</label>');\n                }\n\n                // add an ID to the form\n                if (settings.formid) {\n                    form.attr('id', settings.formid);\n                }\n\n                /* Add main input element to form and store it in input. */\n                var input = element.apply(form, [settings, self]);\n\n                if (settings.inputcssclass) {\n                    if ('inherit' === settings.inputcssclass) {\n                        input.attr('class', $(self).attr('class'));\n                    } else {\n                        input.attr('class', settings.inputcssclass);\n                    }\n                }\n\n                /* Set input content via POST, GET, given data or existing value. */\n                var input_content;\n\n                // timeout function\n                var t;\n                var isSubmitting = false;\n\n                if (settings.loadurl) {\n                    t = self.setTimeout(function() {\n                        input.disabled = true;\n                    }, 100);\n                    $(self).html(settings.loadtext);\n\n                    var loaddata = {};\n                    loaddata[settings.id] = self.id;\n                    if (typeof settings.loaddata === 'function') {\n                        $.extend(loaddata, settings.loaddata.apply(self, [self.revert, settings]));\n                    } else {\n                        $.extend(loaddata, settings.loaddata);\n                    }\n                    $.ajax({\n                        type : settings.loadtype,\n                        url  : settings.loadurl,\n                        data : loaddata,\n                        async: false,\n                        cache : false,\n                        success: function(result) {\n                            self.clearTimeout(t);\n                            input_content = result;\n                            input.disabled = false;\n                        }\n                    });\n                } else if (settings.data) {\n                    input_content = settings.data;\n                    if (typeof settings.data === 'function') {\n                        input_content = settings.data.apply(self, [self.revert, settings]);\n                    }\n                } else {\n                    input_content = self.revert;\n                }\n                content.apply(form, [input_content, settings, self]);\n\n                input.attr('name', settings.name);\n\n                /* adjust the width of the element to account for the margin/padding/border */\n                if (settings.width !== 'none') {\n                    var adj_width = settings.width - (input.outerWidth(true) - settings.width);\n                    input.width(adj_width);\n                }\n\n                /* Add buttons to the form. */\n                buttons.apply(form, [settings, self]);\n\n                /* Add created form to self. */\n                if (settings.showfn && (typeof settings.showfn === 'function')) {\n                    form.hide();\n                }\n\n                // clear the loadtext that we put here before\n                $(self).html('');\n\n                $(self).append(form);\n\n                // execute the showfn\n                if (settings.showfn && (typeof settings.showfn === 'function')) {\n                    settings.showfn(form);\n                }\n\n                /* Attach 3rd party plugin if requested. */\n                plugin.apply(form, [settings, self]);\n\n                /* Focus to first visible form element. */\n                form.find(':input:visible:enabled:first').trigger('focus');\n\n                /* Highlight input contents when requested. */\n                if (settings.select) {\n                    input.trigger('select');\n                }\n\n                /* discard changes if pressing esc */\n                $(this).on('keydown', function(e) {\n                    if (e.which === 27) {\n                        e.preventDefault();\n                        reset.apply(form, [settings, self]);\n                        /* allow shift+enter to submit form (required for textarea) */\n                    } else if (e.which == 13 && e.shiftKey){\n                        e.preventDefault();\n                        form.trigger('submit');\n                    }\n                });\n\n                /* Discard, submit or nothing with changes when clicking outside. */\n                /* Do nothing is usable when navigating with tab. */\n                if ('cancel' === settings.onblur) {\n                    input.on('blur', function(e) {\n                        /* Prevent canceling if submit was clicked. */\n                        t = self.setTimeout(function() {\n                            reset.apply(form, [settings, self]);\n                        }, 500);\n                    });\n                } else if ('submit' === settings.onblur) {\n                    input.on('blur', function(e) {\n                        /* Prevent double submit if submit was clicked. */\n                        t = self.setTimeout(function() {\n                            form.trigger('submit');\n                        }, 200);\n                    });\n                } else if (typeof settings.onblur === 'function') {\n                    input.on('blur', function(e) {\n                        // reset the form if the onblur function returns false\n                        if (false === settings.onblur.apply(self, [input.val(), settings, form])) {\n                            reset.apply(form, [settings, self]);\n                        }\n                    });\n                }\n\n                form.on('submit', function(e) {\n\n                    /* Do no submit. */\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if (isSubmitting) {\n                        // we are already submitting! Stop right here.\n                        return false;\n                    } else {\n                        isSubmitting = true;\n                    }\n\n                    if (t) {\n                        self.clearTimeout(t);\n                    }\n\n                    /* Call before submit hook. */\n                    /* If it returns false abort submitting. */\n                    isSubmitting = false !== onsubmit.apply(form, [settings, self]);\n                    if (isSubmitting) {\n                        /* Custom inputs call before submit hook. */\n                        /* If it returns false abort submitting. */\n                        isSubmitting = false !== submit.apply(form, [settings, self]);\n                        if (isSubmitting) {\n\n                            /* Check if given target is function */\n                            if (typeof settings.target === 'function') {\n                                /* Callback function to handle the target response */\n                                var responseHandler = function(value, complete) {\n                                    isSubmitting = false;\n                                    if (false !== complete) {\n                                        $(self).html(value);\n                                        self.editing = false;\n                                        callback.apply(self, [self.innerText, settings]);\n                                        if (!$(self).html().trim()) {\n                                            $(self).html(settings.placeholder);\n                                        }\n                                    }\n                                };\n                                /* Call the user target function */\n                                var userTarget = settings.target.apply(self, [input.val(), settings, responseHandler]);\n                                /* Handle the target function return for compatibility */\n                                if (false !== userTarget && undefined !== userTarget) {\n                                    responseHandler(userTarget, userTarget);\n                                }\n\n                            } else {\n                                /* Add edited content and id of edited element to POST. */\n                                var submitdata = {};\n                                submitdata[settings.name] = input.val();\n                                submitdata[settings.id] = self.id;\n                                /* Add extra data to be POST:ed. */\n                                if (typeof settings.submitdata === 'function') {\n                                    $.extend(submitdata, settings.submitdata.apply(self, [self.revert, settings, submitdata]));\n                                } else {\n                                    $.extend(submitdata, settings.submitdata);\n                                }\n\n                                /* Quick and dirty PUT support. */\n                                if ('PUT' === settings.method) {\n                                    submitdata._method = 'put';\n                                }\n\n                                // SHOW INDICATOR\n                                $(self).html(settings.indicator);\n\n                                /* Defaults for ajaxoptions. */\n                                var ajaxoptions = {\n                                    type    : 'POST',\n                                    complete: function (xhr, status) {\n                                        isSubmitting = false;\n                                    },\n                                    data    : submitdata,\n                                    dataType: 'html',\n                                    url     : settings.target,\n                                    success : function(result, status) {\n\n                                        // INTERCEPT\n                                        result = intercept.apply(self, [result, status]);\n\n                                        if (ajaxoptions.dataType === 'html') {\n                                            $(self).html(result);\n                                        }\n                                        self.editing = false;\n                                        callback.apply(self, [result, settings, submitdata]);\n                                        if (!$(self).html().trim()) {\n                                            $(self).html(settings.placeholder);\n                                        }\n                                    },\n                                    error   : function(xhr, status, error) {\n                                        onerror.apply(form, [settings, self, xhr]);\n                                    }\n                                };\n\n                                /* Override with what is given in settings.ajaxoptions. */\n                                $.extend(ajaxoptions, settings.ajaxoptions);\n                                $.ajax(ajaxoptions);\n                            }\n                        }\n                    }\n\n                    /* Show tooltip again. */\n                    $(self).attr('title', settings.tooltip);\n                    return false;\n                });\n            });\n\n            // PRIVILEGED METHODS\n\n            // RESET\n            self.reset = function(form) {\n                /* Prevent calling reset twice when blurring. */\n                if (self.editing) {\n                    /* Before reset hook, if it returns false abort resetting. */\n                    if (false !== onreset.apply(form, [settings, self])) {\n                        $(self).text(self.revert);\n                        self.editing   = false;\n                        if (!$(self).html().trim()) {\n                            $(self).html(settings.placeholder);\n                        }\n                        /* Show tooltip again. */\n                        if (settings.tooltip) {\n                            $(self).attr('title', settings.tooltip);\n                        }\n                    }\n                }\n            };\n\n            // DESTROY\n            self.destroy = function(form) {\n                $(self)\n                    .off($(self).data('event.editable'))\n                    .removeData('disabled.editable')\n                    .removeData('event.editable');\n\n                self.clearTimeouts();\n\n                if (self.editing) {\n                    reset.apply(form, [settings, self]);\n                }\n            };\n\n            // CLEARTIMEOUT\n            self.clearTimeout = function(t) {\n                var timeouts = $(self).data('timeouts');\n                clearTimeout(t);\n                if(timeouts) {\n                    var i = timeouts.indexOf(t);\n                    if(i > -1) {\n                        timeouts.splice(i, 1);\n                        if(timeouts.length <= 0) {\n                            $(self).removeData('timeouts');\n                        }\n                    } else {\n                        console.warn('jeditable clearTimeout could not find timeout '+t);\n                    }\n                }\n            };\n\n            // CLEAR ALL TIMEOUTS\n            self.clearTimeouts = function () {\n                var timeouts = $(self).data('timeouts');\n                if(timeouts) {\n                    for(var i = 0, n = timeouts.length; i < n; ++i) {\n                        clearTimeout(timeouts[i]);\n                    }\n                    timeouts.length = 0;\n                    $(self).removeData('timeouts');\n                }\n            };\n\n            // SETTIMEOUT\n            self.setTimeout = function(callback, time) {\n                var timeouts = $(self).data('timeouts');\n                var t = setTimeout(function() {\n                    callback();\n                    self.clearTimeout(t);\n                }, time);\n                if(!timeouts) {\n                    timeouts = [];\n                    $(self).data('timeouts', timeouts);\n                }\n                timeouts.push(t);\n                return t;\n            };\n        });\n    };\n\n    var _supportInType = function (type) {\n        var i = document.createElement('input');\n        i.setAttribute('type', type);\n        return i.type !== 'text' ? type : 'text';\n    };\n\n\n    $.editable = {\n        types: {\n            defaults: {\n                element : function(settings, original) {\n                    var input = $('<input type=\"hidden\"></input>');\n                    $(this).append(input);\n                    return(input);\n                },\n                content : function(string, settings, original) {\n                    $(this).find(':input:first').val(string);\n                },\n                reset : function(settings, original) {\n                    original.reset(this);\n                },\n                destroy: function(settings, original) {\n                    original.destroy(this);\n                },\n                buttons : function(settings, original) {\n                    var form = this;\n                    var submit;\n                    if (settings.submit) {\n                        /* If given html string use that. */\n                        if (settings.submit.match(/>$/)) {\n                            submit = $(settings.submit).on('click', function() {\n                                if (submit.attr('type') !== 'submit') {\n                                    form.trigger('submit');\n                                }\n                            });\n                            /* Otherwise use button with given string as text. */\n                        } else {\n                            submit = $('<button type=\"submit\" />');\n                            submit.html(settings.submit);\n                            if (settings.submitcssclass) {\n                                submit.addClass(settings.submitcssclass);\n                            }\n                        }\n                        $(this).append(submit);\n                    }\n                    if (settings.cancel) {\n                        var cancel;\n                        /* If given html string use that. */\n                        if (settings.cancel.match(/>$/)) {\n                            cancel = $(settings.cancel);\n                            /* otherwise use button with given string as text */\n                        } else {\n                            cancel = $('<button type=\"cancel\" />');\n                            cancel.html(settings.cancel);\n                            if (settings.cancelcssclass) {\n                                cancel.addClass(settings.cancelcssclass);\n                            }\n                        }\n                        $(this).append(cancel);\n\n                        $(cancel).on('click', function(event) {\n                            var reset;\n                            if (typeof $.editable.types[settings.type].reset === 'function') {\n                                reset = $.editable.types[settings.type].reset;\n                            } else {\n                                reset = $.editable.types.defaults.reset;\n                            }\n                            reset.apply(form, [settings, original]);\n                            return false;\n                        });\n                    }\n                }\n            },\n            text: {\n                element : function(settings, original) {\n                    var input = $('<input />').attr({\n                        autocomplete: 'off',\n                        list: settings.list,\n                        maxlength: settings.maxlength,\n                        pattern: settings.pattern,\n                        placeholder: settings.placeholder,\n                        tooltip: settings.tooltip,\n                        type: 'text'\n                    });\n\n                    if (settings.width  !== 'none') {\n                        input.css('width', settings.width);\n                    }\n\n                    if (settings.height !== 'none') {\n                        input.css('height', settings.height);\n                    }\n\n                    if (settings.size) {\n                        input.attr('size', settings.size);\n                    }\n\n                    if (settings.maxlength) {\n                        input.attr('maxlength', settings.maxlength);\n                    }\n\n                    $(this).append(input);\n                    return(input);\n                }\n            },\n\n            // TEXTAREA\n            textarea: {\n                element : function(settings, original) {\n                    var textarea = $('<textarea></textarea>');\n                    if (settings.rows) {\n                        textarea.attr('rows', settings.rows);\n                    } else if (settings.height !== 'none') {\n                        textarea.height(settings.height);\n                    }\n                    if (settings.cols) {\n                        textarea.attr('cols', settings.cols);\n                    } else if (settings.width !== 'none') {\n                        textarea.width(settings.width);\n                    }\n\n                    if (settings.maxlength) {\n                        textarea.attr('maxlength', settings.maxlength);\n                    }\n\n                    $(this).append(textarea);\n                    return(textarea);\n                }\n            },\n\n            // SELECT\n            select: {\n                element : function(settings, original) {\n                    var select = $('<select />');\n\n                    if (settings.multiple) {\n                        select.attr('multiple', 'multiple');\n                    }\n\n                    $(this).append(select);\n                    return(select);\n                },\n                content : function(data, settings, original) {\n                    var json;\n                    // If it is string assume it is json\n                    if (String === data.constructor) {\n                        json = JSON.parse(data);\n                    } else {\n                        // Otherwise assume it is a hash already\n                        json = data;\n                    }\n\n                    // Create tuples for sorting\n                    var tuples = [];\n                    var key;\n\n                    if (Array.isArray(json) && json.every(Array.isArray)) {\n                        // Process list of tuples\n                        tuples = json // JSON already contains list of [key, value]\n                        json = {};\n                        tuples.forEach(function(e) {\n                            json[e[0]] = e[1]; // Recreate json object to comply with following code\n                        });\n                    } else {\n                        // Process object\n                        for (key in json) {\n                            tuples.push([key, json[key]]); // Store: [key, value]\n                        }\n                    }\n\n                    if (settings.sortselectoptions) {\n                        // sort it\n                        tuples.sort(function (a, b) {\n                            a = a[1];\n                            b = b[1];\n                            return a < b ? -1 : (a > b ? 1 : 0);\n                        });\n                    }\n                    // now add the options to our select\n                    var option;\n                    for (var i = 0; i < tuples.length; i++) {\n                        key = tuples[i][0];\n                        var value = tuples[i][1];\n\n                        if (!json.hasOwnProperty(key)) {\n                            continue;\n                        }\n\n                        if (key !== 'selected') {\n                            option = $('<option />').val(key).append(value);\n\n                            // add the selected prop if it's the same as original or if the key is 'selected'\n                            if (json.selected === key || key === String.prototype.trim.call(original.revert == null ? \"\" : original.revert)) {\n                                $(option).prop('selected', 'selected');\n                            }\n\n                            $(this).find('select').append(option);\n                        }\n                    }\n\n                    // submit on change if no submit button defined\n                    if (!settings.submit) {\n                        var form = this;\n                        $(this).find('select').change(function() {\n                            form.trigger('submit');\n                        });\n                    }\n                }\n            },\n\n            // NUMBER\n            number: {\n                element: function (settings, original) {\n                    var input = $('<input />').attr({\n                        maxlength: settings.maxlength,\n                        placeholder: settings.placeholder,\n                        min : settings.min,\n                        max : settings.max,\n                        step: settings.step,\n                        tooltip: settings.tooltip,\n                        type: _supportInType('number')\n                    });\n                    if (settings.width  !== 'none') {\n                        input.css('width', settings.width);\n                    }\n                    $(this).append(input);\n                    return input;\n                }\n            },\n\n            // EMAIL\n            email: {\n                element: function (settings, original) {\n                    var input = $('<input />').attr({\n                        maxlength: settings.maxlength,\n                        placeholder: settings.placeholder,\n                        tooltip: settings.tooltip,\n                        type: _supportInType('email')\n                    });\n                    if (settings.width  !== 'none') {\n                        input.css('width', settings.width);\n                    }\n                    $(this).append(input);\n                    return input;\n                }\n            },\n\n            // URL\n            url: {\n                element: function (settings, original) {\n                    var input = $('<input />').attr({\n                        maxlength: settings.maxlength,\n                        pattern: settings.pattern,\n                        placeholder: settings.placeholder,\n                        tooltip: settings.tooltip,\n                        type: _supportInType('url')\n                    });\n                    if (settings.width  !== 'none') {\n                        input.css('width', settings.width);\n                    }\n                    $(this).append(input);\n                    return input;\n                }\n            }\n        },\n\n        // add new input type\n        addInputType: function(name, input) {\n            $.editable.types[name] = input;\n        }\n    };\n\n    /* Publicly accessible defaults. */\n    $.fn.editable.defaults = {\n        name       : 'value',\n        id         : 'id',\n        type       : 'text',\n        width      : 'auto',\n        height     : 'auto',\n        // Keyboard accessibility - use mouse click OR press any key to enable editing\n        event      : 'click.editable keydown.editable',\n        onblur     : 'cancel',\n        tooltip    : 'Click to edit',\n        loadtype   : 'GET',\n        loadtext   : 'Loading...',\n        placeholder: 'Click to edit',\n        sortselectoptions: false,\n        loaddata   : {},\n        submitdata : {},\n        ajaxoptions: {}\n    };\n\n})(jQuery);\n","jquery/editableMultiselect/js/jquery.multiselect.js":"define([\n    \"jquery\"\n], function($){\n\n    /*\n     * jQuery.multiselect plugin\n     *\n     * Form control: allow select several values from list and add new value(s) to list\n     *\n     * Licensed under the BSD License:\n     *   http://www.opensource.org/licenses/bsd-license\n     *\n     * Version: 0.9.0\n     *\n     * @author Dmitry (dio) Levashov, dio@std42.ru\n     * @example\n     *  html: <select name=\"my-select\" multiple=\"on\"><option .... </select>\n     * js   : $('select[name=\"my-select\"]').multiselect()\n     *  or\n     * var opts = { ... };\n     * $('select[name=\"my-select\"]').multiselect(opts);\n     */\n    $.fn.multiselect = function(opts) {\n        var o = $.extend({\n            mselectHiddenClass: 'mselect-hidden',\n            mselectItemNotEditableClass: 'mselect-list-item-not-editable',\n            mselectItemNotRemovableClass: 'mselect-list-item-not-removable',\n            mselectListClass: 'mselect-list',\n            mselectItemsWrapperClass: 'mselect-items-wrapper',\n            mselectButtonAddClass: 'mselect-button-add',\n            mselectInputContainerClass: 'mselect-input-container',\n            mselectInputClass: 'mselect-input',\n            mselectButtonCancelClass: 'mselect-cancel',\n            mselectButtonSaveClass: 'mselect-save',\n            mselectListItemClass: 'mselect-list-item',\n            mselectItemsWrapperOverflowClass: 'mselect-fixed',\n            mselectDisabledClass: 'mselect-disabled',\n            mselectCheckedClass: 'mselect-checked',\n            layout: '<section class=\"block %mselectListClass%\">'\n                +'<div class=\"block-content\"><div class=\"%mselectItemsWrapperClass%\">'\n                +'%items%'\n                +'</div></div>'\n                +'<footer class=\"block-footer\">'\n                +'<span class=\"action-add %mselectButtonAddClass%\">%addText%</span>'\n                +'</footer>'\n                +'<div class=\"%mselectInputContainerClass%\">'\n                +'<input type=\"text\" class=\"%mselectInputClass%\" title=\"%inputTitle%\"/>'\n                +'<span class=\"%mselectButtonCancelClass%\" title=\"%cancelText%\"></span>'\n                +'<span class=\"%mselectButtonSaveClass%\" title=\"Add\"></span>'\n                +'</div>'\n                +'</section>',\n            item : '<div  class=\"%mselectListItemClass% %mselectDisabledClass% %iseditable% %isremovable%\"><label><input type=\"checkbox\" class=\"%mselectCheckedClass%\" value=\"%value%\" %checked% %disabled% /><span>%label%</span></label>' +\n                '<span class=\"mselect-edit\" title=\"Edit\">Edit</span>' +\n                '<span class=\"mselect-delete\" title=\"Delete\">Delete</span> ' +\n                '</div>',\n            addText: 'Add new value',\n            cancelText: 'Cancel',\n            inputTitle: 'Enter new option',\n            size: 5,\n            keyCodes: {\n                Enter: 13,\n                Esc: 27\n            },\n            toggleAddButton: true,\n            // New option for callback\n            mselectInputSubmitCallback: null,\n            parse : function(v) { return v.split(/\\s*,\\s*/); }\n        }, opts||{});\n\n        return this.filter('select[multiple]:not(.' + o.mselectHiddenClass + ')').each(function() {\n            var select = $(this).addClass(o.mselectHiddenClass).hide(),\n                size = select.attr('size') > 0 ? select.attr('size') : o.size,\n                items = (function() {\n                    var str = '';\n\n                    select.children('option').each(function(i, option) {\n                        option = $(option);\n\n                        str += o.item\n                            .replace(/%value%/gi,  option.val())\n                            .replace(/%checked%/gi, option.prop('selected') ? 'checked' : '')\n                            .replace(/%mselectCheckedClass%/gi, option.prop('selected') ? ''+o.mselectCheckedClass+'' : '')\n                            .replace(/%disabled%/gi, option.prop('disabled') ? 'disabled' : '')\n                            .replace(/%mselectDisabledClass%/gi, option.prop('disabled') ? ''+o.mselectDisabledClass+'' : '')\n                            .replace(/%mselectListItemClass%/gi, o.mselectListItemClass)\n                            .replace(/%iseditable%/gi, option.attr('data-is-editable') ? ''+o.mselectItemNotEditableClass+'' : '')\n                            .replace(/%isremovable%/i, option.attr('data-is-removable') ? ''+o.mselectItemNotRemovableClass+'' : '')\n                            .replace(/%label%/gi,  option.html());\n                    });\n\n                    return str;\n                })(),\n                html = o.layout\n                    .replace(/%items%/gi, items)\n                    .replace(/%mselectListClass%/gi, o.mselectListClass)\n                    .replace(/%mselectButtonAddClass%/gi, o.mselectButtonAddClass)\n                    .replace(/%mselectButtonSaveClass%/gi, o.mselectButtonSaveClass)\n                    .replace(/%mselectButtonCancelClass%/gi, o.mselectButtonCancelClass)\n                    .replace(/%mselectItemsWrapperClass%/gi, o.mselectItemsWrapperClass)\n                    .replace(/%mselectInputContainerClass%/gi, o.mselectInputContainerClass)\n                    .replace(/%mselectInputClass%/gi, o.mselectInputClass)\n                    .replace(/%addText%/gi, o.addText)\n                    .replace(/%cancelText%/gi, o.cancelText)\n                    .replace(/%inputTitle%/gi, o.inputTitle),\n                widget = $(html)\n                    .insertAfter(this)\n                    .on('change.mselectCheck', '[type=checkbox]', function() {\n                        var checkbox = $(this),\n                            index = checkbox.closest('.' + o.mselectListItemClass + '').index();\n\n                        select.find('option').eq(index).prop('selected', !!checkbox.prop('checked'));\n                    }),\n                list = widget.find('.' + o.mselectItemsWrapperClass + ''),\n                buttonAdd = widget.find('.' + o.mselectButtonAddClass + '')\n                    .on('click.mselectAdd', function(e) {\n                        e.preventDefault();\n                        o.toggleAddButton && buttonAdd.hide();\n                        container.show();\n                        input.trigger('focus');\n                        if (input.parents(o.mselectListClass).length) {\n                            list.scrollTop(list.height());\n                        }\n                    }),\n                container = widget.find('.' + o.mselectInputContainerClass + ''),\n                input = container.find('[type=text].' + o.mselectInputClass + '')\n                    .on('blur.mselectReset', function() {\n                        reset();\n                    })\n                    .on('keydown.mselectAddNewOption', function(e) {\n                        var c = e.keyCode;\n\n                        if (c == o.keyCodes.Enter || c == o.keyCodes.Esc) {\n                            e.preventDefault();\n                            c == o.keyCodes.Enter ? append(input.val())  : reset();\n                        }\n                    }),\n                buttonSave = container.find('.' + o.mselectButtonSaveClass + '')\n                    .on('mousedown.mselectSave', function(e) {\n                        append(input.val());\n                    }),\n                buttonCancel = container.find('.' + o.mselectButtonCancelClass + '')\n                    .on('mousedown.mdelectCancel', function(e) {\n                        input.val('');\n                    }),\n                append = function(v) {\n                    // Add ability to define custom handler for adding new values\n                    if ($.isFunction(o.mselectInputSubmitCallback)) {\n                        o.mselectInputSubmitCallback(v, o);\n                        return;\n                    }\n                    // end of callback implementation\n                    $.each(typeof(o.parse) == 'function' ? o.parse(v) : [$.trim(v)], function(i, v) {\n                        var item;\n\n                        if (v && !select.children('[value=\"' + v + '\"]').length) {\n                            item = $(o.item.replace(/%value%|%label%/gi, v)\n                                .replace(/%mselectDisabledClass%|%iseditable%|%isremovable%/gi,'')\n                                .replace(/%mselectListItemClass%/gi,o.mselectListItemClass))\n                                .find('[type=checkbox]')\n                                .addClass(o.mselectCheckedClass)\n                                .prop('checked', true)\n                                .end();\n\n                            list.children('.' + o.mselectListItemClass + '').length\n                                ? list.children('.' + o.mselectListItemClas ).last().after(item)\n                                : list.prepend(item);\n\n                            select.append('<option value=\"' + v + '\" selected=\"selected\">' + v + '</option>');\n                        }\n                    });\n\n                    reset();\n                    list.scrollTop(list.height());\n                },\n                reset = function() {\n                    var ch = select.children();\n\n                    input.val('');\n                    container.hide();\n                    buttonAdd.show();\n                    list[list.children().length ? 'show' : 'hide']();\n\n                    if (ch.length >= size && !list.hasClass(o.mselectItemsWrapperOverflowClass)) {\n                        list.height(list.children('.' + o.mselectListItemClass)\n                            .first()\n                            .outerHeight(true) * size)\n                            .addClass(o.mselectItemsWrapperOverflowClass);\n                    }\n                };\n            reset();\n        }).end();\n    };\n});\n","jquery/spectrum/spectrum.js":"// Spectrum Colorpicker v1.8.1\n// https://github.com/bgrins/spectrum\n// Author: Brian Grinstead\n// License: MIT\n\n(function (factory) {\n    \"use strict\";\n\n    if (typeof define === 'function' && define.amd) { // AMD\n        define(['jquery'], factory);\n    }\n    else if (typeof exports == \"object\" && typeof module == \"object\") { // CommonJS\n        module.exports = factory(require('jquery'));\n    }\n    else { // Browser\n        factory(jQuery);\n    }\n})(function($, undefined) {\n    \"use strict\";\n\n    var defaultOpts = {\n\n            // Callbacks\n            beforeShow: noop,\n            move: noop,\n            change: noop,\n            show: noop,\n            hide: noop,\n\n            // Options\n            color: false,\n            flat: false,\n            showInput: false,\n            allowEmpty: false,\n            showButtons: true,\n            clickoutFiresChange: true,\n            showInitial: false,\n            showPalette: false,\n            showPaletteOnly: false,\n            hideAfterPaletteSelect: false,\n            togglePaletteOnly: false,\n            showSelectionPalette: true,\n            localStorageKey: false,\n            appendTo: \"body\",\n            maxSelectionSize: 7,\n            cancelText: \"cancel\",\n            chooseText: \"choose\",\n            togglePaletteMoreText: \"more\",\n            togglePaletteLessText: \"less\",\n            clearText: \"Clear Color Selection\",\n            noColorSelectedText: \"No Color Selected\",\n            preferredFormat: false,\n            className: \"\", // Deprecated - use containerClassName and replacerClassName instead.\n            containerClassName: \"\",\n            replacerClassName: \"\",\n            showAlpha: false,\n            theme: \"sp-light\",\n            palette: [[\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]],\n            selectionPalette: [],\n            disabled: false,\n            offset: null\n        },\n        spectrums = [],\n        IE = !!/msie/i.exec( window.navigator.userAgent ),\n        rgbaSupport = (function() {\n            function contains( str, substr ) {\n                return !!~('' + str).indexOf(substr);\n            }\n\n            var elem = document.createElement('div');\n            var style = elem.style;\n            style.cssText = 'background-color:rgba(0,0,0,.5)';\n            return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');\n        })(),\n        replaceInput = [\n            \"<div class='sp-replacer'>\",\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\n            \"<div class='sp-dd'>&#9660;</div>\",\n            \"</div>\"\n        ].join(''),\n        markup = (function () {\n\n            // IE does not support gradients with multiple stops, so we need to simulate\n            //  that for the rainbow slider with 8 divs that each have a single gradient\n            var gradientFix = \"\";\n            if (IE) {\n                for (var i = 1; i <= 6; i++) {\n                    gradientFix += \"<div class='sp-\" + i + \"'></div>\";\n                }\n            }\n\n            return [\n                \"<div class='sp-container sp-hidden'>\",\n                \"<div class='sp-palette-container'>\",\n                \"<div class='sp-palette sp-thumb sp-cf'></div>\",\n                \"<div class='sp-palette-button-container sp-cf'>\",\n                \"<button type='button' class='sp-palette-toggle'></button>\",\n                \"</div>\",\n                \"</div>\",\n                \"<div class='sp-picker-container'>\",\n                \"<div class='sp-top sp-cf'>\",\n                \"<div class='sp-fill'></div>\",\n                \"<div class='sp-top-inner'>\",\n                \"<div class='sp-color'>\",\n                \"<div class='sp-sat'>\",\n                \"<div class='sp-val'>\",\n                \"<div class='sp-dragger'></div>\",\n                \"</div>\",\n                \"</div>\",\n                \"</div>\",\n                \"<div class='sp-clear sp-clear-display'>\",\n                \"</div>\",\n                \"<div class='sp-hue'>\",\n                \"<div class='sp-slider'></div>\",\n                gradientFix,\n                \"</div>\",\n                \"</div>\",\n                \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\n                \"</div>\",\n                \"<div class='sp-input-container sp-cf'>\",\n                \"<input class='sp-input' type='text' spellcheck='false'  />\",\n                \"</div>\",\n                \"<div class='sp-initial sp-thumb sp-cf'></div>\",\n                \"<div class='sp-button-container sp-cf'>\",\n                \"<a class='sp-cancel' href='#'></a>\",\n                \"<button type='button' class='sp-choose'></button>\",\n                \"</div>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\");\n        })();\n\n    function paletteTemplate (p, color, className, opts) {\n        var html = [];\n        for (var i = 0; i < p.length; i++) {\n            var current = p[i];\n            if(current) {\n                var tiny = tinycolor(current);\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\n                c += (tinycolor.equals(color, current)) ? \" sp-thumb-active\" : \"\";\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\n                var swatchStyle = rgbaSupport ? (\"background-color:\" + tiny.toRgbString()) : \"filter:\" + tiny.toFilter();\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\"></span></span>');\n            } else {\n                var cls = 'sp-clear-display';\n                html.push($('<div />')\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\n                        .attr('title', opts.noColorSelectedText)\n                    )\n                    .html()\n                );\n            }\n        }\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\n    }\n\n    function hideAll() {\n        for (var i = 0; i < spectrums.length; i++) {\n            if (spectrums[i]) {\n                spectrums[i].hide();\n            }\n        }\n    }\n\n    function instanceOptions(o, callbackContext) {\n        var opts = $.extend({}, defaultOpts, o);\n        opts.callbacks = {\n            'move': bind(opts.move, callbackContext),\n            'change': bind(opts.change, callbackContext),\n            'show': bind(opts.show, callbackContext),\n            'hide': bind(opts.hide, callbackContext),\n            'beforeShow': bind(opts.beforeShow, callbackContext)\n        };\n\n        return opts;\n    }\n\n    function spectrum(element, o) {\n\n        var opts = instanceOptions(o, element),\n            flat = opts.flat,\n            showSelectionPalette = opts.showSelectionPalette,\n            localStorageKey = opts.localStorageKey,\n            theme = opts.theme,\n            callbacks = opts.callbacks,\n            resize = throttle(reflow, 10),\n            visible = false,\n            isDragging = false,\n            dragWidth = 0,\n            dragHeight = 0,\n            dragHelperHeight = 0,\n            slideHeight = 0,\n            slideWidth = 0,\n            alphaWidth = 0,\n            alphaSlideHelperWidth = 0,\n            slideHelperHeight = 0,\n            currentHue = 0,\n            currentSaturation = 0,\n            currentValue = 0,\n            currentAlpha = 1,\n            palette = [],\n            paletteArray = [],\n            paletteLookup = {},\n            selectionPalette = opts.selectionPalette.slice(0),\n            maxSelectionSize = opts.maxSelectionSize,\n            draggingClass = \"sp-dragging\",\n            shiftMovementDirection = null;\n\n        var doc = element.ownerDocument,\n            body = doc.body,\n            boundElement = $(element),\n            disabled = false,\n            container = $(markup, doc).addClass(theme),\n            pickerContainer = container.find(\".sp-picker-container\"),\n            dragger = container.find(\".sp-color\"),\n            dragHelper = container.find(\".sp-dragger\"),\n            slider = container.find(\".sp-hue\"),\n            slideHelper = container.find(\".sp-slider\"),\n            alphaSliderInner = container.find(\".sp-alpha-inner\"),\n            alphaSlider = container.find(\".sp-alpha\"),\n            alphaSlideHelper = container.find(\".sp-alpha-handle\"),\n            textInput = container.find(\".sp-input\"),\n            paletteContainer = container.find(\".sp-palette\"),\n            initialColorContainer = container.find(\".sp-initial\"),\n            cancelButton = container.find(\".sp-cancel\"),\n            clearButton = container.find(\".sp-clear\"),\n            chooseButton = container.find(\".sp-choose\"),\n            toggleButton = container.find(\".sp-palette-toggle\"),\n            isInput = boundElement.is(\"input\"),\n            isInputTypeColor = isInput && boundElement.attr(\"type\") === \"color\" && inputTypeColorSupport(),\n            shouldReplace = isInput && !flat,\n            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\n            offsetElement = (shouldReplace) ? replacer : boundElement,\n            previewElement = replacer.find(\".sp-preview-inner\"),\n            initialColor = opts.color || (isInput && boundElement.val()),\n            colorOnShow = false,\n            currentPreferredFormat = opts.preferredFormat,\n            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\n            isEmpty = !initialColor,\n            allowEmpty = opts.allowEmpty && !isInputTypeColor;\n\n        function applyOptions() {\n\n            if (opts.showPaletteOnly) {\n                opts.showPalette = true;\n            }\n\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n\n            if (opts.palette) {\n                palette = opts.palette.slice(0);\n                paletteArray = $.isArray(palette[0]) ? palette : [palette];\n                paletteLookup = {};\n                for (var i = 0; i < paletteArray.length; i++) {\n                    for (var j = 0; j < paletteArray[i].length; j++) {\n                        var rgb = tinycolor(paletteArray[i][j]).toRgbString();\n                        paletteLookup[rgb] = true;\n                    }\n                }\n            }\n\n            container.toggleClass(\"sp-flat\", flat);\n            container.toggleClass(\"sp-input-disabled\", !opts.showInput);\n            container.toggleClass(\"sp-alpha-enabled\", opts.showAlpha);\n            container.toggleClass(\"sp-clear-enabled\", allowEmpty);\n            container.toggleClass(\"sp-buttons-disabled\", !opts.showButtons);\n            container.toggleClass(\"sp-palette-buttons-disabled\", !opts.togglePaletteOnly);\n            container.toggleClass(\"sp-palette-disabled\", !opts.showPalette);\n            container.toggleClass(\"sp-palette-only\", opts.showPaletteOnly);\n            container.toggleClass(\"sp-initial-disabled\", !opts.showInitial);\n            container.addClass(opts.className).addClass(opts.containerClassName);\n\n            reflow();\n        }\n\n        function initialize() {\n\n            if (IE) {\n                container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\n            }\n\n            applyOptions();\n\n            if (shouldReplace) {\n                boundElement.after(replacer).hide();\n            }\n\n            if (!allowEmpty) {\n                clearButton.hide();\n            }\n\n            if (flat) {\n                boundElement.after(container).hide();\n            }\n            else {\n\n                var appendTo = opts.appendTo === \"parent\" ? boundElement.parent() : $(opts.appendTo);\n                if (appendTo.length !== 1) {\n                    appendTo = $(\"body\");\n                }\n\n                appendTo.append(container);\n            }\n\n            updateSelectionPaletteFromStorage();\n\n            offsetElement.on(\"click.spectrum touchstart.spectrum\", function (e) {\n                if (!disabled) {\n                    toggle();\n                }\n\n                e.stopPropagation();\n\n                if (!$(e.target).is(\"input\")) {\n                    e.preventDefault();\n                }\n            });\n\n            if(boundElement.is(\":disabled\") || (opts.disabled === true)) {\n                disable();\n            }\n\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\n            container.click(stopPropagation);\n\n            // Handle user typed input\n            textInput.change(setFromTextInput);\n            textInput.on(\"paste\", function () {\n                setTimeout(setFromTextInput, 1);\n            });\n            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\n\n            cancelButton.text(opts.cancelText);\n            cancelButton.on(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                revert();\n                hide();\n            });\n\n            clearButton.attr(\"title\", opts.clearText);\n            clearButton.on(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                isEmpty = true;\n                move();\n\n                if(flat) {\n                    //for the flat style, this is a change event\n                    updateOriginalInput(true);\n                }\n            });\n\n            chooseButton.text(opts.chooseText);\n            chooseButton.on(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n                if (IE && textInput.is(\":focus\")) {\n                    textInput.trigger('change');\n                }\n\n                if (isValid()) {\n                    updateOriginalInput(true);\n                    hide();\n                }\n            });\n\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n            toggleButton.on(\"click.spectrum\", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n                opts.showPaletteOnly = !opts.showPaletteOnly;\n\n                // To make sure the Picker area is drawn on the right, next to the\n                // Palette area (and not below the palette), first move the Palette\n                // to the left to make space for the picker, plus 5px extra.\n                // The 'applyOptions' function puts the whole container back into place\n                // and takes care of the button-text and the sp-palette-only CSS class.\n                if (!opts.showPaletteOnly && !flat) {\n                    container.css('left', '-=' + (pickerContainer.outerWidth(true) + 5));\n                }\n                applyOptions();\n            });\n\n            draggable(alphaSlider, function (dragX, dragY, e) {\n                currentAlpha = (dragX / alphaWidth);\n                isEmpty = false;\n                if (e.shiftKey) {\n                    currentAlpha = Math.round(currentAlpha * 10) / 10;\n                }\n\n                move();\n            }, dragStart, dragStop);\n\n            draggable(slider, function (dragX, dragY) {\n                currentHue = parseFloat(dragY / slideHeight);\n                isEmpty = false;\n                if (!opts.showAlpha) {\n                    currentAlpha = 1;\n                }\n                move();\n            }, dragStart, dragStop);\n\n            draggable(dragger, function (dragX, dragY, e) {\n\n                // shift+drag should snap the movement to either the x or y axis.\n                if (!e.shiftKey) {\n                    shiftMovementDirection = null;\n                }\n                else if (!shiftMovementDirection) {\n                    var oldDragX = currentSaturation * dragWidth;\n                    var oldDragY = dragHeight - (currentValue * dragHeight);\n                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\n\n                    shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\n                }\n\n                var setSaturation = !shiftMovementDirection || shiftMovementDirection === \"x\";\n                var setValue = !shiftMovementDirection || shiftMovementDirection === \"y\";\n\n                if (setSaturation) {\n                    currentSaturation = parseFloat(dragX / dragWidth);\n                }\n                if (setValue) {\n                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\n                }\n\n                isEmpty = false;\n                if (!opts.showAlpha) {\n                    currentAlpha = 1;\n                }\n\n                move();\n\n            }, dragStart, dragStop);\n\n            if (!!initialColor) {\n                set(initialColor);\n\n                // In case color was black - update the preview UI and set the format\n                // since the set function will not run (default color is black).\n                updateUI();\n                currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;\n\n                addColorToSelectionPalette(initialColor);\n            }\n            else {\n                updateUI();\n            }\n\n            if (flat) {\n                show();\n            }\n\n            function paletteElementClick(e) {\n                if (e.data && e.data.ignore) {\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\n                    move();\n                }\n                else {\n                    set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\n                    move();\n\n                    updateOriginalInput(true);\n                    if (opts.hideAfterPaletteSelect) {\n                        hide();\n                    }\n                }\n\n                return false;\n            }\n\n            var paletteEvent = IE ? \"mousedown.spectrum\" : \"click.spectrum touchstart.spectrum\";\n            paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\n            initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\n        }\n\n        function updateSelectionPaletteFromStorage() {\n\n            if (localStorageKey && window.localStorage) {\n\n                // Migrate old palettes over to new format.  May want to remove this eventually.\n                try {\n                    var oldPalette = window.localStorage[localStorageKey].split(\",#\");\n                    if (oldPalette.length > 1) {\n                        delete window.localStorage[localStorageKey];\n                        $.each(oldPalette, function(i, c) {\n                            addColorToSelectionPalette(c);\n                        });\n                    }\n                }\n                catch(e) { }\n\n                try {\n                    selectionPalette = window.localStorage[localStorageKey].split(\";\");\n                }\n                catch (e) { }\n            }\n        }\n\n        function addColorToSelectionPalette(color) {\n            if (showSelectionPalette) {\n                var rgb = tinycolor(color).toRgbString();\n                if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {\n                    selectionPalette.push(rgb);\n                    while(selectionPalette.length > maxSelectionSize) {\n                        selectionPalette.shift();\n                    }\n                }\n\n                if (localStorageKey && window.localStorage) {\n                    try {\n                        window.localStorage[localStorageKey] = selectionPalette.join(\";\");\n                    }\n                    catch(e) { }\n                }\n            }\n        }\n\n        function getUniqueSelectionPalette() {\n            var unique = [];\n            if (opts.showPalette) {\n                for (var i = 0; i < selectionPalette.length; i++) {\n                    var rgb = tinycolor(selectionPalette[i]).toRgbString();\n\n                    if (!paletteLookup[rgb]) {\n                        unique.push(selectionPalette[i]);\n                    }\n                }\n            }\n\n            return unique.reverse().slice(0, opts.maxSelectionSize);\n        }\n\n        function drawPalette() {\n\n            var currentColor = get();\n\n            var html = $.map(paletteArray, function (palette, i) {\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\n            });\n\n            updateSelectionPaletteFromStorage();\n\n            if (selectionPalette) {\n                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\n            }\n\n            paletteContainer.html(html.join(\"\"));\n        }\n\n        function drawInitial() {\n            if (opts.showInitial) {\n                var initial = colorOnShow;\n                var current = get();\n                initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\n            }\n        }\n\n        function dragStart() {\n            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\n                reflow();\n            }\n            isDragging = true;\n            container.addClass(draggingClass);\n            shiftMovementDirection = null;\n            boundElement.trigger('dragstart.spectrum', [ get() ]);\n        }\n\n        function dragStop() {\n            isDragging = false;\n            container.removeClass(draggingClass);\n            boundElement.trigger('dragstop.spectrum', [ get() ]);\n        }\n\n        function setFromTextInput() {\n\n            var value = textInput.val();\n\n            if ((value === null || value === \"\") && allowEmpty) {\n                set(null);\n                move();\n                updateOriginalInput();\n            }\n            else {\n                var tiny = tinycolor(value);\n                if (tiny.isValid()) {\n                    set(tiny);\n                    move();\n                    updateOriginalInput(true);\n                }\n                else {\n                    textInput.addClass(\"sp-validation-error\");\n                }\n            }\n        }\n\n        function toggle() {\n            if (visible) {\n                hide();\n            }\n            else {\n                show();\n            }\n        }\n\n        function show() {\n            var event = $.Event('beforeShow.spectrum');\n\n            if (visible) {\n                reflow();\n                return;\n            }\n\n            boundElement.trigger(event, [ get() ]);\n\n            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\n                return;\n            }\n\n            hideAll();\n            visible = true;\n\n            $(doc).on(\"keydown.spectrum\", onkeydown);\n            $(doc).on(\"click.spectrum\", clickout);\n            $(window).on(\"resize.spectrum\", resize);\n            replacer.addClass(\"sp-active\");\n            container.removeClass(\"sp-hidden\");\n\n            reflow();\n            updateUI();\n\n            colorOnShow = get();\n\n            drawInitial();\n            callbacks.show(colorOnShow);\n            boundElement.trigger('show.spectrum', [ colorOnShow ]);\n        }\n\n        function onkeydown(e) {\n            // Close on ESC\n            if (e.keyCode === 27) {\n                hide();\n            }\n        }\n\n        function clickout(e) {\n            // Return on right click.\n            if (e.button == 2) { return; }\n\n            // If a drag event was happening during the mouseup, don't hide\n            // on click.\n            if (isDragging) { return; }\n\n            if (clickoutFiresChange) {\n                updateOriginalInput(true);\n            }\n            else {\n                revert();\n            }\n            hide();\n        }\n\n        function hide() {\n            // Return if hiding is unnecessary\n            if (!visible || flat) { return; }\n            visible = false;\n\n            $(doc).off(\"keydown.spectrum\", onkeydown);\n            $(doc).off(\"click.spectrum\", clickout);\n            $(window).off(\"resize.spectrum\", resize);\n\n            replacer.removeClass(\"sp-active\");\n            container.addClass(\"sp-hidden\");\n\n            callbacks.hide(get());\n            boundElement.trigger('hide.spectrum', [ get() ]);\n        }\n\n        function revert() {\n            set(colorOnShow, true);\n            updateOriginalInput(true);\n        }\n\n        function set(color, ignoreFormatChange) {\n            if (tinycolor.equals(color, get())) {\n                // Update UI just in case a validation error needs\n                // to be cleared.\n                updateUI();\n                return;\n            }\n\n            var newColor, newHsv;\n            if (!color && allowEmpty) {\n                isEmpty = true;\n            } else {\n                isEmpty = false;\n                newColor = tinycolor(color);\n                newHsv = newColor.toHsv();\n\n                currentHue = (newHsv.h % 360) / 360;\n                currentSaturation = newHsv.s;\n                currentValue = newHsv.v;\n                currentAlpha = newHsv.a;\n            }\n            updateUI();\n\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\n                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\n            }\n        }\n\n        function get(opts) {\n            opts = opts || { };\n\n            if (allowEmpty && isEmpty) {\n                return null;\n            }\n\n            return tinycolor.fromRatio({\n                h: currentHue,\n                s: currentSaturation,\n                v: currentValue,\n                a: Math.round(currentAlpha * 1000) / 1000\n            }, { format: opts.format || currentPreferredFormat });\n        }\n\n        function isValid() {\n            return !textInput.hasClass(\"sp-validation-error\");\n        }\n\n        function move() {\n            updateUI();\n\n            callbacks.move(get());\n            boundElement.trigger('move.spectrum', [ get() ]);\n        }\n\n        function updateUI() {\n\n            textInput.removeClass(\"sp-validation-error\");\n\n            updateHelperLocations();\n\n            // Update dragger background color (gradients take care of saturation and value).\n            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });\n            dragger.css(\"background-color\", flatColor.toHexString());\n\n            // Get a format that alpha will be included in (hex and names ignore alpha)\n            var format = currentPreferredFormat;\n            if (currentAlpha < 1 && !(currentAlpha === 0 && format === \"name\")) {\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\n                    format = \"rgb\";\n                }\n            }\n\n            var realColor = get({ format: format }),\n                displayColor = '';\n\n            //reset background info for preview element\n            previewElement.removeClass(\"sp-clear-display\");\n            previewElement.css('background-color', 'transparent');\n\n            if (!realColor && allowEmpty) {\n                // Update the replaced elements background with icon indicating no color selection\n                previewElement.addClass(\"sp-clear-display\");\n            }\n            else {\n                var realHex = realColor.toHexString(),\n                    realRgb = realColor.toRgbString();\n\n                // Update the replaced elements background color (with actual selected color)\n                if (rgbaSupport || realColor.alpha === 1) {\n                    previewElement.css(\"background-color\", realRgb);\n                }\n                else {\n                    previewElement.css(\"background-color\", \"transparent\");\n                    previewElement.css(\"filter\", realColor.toFilter());\n                }\n\n                if (opts.showAlpha) {\n                    var rgb = realColor.toRgb();\n                    rgb.a = 0;\n                    var realAlpha = tinycolor(rgb).toRgbString();\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\n\n                    if (IE) {\n                        alphaSliderInner.css(\"filter\", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\n                    }\n                    else {\n                        alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\n                        alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\n                        alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\n                        // Use current syntax gradient on unprefixed property.\n                        alphaSliderInner.css(\"background\",\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\n                    }\n                }\n\n                displayColor = realColor.toString(format);\n            }\n\n            // Update the text entry input as it changes happen\n            if (opts.showInput) {\n                textInput.val(displayColor);\n            }\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n\n            drawInitial();\n        }\n\n        function updateHelperLocations() {\n            var s = currentSaturation;\n            var v = currentValue;\n\n            if(allowEmpty && isEmpty) {\n                //if selected color is empty, hide the helpers\n                alphaSlideHelper.hide();\n                slideHelper.hide();\n                dragHelper.hide();\n            }\n            else {\n                //make sure helpers are visible\n                alphaSlideHelper.show();\n                slideHelper.show();\n                dragHelper.show();\n\n                // Where to show the little circle in that displays your current selected color\n                var dragX = s * dragWidth;\n                var dragY = dragHeight - (v * dragHeight);\n                dragX = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\n                );\n                dragY = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\n                );\n                dragHelper.css({\n                    \"top\": dragY + \"px\",\n                    \"left\": dragX + \"px\"\n                });\n\n                var alphaX = currentAlpha * alphaWidth;\n                alphaSlideHelper.css({\n                    \"left\": (alphaX - (alphaSlideHelperWidth / 2)) + \"px\"\n                });\n\n                // Where to show the bar that displays your current selected hue\n                var slideY = (currentHue) * slideHeight;\n                slideHelper.css({\n                    \"top\": (slideY - slideHelperHeight) + \"px\"\n                });\n            }\n        }\n\n        function updateOriginalInput(fireCallback) {\n            var color = get(),\n                displayColor = '',\n                hasChanged = !tinycolor.equals(color, colorOnShow);\n\n            if (color) {\n                displayColor = color.toString(currentPreferredFormat);\n                // Update the selection palette with the current color\n                addColorToSelectionPalette(color);\n            }\n\n            if (isInput) {\n                boundElement.val(displayColor);\n            }\n\n            if (fireCallback && hasChanged) {\n                callbacks.change(color);\n                boundElement.trigger('change', [ color ]);\n            }\n        }\n\n        function reflow() {\n            if (!visible) {\n                return; // Calculations would be useless and wouldn't be reliable anyways\n            }\n            dragWidth = dragger.width();\n            dragHeight = dragger.height();\n            dragHelperHeight = dragHelper.height();\n            slideWidth = slider.width();\n            slideHeight = slider.height();\n            slideHelperHeight = slideHelper.height();\n            alphaWidth = alphaSlider.width();\n            alphaSlideHelperWidth = alphaSlideHelper.width();\n\n            if (!flat) {\n                container.css(\"position\", \"absolute\");\n                if (opts.offset) {\n                    container.offset(opts.offset);\n                } else {\n                    container.offset(getOffset(container, offsetElement));\n                }\n            }\n\n            updateHelperLocations();\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n\n            boundElement.trigger('reflow.spectrum');\n        }\n\n        function destroy() {\n            boundElement.show();\n            offsetElement.off(\"click.spectrum touchstart.spectrum\");\n            container.remove();\n            replacer.remove();\n            spectrums[spect.id] = null;\n        }\n\n        function option(optionName, optionValue) {\n            if (optionName === undefined) {\n                return $.extend({}, opts);\n            }\n            if (optionValue === undefined) {\n                return opts[optionName];\n            }\n\n            opts[optionName] = optionValue;\n\n            if (optionName === \"preferredFormat\") {\n                currentPreferredFormat = opts.preferredFormat;\n            }\n            applyOptions();\n        }\n\n        function enable() {\n            disabled = false;\n            boundElement.attr(\"disabled\", false);\n            offsetElement.removeClass(\"sp-disabled\");\n        }\n\n        function disable() {\n            hide();\n            disabled = true;\n            boundElement.attr(\"disabled\", true);\n            offsetElement.addClass(\"sp-disabled\");\n        }\n\n        function setOffset(coord) {\n            opts.offset = coord;\n            reflow();\n        }\n\n        initialize();\n\n        var spect = {\n            show: show,\n            hide: hide,\n            toggle: toggle,\n            reflow: reflow,\n            option: option,\n            enable: enable,\n            disable: disable,\n            offset: setOffset,\n            set: function (c) {\n                set(c);\n                updateOriginalInput();\n            },\n            get: get,\n            destroy: destroy,\n            container: container\n        };\n\n        spect.id = spectrums.push(spect) - 1;\n\n        return spect;\n    }\n\n    /**\n     * checkOffset - get the offset below/above and left/right element depending on screen position\n     * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\n     */\n    function getOffset(picker, input) {\n        var extraY = 0;\n        var dpWidth = picker.outerWidth();\n        var dpHeight = picker.outerHeight();\n        var inputHeight = input.outerHeight();\n        var doc = picker[0].ownerDocument;\n        var docElem = doc.documentElement;\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\n        var offset = input.offset();\n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n\n        offsetTop += inputHeight;\n\n        offsetLeft -=\n            Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?\n                Math.abs(offsetLeft + dpWidth - viewWidth) : 0);\n\n        offsetTop -=\n            Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?\n                Math.abs(dpHeight + inputHeight - extraY) : extraY));\n\n        return {\n            top: offsetTop,\n            bottom: offset.bottom,\n            left: offsetLeft,\n            right: offset.right,\n            width: offset.width,\n            height: offset.height\n        };\n    }\n\n    /**\n     * noop - do nothing\n     */\n    function noop() {\n\n    }\n\n    /**\n     * stopPropagation - makes the code only doing this a little easier to read in line\n     */\n    function stopPropagation(e) {\n        e.stopPropagation();\n    }\n\n    /**\n     * Create a function bound to a given object\n     * Thanks to underscore.js\n     */\n    function bind(func, obj) {\n        var slice = Array.prototype.slice;\n        var args = slice.call(arguments, 2);\n        return function () {\n            return func.apply(obj, args.concat(slice.call(arguments)));\n        };\n    }\n\n    /**\n     * Lightweight drag helper.  Handles containment within the element, so that\n     * when dragging, the x is within [0,element.width] and y is within [0,element.height]\n     */\n    function draggable(element, onmove, onstart, onstop) {\n        onmove = onmove || function () { };\n        onstart = onstart || function () { };\n        onstop = onstop || function () { };\n        var doc = document;\n        var dragging = false;\n        var offset = {};\n        var maxHeight = 0;\n        var maxWidth = 0;\n        var hasTouch = ('ontouchstart' in window);\n\n        var duringDragEvents = {};\n        duringDragEvents[\"selectstart\"] = prevent;\n        duringDragEvents[\"dragstart\"] = prevent;\n        duringDragEvents[\"touchmove mousemove\"] = move;\n        duringDragEvents[\"touchend mouseup\"] = stop;\n\n        function prevent(e) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n            e.returnValue = false;\n        }\n\n        function move(e) {\n            if (dragging) {\n                // Mouseup happened outside of window\n                if (IE && doc.documentMode < 9 && !e.button) {\n                    return stop();\n                }\n\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\n                var pageX = t0 && t0.pageX || e.pageX;\n                var pageY = t0 && t0.pageY || e.pageY;\n\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\n\n                if (hasTouch) {\n                    // Stop scrolling in iOS\n                    prevent(e);\n                }\n\n                onmove.apply(element, [dragX, dragY, e]);\n            }\n        }\n\n        function start(e) {\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\n\n            if (!rightclick && !dragging) {\n                if (onstart.apply(element, arguments) !== false) {\n                    dragging = true;\n                    maxHeight = $(element).height();\n                    maxWidth = $(element).width();\n                    offset = $(element).offset();\n\n                    $(doc).on(duringDragEvents);\n                    $(doc.body).addClass(\"sp-dragging\");\n\n                    move(e);\n\n                    prevent(e);\n                }\n            }\n        }\n\n        function stop() {\n            if (dragging) {\n                $(doc).off(duringDragEvents);\n                $(doc.body).removeClass(\"sp-dragging\");\n\n                // Wait a tick before notifying observers to allow the click event\n                // to fire in Chrome.\n                setTimeout(function() {\n                    onstop.apply(element, arguments);\n                }, 0);\n            }\n            dragging = false;\n        }\n\n        $(element).on(\"touchstart mousedown\", start);\n    }\n\n    function throttle(func, wait, debounce) {\n        var timeout;\n        return function () {\n            var context = this, args = arguments;\n            var throttler = function () {\n                timeout = null;\n                func.apply(context, args);\n            };\n            if (debounce) clearTimeout(timeout);\n            if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n        };\n    }\n\n    function inputTypeColorSupport() {\n        return $.fn.spectrum.inputTypeColorSupport();\n    }\n\n    /**\n     * Define a jQuery plugin\n     */\n    var dataID = \"spectrum.id\";\n    $.fn.spectrum = function (opts, extra) {\n\n        if (typeof opts == \"string\") {\n\n            var returnValue = this;\n            var args = Array.prototype.slice.call( arguments, 1 );\n\n            this.each(function () {\n                var spect = spectrums[$(this).data(dataID)];\n                if (spect) {\n                    var method = spect[opts];\n                    if (!method) {\n                        throw new Error( \"Spectrum: no such method: '\" + opts + \"'\" );\n                    }\n\n                    if (opts == \"get\") {\n                        returnValue = spect.get();\n                    }\n                    else if (opts == \"container\") {\n                        returnValue = spect.container;\n                    }\n                    else if (opts == \"option\") {\n                        returnValue = spect.option.apply(spect, args);\n                    }\n                    else if (opts == \"destroy\") {\n                        spect.destroy();\n                        $(this).removeData(dataID);\n                    }\n                    else {\n                        method.apply(spect, args);\n                    }\n                }\n            });\n\n            return returnValue;\n        }\n\n        // Initializing a new instance of spectrum\n        return this.spectrum(\"destroy\").each(function () {\n            var options = $.extend({}, $(this).data(), opts);\n            var spect = spectrum(this, options);\n            $(this).data(dataID, spect.id);\n        });\n    };\n\n    $.fn.spectrum.load = true;\n    $.fn.spectrum.loadOpts = {};\n    $.fn.spectrum.draggable = draggable;\n    $.fn.spectrum.defaults = defaultOpts;\n    $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {\n        if (typeof inputTypeColorSupport._cachedResult === \"undefined\") {\n            var colorInput = $(\"<input type='color'/>\")[0]; // if color element is supported, value will default to not null\n            inputTypeColorSupport._cachedResult = colorInput.type === \"color\" && colorInput.value !== \"\";\n        }\n        return inputTypeColorSupport._cachedResult;\n    };\n\n    $.spectrum = { };\n    $.spectrum.localization = { };\n    $.spectrum.palettes = { };\n\n    $.fn.spectrum.processNativeColorInputs = function () {\n        var colorInputs = $(\"input[type=color]\");\n        if (colorInputs.length && !inputTypeColorSupport()) {\n            colorInputs.spectrum({\n                preferredFormat: \"hex6\"\n            });\n        }\n    };\n\n    // TinyColor v1.1.2\n    // https://github.com/bgrins/TinyColor\n    // Brian Grinstead, MIT License\n\n    (function() {\n\n        var trimLeft = /^[\\s,#]+/,\n            trimRight = /\\s+$/,\n            tinyCounter = 0,\n            math = Math,\n            mathRound = math.round,\n            mathMin = math.min,\n            mathMax = math.max,\n            mathRandom = math.random;\n\n        var tinycolor = function(color, opts) {\n\n            color = (color) ? color : '';\n            opts = opts || { };\n\n            // If input is already a tinycolor, return itself\n            if (color instanceof tinycolor) {\n                return color;\n            }\n            // If we are called as a function, call using new instead\n            if (!(this instanceof tinycolor)) {\n                return new tinycolor(color, opts);\n            }\n\n            var rgb = inputToRGB(color);\n            this._originalInput = color;\n            this._r = rgb.r;\n            this._g = rgb.g;\n            this._b = rgb.b;\n            this._a = rgb.a;\n            this._roundA = mathRound(1000 * this._a) / 1000;\n            this._format = opts.format || rgb.format;\n            this._gradientType = opts.gradientType;\n\n            // Don't let the range of [0,255] come back in [0,1].\n            // Potentially lose a little bit of precision here, but will fix issues where\n            // .5 gets interpreted as half of the total, instead of half of 1\n            // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n            if (this._r < 1) { this._r = mathRound(this._r); }\n            if (this._g < 1) { this._g = mathRound(this._g); }\n            if (this._b < 1) { this._b = mathRound(this._b); }\n\n            this._ok = rgb.ok;\n            this._tc_id = tinyCounter++;\n        };\n\n        tinycolor.prototype = {\n            isDark: function() {\n                return this.getBrightness() < 128;\n            },\n            isLight: function() {\n                return !this.isDark();\n            },\n            isValid: function() {\n                return this._ok;\n            },\n            getOriginalInput: function() {\n                return this._originalInput;\n            },\n            getFormat: function() {\n                return this._format;\n            },\n            getAlpha: function() {\n                return this._a;\n            },\n            getBrightness: function() {\n                var rgb = this.toRgb();\n                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n            },\n            setAlpha: function(value) {\n                this._a = boundAlpha(value);\n                this._roundA = mathRound(1000 * this._a) / 1000;\n                return this;\n            },\n            toHsv: function() {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n            },\n            toHsvString: function() {\n                var hsv = rgbToHsv(this._r, this._g, this._b);\n                var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n                return (this._a == 1) ?\n                    \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n                    \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n            },\n            toHsl: function() {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n            },\n            toHslString: function() {\n                var hsl = rgbToHsl(this._r, this._g, this._b);\n                var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n                return (this._a == 1) ?\n                    \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n                    \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n            },\n            toHex: function(allow3Char) {\n                return rgbToHex(this._r, this._g, this._b, allow3Char);\n            },\n            toHexString: function(allow3Char) {\n                return '#' + this.toHex(allow3Char);\n            },\n            toHex8: function() {\n                return rgbaToHex(this._r, this._g, this._b, this._a);\n            },\n            toHex8String: function() {\n                return '#' + this.toHex8();\n            },\n            toRgb: function() {\n                return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n            },\n            toRgbString: function() {\n                return (this._a == 1) ?\n                    \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n                    \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n            },\n            toPercentageRgb: function() {\n                return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n            },\n            toPercentageRgbString: function() {\n                return (this._a == 1) ?\n                    \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n                    \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n            },\n            toName: function() {\n                if (this._a === 0) {\n                    return \"transparent\";\n                }\n\n                if (this._a < 1) {\n                    return false;\n                }\n\n                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n            },\n            toFilter: function(secondColor) {\n                var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\n                var secondHex8String = hex8String;\n                var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n                if (secondColor) {\n                    var s = tinycolor(secondColor);\n                    secondHex8String = s.toHex8String();\n                }\n\n                return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n            },\n            toString: function(format) {\n                var formatSet = !!format;\n                format = format || this._format;\n\n                var formattedString = false;\n                var hasAlpha = this._a < 1 && this._a >= 0;\n                var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\n\n                if (needsAlphaFormat) {\n                    // Special case for \"transparent\", all other non-alpha formats\n                    // will return rgba when there is transparency.\n                    if (format === \"name\" && this._a === 0) {\n                        return this.toName();\n                    }\n                    return this.toRgbString();\n                }\n                if (format === \"rgb\") {\n                    formattedString = this.toRgbString();\n                }\n                if (format === \"prgb\") {\n                    formattedString = this.toPercentageRgbString();\n                }\n                if (format === \"hex\" || format === \"hex6\") {\n                    formattedString = this.toHexString();\n                }\n                if (format === \"hex3\") {\n                    formattedString = this.toHexString(true);\n                }\n                if (format === \"hex8\") {\n                    formattedString = this.toHex8String();\n                }\n                if (format === \"name\") {\n                    formattedString = this.toName();\n                }\n                if (format === \"hsl\") {\n                    formattedString = this.toHslString();\n                }\n                if (format === \"hsv\") {\n                    formattedString = this.toHsvString();\n                }\n\n                return formattedString || this.toHexString();\n            },\n\n            _applyModification: function(fn, args) {\n                var color = fn.apply(null, [this].concat([].slice.call(args)));\n                this._r = color._r;\n                this._g = color._g;\n                this._b = color._b;\n                this.setAlpha(color._a);\n                return this;\n            },\n            lighten: function() {\n                return this._applyModification(lighten, arguments);\n            },\n            brighten: function() {\n                return this._applyModification(brighten, arguments);\n            },\n            darken: function() {\n                return this._applyModification(darken, arguments);\n            },\n            desaturate: function() {\n                return this._applyModification(desaturate, arguments);\n            },\n            saturate: function() {\n                return this._applyModification(saturate, arguments);\n            },\n            greyscale: function() {\n                return this._applyModification(greyscale, arguments);\n            },\n            spin: function() {\n                return this._applyModification(spin, arguments);\n            },\n\n            _applyCombination: function(fn, args) {\n                return fn.apply(null, [this].concat([].slice.call(args)));\n            },\n            analogous: function() {\n                return this._applyCombination(analogous, arguments);\n            },\n            complement: function() {\n                return this._applyCombination(complement, arguments);\n            },\n            monochromatic: function() {\n                return this._applyCombination(monochromatic, arguments);\n            },\n            splitcomplement: function() {\n                return this._applyCombination(splitcomplement, arguments);\n            },\n            triad: function() {\n                return this._applyCombination(triad, arguments);\n            },\n            tetrad: function() {\n                return this._applyCombination(tetrad, arguments);\n            }\n        };\n\n        // If input is an object, force 1 into \"1.0\" to handle ratios properly\n        // String input requires \"1.0\" as input, so 1 will be treated as 1\n        tinycolor.fromRatio = function(color, opts) {\n            if (typeof color == \"object\") {\n                var newColor = {};\n                for (var i in color) {\n                    if (color.hasOwnProperty(i)) {\n                        if (i === \"a\") {\n                            newColor[i] = color[i];\n                        }\n                        else {\n                            newColor[i] = convertToPercentage(color[i]);\n                        }\n                    }\n                }\n                color = newColor;\n            }\n\n            return tinycolor(color, opts);\n        };\n\n        // Given a string or object, convert that input to RGB\n        // Possible string inputs:\n        //\n        //     \"red\"\n        //     \"#f00\" or \"f00\"\n        //     \"#ff0000\" or \"ff0000\"\n        //     \"#ff000000\" or \"ff000000\"\n        //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n        //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n        //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n        //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n        //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n        //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n        //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n        //\n        function inputToRGB(color) {\n\n            var rgb = { r: 0, g: 0, b: 0 };\n            var a = 1;\n            var ok = false;\n            var format = false;\n\n            if (typeof color == \"string\") {\n                color = stringInputToObject(color);\n            }\n\n            if (typeof color == \"object\") {\n                if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\n                    rgb = rgbToRgb(color.r, color.g, color.b);\n                    ok = true;\n                    format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n                }\n                else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\n                    color.s = convertToPercentage(color.s);\n                    color.v = convertToPercentage(color.v);\n                    rgb = hsvToRgb(color.h, color.s, color.v);\n                    ok = true;\n                    format = \"hsv\";\n                }\n                else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\n                    color.s = convertToPercentage(color.s);\n                    color.l = convertToPercentage(color.l);\n                    rgb = hslToRgb(color.h, color.s, color.l);\n                    ok = true;\n                    format = \"hsl\";\n                }\n\n                if (color.hasOwnProperty(\"a\")) {\n                    a = color.a;\n                }\n            }\n\n            a = boundAlpha(a);\n\n            return {\n                ok: ok,\n                format: color.format || format,\n                r: mathMin(255, mathMax(rgb.r, 0)),\n                g: mathMin(255, mathMax(rgb.g, 0)),\n                b: mathMin(255, mathMax(rgb.b, 0)),\n                a: a\n            };\n        }\n\n\n        // Conversion Functions\n        // --------------------\n\n        // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n        // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n        // `rgbToRgb`\n        // Handle bounds / percentage checking to conform to CSS color spec\n        // <http://www.w3.org/TR/css3-color/>\n        // *Assumes:* r, g, b in [0, 255] or [0, 1]\n        // *Returns:* { r, g, b } in [0, 255]\n        function rgbToRgb(r, g, b){\n            return {\n                r: bound01(r, 255) * 255,\n                g: bound01(g, 255) * 255,\n                b: bound01(b, 255) * 255\n            };\n        }\n\n        // `rgbToHsl`\n        // Converts an RGB color value to HSL.\n        // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n        // *Returns:* { h, s, l } in [0,1]\n        function rgbToHsl(r, g, b) {\n\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, l = (max + min) / 2;\n\n            if(max == min) {\n                h = s = 0; // achromatic\n            }\n            else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch(max) {\n                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                    case g: h = (b - r) / d + 2; break;\n                    case b: h = (r - g) / d + 4; break;\n                }\n\n                h /= 6;\n            }\n\n            return { h: h, s: s, l: l };\n        }\n\n        // `hslToRgb`\n        // Converts an HSL color value to RGB.\n        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n        // *Returns:* { r, g, b } in the set [0, 255]\n        function hslToRgb(h, s, l) {\n            var r, g, b;\n\n            h = bound01(h, 360);\n            s = bound01(s, 100);\n            l = bound01(l, 100);\n\n            function hue2rgb(p, q, t) {\n                if(t < 0) t += 1;\n                if(t > 1) t -= 1;\n                if(t < 1/6) return p + (q - p) * 6 * t;\n                if(t < 1/2) return q;\n                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                return p;\n            }\n\n            if(s === 0) {\n                r = g = b = l; // achromatic\n            }\n            else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1/3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1/3);\n            }\n\n            return { r: r * 255, g: g * 255, b: b * 255 };\n        }\n\n        // `rgbToHsv`\n        // Converts an RGB color value to HSV\n        // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n        // *Returns:* { h, s, v } in [0,1]\n        function rgbToHsv(r, g, b) {\n\n            r = bound01(r, 255);\n            g = bound01(g, 255);\n            b = bound01(b, 255);\n\n            var max = mathMax(r, g, b), min = mathMin(r, g, b);\n            var h, s, v = max;\n\n            var d = max - min;\n            s = max === 0 ? 0 : d / max;\n\n            if(max == min) {\n                h = 0; // achromatic\n            }\n            else {\n                switch(max) {\n                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                    case g: h = (b - r) / d + 2; break;\n                    case b: h = (r - g) / d + 4; break;\n                }\n                h /= 6;\n            }\n            return { h: h, s: s, v: v };\n        }\n\n        // `hsvToRgb`\n        // Converts an HSV color value to RGB.\n        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n        // *Returns:* { r, g, b } in the set [0, 255]\n        function hsvToRgb(h, s, v) {\n\n            h = bound01(h, 360) * 6;\n            s = bound01(s, 100);\n            v = bound01(v, 100);\n\n            var i = math.floor(h),\n                f = h - i,\n                p = v * (1 - s),\n                q = v * (1 - f * s),\n                t = v * (1 - (1 - f) * s),\n                mod = i % 6,\n                r = [v, q, p, p, t, v][mod],\n                g = [t, v, v, q, p, p][mod],\n                b = [p, p, t, v, v, q][mod];\n\n            return { r: r * 255, g: g * 255, b: b * 255 };\n        }\n\n        // `rgbToHex`\n        // Converts an RGB color to hex\n        // Assumes r, g, and b are contained in the set [0, 255]\n        // Returns a 3 or 6 character hex\n        function rgbToHex(r, g, b, allow3Char) {\n\n            var hex = [\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n\n            // Return a 3 character hex if possible\n            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n            }\n\n            return hex.join(\"\");\n        }\n        // `rgbaToHex`\n        // Converts an RGBA color plus alpha transparency to hex\n        // Assumes r, g, b and a are contained in the set [0, 255]\n        // Returns an 8 character hex\n        function rgbaToHex(r, g, b, a) {\n\n            var hex = [\n                pad2(convertDecimalToHex(a)),\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n\n            return hex.join(\"\");\n        }\n\n        // `equals`\n        // Can be called with any tinycolor input\n        tinycolor.equals = function (color1, color2) {\n            if (!color1 || !color2) { return false; }\n            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n        };\n        tinycolor.random = function() {\n            return tinycolor.fromRatio({\n                r: mathRandom(),\n                g: mathRandom(),\n                b: mathRandom()\n            });\n        };\n\n\n        // Modification Functions\n        // ----------------------\n        // Thanks to less.js for some of the basics here\n        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n        function desaturate(color, amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n            var hsl = tinycolor(color).toHsl();\n            hsl.s -= amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n\n        function saturate(color, amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n            var hsl = tinycolor(color).toHsl();\n            hsl.s += amount / 100;\n            hsl.s = clamp01(hsl.s);\n            return tinycolor(hsl);\n        }\n\n        function greyscale(color) {\n            return tinycolor(color).desaturate(100);\n        }\n\n        function lighten (color, amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n            var hsl = tinycolor(color).toHsl();\n            hsl.l += amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n\n        function brighten(color, amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n            var rgb = tinycolor(color).toRgb();\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n            return tinycolor(rgb);\n        }\n\n        function darken (color, amount) {\n            amount = (amount === 0) ? 0 : (amount || 10);\n            var hsl = tinycolor(color).toHsl();\n            hsl.l -= amount / 100;\n            hsl.l = clamp01(hsl.l);\n            return tinycolor(hsl);\n        }\n\n        // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n        // Values outside of this range will be wrapped into this range.\n        function spin(color, amount) {\n            var hsl = tinycolor(color).toHsl();\n            var hue = (mathRound(hsl.h) + amount) % 360;\n            hsl.h = hue < 0 ? 360 + hue : hue;\n            return tinycolor(hsl);\n        }\n\n        // Combination Functions\n        // ---------------------\n        // Thanks to jQuery xColor for some of the ideas behind these\n        // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n        function complement(color) {\n            var hsl = tinycolor(color).toHsl();\n            hsl.h = (hsl.h + 180) % 360;\n            return tinycolor(hsl);\n        }\n\n        function triad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n                tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n            ];\n        }\n\n        function tetrad(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n                tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n                tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n            ];\n        }\n\n        function splitcomplement(color) {\n            var hsl = tinycolor(color).toHsl();\n            var h = hsl.h;\n            return [\n                tinycolor(color),\n                tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n                tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n            ];\n        }\n\n        function analogous(color, results, slices) {\n            results = results || 6;\n            slices = slices || 30;\n\n            var hsl = tinycolor(color).toHsl();\n            var part = 360 / slices;\n            var ret = [tinycolor(color)];\n\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n                hsl.h = (hsl.h + part) % 360;\n                ret.push(tinycolor(hsl));\n            }\n            return ret;\n        }\n\n        function monochromatic(color, results) {\n            results = results || 6;\n            var hsv = tinycolor(color).toHsv();\n            var h = hsv.h, s = hsv.s, v = hsv.v;\n            var ret = [];\n            var modification = 1 / results;\n\n            while (results--) {\n                ret.push(tinycolor({ h: h, s: s, v: v}));\n                v = (v + modification) % 1;\n            }\n\n            return ret;\n        }\n\n        // Utility Functions\n        // ---------------------\n\n        tinycolor.mix = function(color1, color2, amount) {\n            amount = (amount === 0) ? 0 : (amount || 50);\n\n            var rgb1 = tinycolor(color1).toRgb();\n            var rgb2 = tinycolor(color2).toRgb();\n\n            var p = amount / 100;\n            var w = p * 2 - 1;\n            var a = rgb2.a - rgb1.a;\n\n            var w1;\n\n            if (w * a == -1) {\n                w1 = w;\n            } else {\n                w1 = (w + a) / (1 + w * a);\n            }\n\n            w1 = (w1 + 1) / 2;\n\n            var w2 = 1 - w1;\n\n            var rgba = {\n                r: rgb2.r * w1 + rgb1.r * w2,\n                g: rgb2.g * w1 + rgb1.g * w2,\n                b: rgb2.b * w1 + rgb1.b * w2,\n                a: rgb2.a * p  + rgb1.a * (1 - p)\n            };\n\n            return tinycolor(rgba);\n        };\n\n\n        // Readability Functions\n        // ---------------------\n        // <http://www.w3.org/TR/AERT#color-contrast>\n\n        // `readability`\n        // Analyze the 2 colors and returns an object with the following properties:\n        //    `brightness`: difference in brightness between the two colors\n        //    `color`: difference in color/hue between the two colors\n        tinycolor.readability = function(color1, color2) {\n            var c1 = tinycolor(color1);\n            var c2 = tinycolor(color2);\n            var rgb1 = c1.toRgb();\n            var rgb2 = c2.toRgb();\n            var brightnessA = c1.getBrightness();\n            var brightnessB = c2.getBrightness();\n            var colorDiff = (\n                Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\n                Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\n                Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\n            );\n\n            return {\n                brightness: Math.abs(brightnessA - brightnessB),\n                color: colorDiff\n            };\n        };\n\n        // `readable`\n        // http://www.w3.org/TR/AERT#color-contrast\n        // Ensure that foreground and background color combinations provide sufficient contrast.\n        // *Example*\n        //    tinycolor.isReadable(\"#000\", \"#111\") => false\n        tinycolor.isReadable = function(color1, color2) {\n            var readability = tinycolor.readability(color1, color2);\n            return readability.brightness > 125 && readability.color > 500;\n        };\n\n        // `mostReadable`\n        // Given a base color and a list of possible foreground or background\n        // colors for that base, returns the most readable color.\n        // *Example*\n        //    tinycolor.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\n        tinycolor.mostReadable = function(baseColor, colorList) {\n            var bestColor = null;\n            var bestScore = 0;\n            var bestIsReadable = false;\n            for (var i=0; i < colorList.length; i++) {\n\n                // We normalize both around the \"acceptable\" breaking point,\n                // but rank brightness constrast higher than hue.\n\n                var readability = tinycolor.readability(baseColor, colorList[i]);\n                var readable = readability.brightness > 125 && readability.color > 500;\n                var score = 3 * (readability.brightness / 125) + (readability.color / 500);\n\n                if ((readable && ! bestIsReadable) ||\n                    (readable && bestIsReadable && score > bestScore) ||\n                    ((! readable) && (! bestIsReadable) && score > bestScore)) {\n                    bestIsReadable = readable;\n                    bestScore = score;\n                    bestColor = tinycolor(colorList[i]);\n                }\n            }\n            return bestColor;\n        };\n\n\n        // Big List of Colors\n        // ------------------\n        // <http://www.w3.org/TR/css3-color/#svg-color>\n        var names = tinycolor.names = {\n            aliceblue: \"f0f8ff\",\n            antiquewhite: \"faebd7\",\n            aqua: \"0ff\",\n            aquamarine: \"7fffd4\",\n            azure: \"f0ffff\",\n            beige: \"f5f5dc\",\n            bisque: \"ffe4c4\",\n            black: \"000\",\n            blanchedalmond: \"ffebcd\",\n            blue: \"00f\",\n            blueviolet: \"8a2be2\",\n            brown: \"a52a2a\",\n            burlywood: \"deb887\",\n            burntsienna: \"ea7e5d\",\n            cadetblue: \"5f9ea0\",\n            chartreuse: \"7fff00\",\n            chocolate: \"d2691e\",\n            coral: \"ff7f50\",\n            cornflowerblue: \"6495ed\",\n            cornsilk: \"fff8dc\",\n            crimson: \"dc143c\",\n            cyan: \"0ff\",\n            darkblue: \"00008b\",\n            darkcyan: \"008b8b\",\n            darkgoldenrod: \"b8860b\",\n            darkgray: \"a9a9a9\",\n            darkgreen: \"006400\",\n            darkgrey: \"a9a9a9\",\n            darkkhaki: \"bdb76b\",\n            darkmagenta: \"8b008b\",\n            darkolivegreen: \"556b2f\",\n            darkorange: \"ff8c00\",\n            darkorchid: \"9932cc\",\n            darkred: \"8b0000\",\n            darksalmon: \"e9967a\",\n            darkseagreen: \"8fbc8f\",\n            darkslateblue: \"483d8b\",\n            darkslategray: \"2f4f4f\",\n            darkslategrey: \"2f4f4f\",\n            darkturquoise: \"00ced1\",\n            darkviolet: \"9400d3\",\n            deeppink: \"ff1493\",\n            deepskyblue: \"00bfff\",\n            dimgray: \"696969\",\n            dimgrey: \"696969\",\n            dodgerblue: \"1e90ff\",\n            firebrick: \"b22222\",\n            floralwhite: \"fffaf0\",\n            forestgreen: \"228b22\",\n            fuchsia: \"f0f\",\n            gainsboro: \"dcdcdc\",\n            ghostwhite: \"f8f8ff\",\n            gold: \"ffd700\",\n            goldenrod: \"daa520\",\n            gray: \"808080\",\n            green: \"008000\",\n            greenyellow: \"adff2f\",\n            grey: \"808080\",\n            honeydew: \"f0fff0\",\n            hotpink: \"ff69b4\",\n            indianred: \"cd5c5c\",\n            indigo: \"4b0082\",\n            ivory: \"fffff0\",\n            khaki: \"f0e68c\",\n            lavender: \"e6e6fa\",\n            lavenderblush: \"fff0f5\",\n            lawngreen: \"7cfc00\",\n            lemonchiffon: \"fffacd\",\n            lightblue: \"add8e6\",\n            lightcoral: \"f08080\",\n            lightcyan: \"e0ffff\",\n            lightgoldenrodyellow: \"fafad2\",\n            lightgray: \"d3d3d3\",\n            lightgreen: \"90ee90\",\n            lightgrey: \"d3d3d3\",\n            lightpink: \"ffb6c1\",\n            lightsalmon: \"ffa07a\",\n            lightseagreen: \"20b2aa\",\n            lightskyblue: \"87cefa\",\n            lightslategray: \"789\",\n            lightslategrey: \"789\",\n            lightsteelblue: \"b0c4de\",\n            lightyellow: \"ffffe0\",\n            lime: \"0f0\",\n            limegreen: \"32cd32\",\n            linen: \"faf0e6\",\n            magenta: \"f0f\",\n            maroon: \"800000\",\n            mediumaquamarine: \"66cdaa\",\n            mediumblue: \"0000cd\",\n            mediumorchid: \"ba55d3\",\n            mediumpurple: \"9370db\",\n            mediumseagreen: \"3cb371\",\n            mediumslateblue: \"7b68ee\",\n            mediumspringgreen: \"00fa9a\",\n            mediumturquoise: \"48d1cc\",\n            mediumvioletred: \"c71585\",\n            midnightblue: \"191970\",\n            mintcream: \"f5fffa\",\n            mistyrose: \"ffe4e1\",\n            moccasin: \"ffe4b5\",\n            navajowhite: \"ffdead\",\n            navy: \"000080\",\n            oldlace: \"fdf5e6\",\n            olive: \"808000\",\n            olivedrab: \"6b8e23\",\n            orange: \"ffa500\",\n            orangered: \"ff4500\",\n            orchid: \"da70d6\",\n            palegoldenrod: \"eee8aa\",\n            palegreen: \"98fb98\",\n            paleturquoise: \"afeeee\",\n            palevioletred: \"db7093\",\n            papayawhip: \"ffefd5\",\n            peachpuff: \"ffdab9\",\n            peru: \"cd853f\",\n            pink: \"ffc0cb\",\n            plum: \"dda0dd\",\n            powderblue: \"b0e0e6\",\n            purple: \"800080\",\n            rebeccapurple: \"663399\",\n            red: \"f00\",\n            rosybrown: \"bc8f8f\",\n            royalblue: \"4169e1\",\n            saddlebrown: \"8b4513\",\n            salmon: \"fa8072\",\n            sandybrown: \"f4a460\",\n            seagreen: \"2e8b57\",\n            seashell: \"fff5ee\",\n            sienna: \"a0522d\",\n            silver: \"c0c0c0\",\n            skyblue: \"87ceeb\",\n            slateblue: \"6a5acd\",\n            slategray: \"708090\",\n            slategrey: \"708090\",\n            snow: \"fffafa\",\n            springgreen: \"00ff7f\",\n            steelblue: \"4682b4\",\n            tan: \"d2b48c\",\n            teal: \"008080\",\n            thistle: \"d8bfd8\",\n            tomato: \"ff6347\",\n            turquoise: \"40e0d0\",\n            violet: \"ee82ee\",\n            wheat: \"f5deb3\",\n            white: \"fff\",\n            whitesmoke: \"f5f5f5\",\n            yellow: \"ff0\",\n            yellowgreen: \"9acd32\"\n        };\n\n        // Make it easy to access colors via `hexNames[hex]`\n        var hexNames = tinycolor.hexNames = flip(names);\n\n\n        // Utilities\n        // ---------\n\n        // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n        function flip(o) {\n            var flipped = { };\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) {\n                    flipped[o[i]] = i;\n                }\n            }\n            return flipped;\n        }\n\n        // Return a valid alpha value [0,1] with all invalid values being set to 1\n        function boundAlpha(a) {\n            a = parseFloat(a);\n\n            if (isNaN(a) || a < 0 || a > 1) {\n                a = 1;\n            }\n\n            return a;\n        }\n\n        // Take input from [0, n] and return it as [0, 1]\n        function bound01(n, max) {\n            if (isOnePointZero(n)) { n = \"100%\"; }\n\n            var processPercent = isPercentage(n);\n            n = mathMin(max, mathMax(0, parseFloat(n)));\n\n            // Automatically convert percentage into number\n            if (processPercent) {\n                n = parseInt(n * max, 10) / 100;\n            }\n\n            // Handle floating point rounding errors\n            if ((math.abs(n - max) < 0.000001)) {\n                return 1;\n            }\n\n            // Convert into [0, 1] range if it isn't already\n            return (n % max) / parseFloat(max);\n        }\n\n        // Force a number between 0 and 1\n        function clamp01(val) {\n            return mathMin(1, mathMax(0, val));\n        }\n\n        // Parse a base-16 hex value into a base-10 integer\n        function parseIntFromHex(val) {\n            return parseInt(val, 16);\n        }\n\n        // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n        // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n        function isOnePointZero(n) {\n            return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n        }\n\n        // Check to see if string passed in is a percentage\n        function isPercentage(n) {\n            return typeof n === \"string\" && n.indexOf('%') != -1;\n        }\n\n        // Force a hex value to have 2 characters\n        function pad2(c) {\n            return c.length == 1 ? '0' + c : '' + c;\n        }\n\n        // Replace a decimal with it's percentage value\n        function convertToPercentage(n) {\n            if (n <= 1) {\n                n = (n * 100) + \"%\";\n            }\n\n            return n;\n        }\n\n        // Converts a decimal to a hex value\n        function convertDecimalToHex(d) {\n            return Math.round(parseFloat(d) * 255).toString(16);\n        }\n        // Converts a hex value to a decimal\n        function convertHexToDecimal(h) {\n            return (parseIntFromHex(h) / 255);\n        }\n\n        var matchers = (function() {\n\n            // <http://www.w3.org/TR/css3-values/#integers>\n            var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n            // <http://www.w3.org/TR/css3-values/#number-value>\n            var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n            // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n            var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n            // Actual matching.\n            // Parentheses and commas are optional, but not required.\n            // Whitespace can take the place of commas or opening paren\n            var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n            var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n            return {\n                rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n                rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n                hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n                hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n                hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n                hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n            };\n        })();\n\n        // `stringInputToObject`\n        // Permissive string parsing.  Take in a number of formats, and output an object\n        // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n        function stringInputToObject(color) {\n\n            color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n            var named = false;\n            if (names[color]) {\n                color = names[color];\n                named = true;\n            }\n            else if (color == 'transparent') {\n                return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n            }\n\n            // Try to match string input using regular expressions.\n            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n            // Just return an object and let the conversion functions handle that.\n            // This way the result will be the same whether the tinycolor is initialized with string or object.\n            var match;\n            if ((match = matchers.rgb.exec(color))) {\n                return { r: match[1], g: match[2], b: match[3] };\n            }\n            if ((match = matchers.rgba.exec(color))) {\n                return { r: match[1], g: match[2], b: match[3], a: match[4] };\n            }\n            if ((match = matchers.hsl.exec(color))) {\n                return { h: match[1], s: match[2], l: match[3] };\n            }\n            if ((match = matchers.hsla.exec(color))) {\n                return { h: match[1], s: match[2], l: match[3], a: match[4] };\n            }\n            if ((match = matchers.hsv.exec(color))) {\n                return { h: match[1], s: match[2], v: match[3] };\n            }\n            if ((match = matchers.hsva.exec(color))) {\n                return { h: match[1], s: match[2], v: match[3], a: match[4] };\n            }\n            if ((match = matchers.hex8.exec(color))) {\n                return {\n                    a: convertHexToDecimal(match[1]),\n                    r: parseIntFromHex(match[2]),\n                    g: parseIntFromHex(match[3]),\n                    b: parseIntFromHex(match[4]),\n                    format: named ? \"name\" : \"hex8\"\n                };\n            }\n            if ((match = matchers.hex6.exec(color))) {\n                return {\n                    r: parseIntFromHex(match[1]),\n                    g: parseIntFromHex(match[2]),\n                    b: parseIntFromHex(match[3]),\n                    format: named ? \"name\" : \"hex\"\n                };\n            }\n            if ((match = matchers.hex3.exec(color))) {\n                return {\n                    r: parseIntFromHex(match[1] + '' + match[1]),\n                    g: parseIntFromHex(match[2] + '' + match[2]),\n                    b: parseIntFromHex(match[3] + '' + match[3]),\n                    format: named ? \"name\" : \"hex\"\n                };\n            }\n\n            return false;\n        }\n\n        window.tinycolor = tinycolor;\n    })();\n\n    $(function () {\n        if ($.fn.spectrum.load) {\n            $.fn.spectrum.processNativeColorInputs();\n        }\n    });\n\n});\n","jquery/spectrum/tinycolor.js":"// This file is autogenerated. v1.6.0\n// It's here at this path for backwards compatibility for links to it\n// but the npm package now exports both CJS and ESM.\n// See https://github.com/bgrins/TinyColor/ for instructions.\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());\n})(this, (function () { 'use strict';\n\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n\n        return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n            return typeof obj;\n        } : function (obj) {\n            return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        }, _typeof(obj);\n    }\n\n    // https://github.com/bgrins/TinyColor\n    // Brian Grinstead, MIT License\n\n    var trimLeft = /^\\s+/;\n    var trimRight = /\\s+$/;\n    function tinycolor(color, opts) {\n        color = color ? color : \"\";\n        opts = opts || {};\n\n        // If input is already a tinycolor, return itself\n        if (color instanceof tinycolor) {\n            return color;\n        }\n        // If we are called as a function, call using new instead\n        if (!(this instanceof tinycolor)) {\n            return new tinycolor(color, opts);\n        }\n        var rgb = inputToRGB(color);\n        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n        this._gradientType = opts.gradientType;\n\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this._r < 1) this._r = Math.round(this._r);\n        if (this._g < 1) this._g = Math.round(this._g);\n        if (this._b < 1) this._b = Math.round(this._b);\n        this._ok = rgb.ok;\n    }\n    tinycolor.prototype = {\n        isDark: function isDark() {\n            return this.getBrightness() < 128;\n        },\n        isLight: function isLight() {\n            return !this.isDark();\n        },\n        isValid: function isValid() {\n            return this._ok;\n        },\n        getOriginalInput: function getOriginalInput() {\n            return this._originalInput;\n        },\n        getFormat: function getFormat() {\n            return this._format;\n        },\n        getAlpha: function getAlpha() {\n            return this._a;\n        },\n        getBrightness: function getBrightness() {\n            //http://www.w3.org/TR/AERT#color-contrast\n            var rgb = this.toRgb();\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n        },\n        getLuminance: function getLuminance() {\n            //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n            var rgb = this.toRgb();\n            var RsRGB, GsRGB, BsRGB, R, G, B;\n            RsRGB = rgb.r / 255;\n            GsRGB = rgb.g / 255;\n            BsRGB = rgb.b / 255;\n            if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n            if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n            if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n            return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        },\n        setAlpha: function setAlpha(value) {\n            this._a = boundAlpha(value);\n            this._roundA = Math.round(100 * this._a) / 100;\n            return this;\n        },\n        toHsv: function toHsv() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            return {\n                h: hsv.h * 360,\n                s: hsv.s,\n                v: hsv.v,\n                a: this._a\n            };\n        },\n        toHsvString: function toHsvString() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            var h = Math.round(hsv.h * 360),\n                s = Math.round(hsv.s * 100),\n                v = Math.round(hsv.v * 100);\n            return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n        },\n        toHsl: function toHsl() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            return {\n                h: hsl.h * 360,\n                s: hsl.s,\n                l: hsl.l,\n                a: this._a\n            };\n        },\n        toHslString: function toHslString() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            var h = Math.round(hsl.h * 360),\n                s = Math.round(hsl.s * 100),\n                l = Math.round(hsl.l * 100);\n            return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n        },\n        toHex: function toHex(allow3Char) {\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\n        },\n        toHexString: function toHexString(allow3Char) {\n            return \"#\" + this.toHex(allow3Char);\n        },\n        toHex8: function toHex8(allow4Char) {\n            return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n        },\n        toHex8String: function toHex8String(allow4Char) {\n            return \"#\" + this.toHex8(allow4Char);\n        },\n        toRgb: function toRgb() {\n            return {\n                r: Math.round(this._r),\n                g: Math.round(this._g),\n                b: Math.round(this._b),\n                a: this._a\n            };\n        },\n        toRgbString: function toRgbString() {\n            return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n        },\n        toPercentageRgb: function toPercentageRgb() {\n            return {\n                r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n                g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n                b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n                a: this._a\n            };\n        },\n        toPercentageRgbString: function toPercentageRgbString() {\n            return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n        },\n        toName: function toName() {\n            if (this._a === 0) {\n                return \"transparent\";\n            }\n            if (this._a < 1) {\n                return false;\n            }\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n        },\n        toFilter: function toFilter(secondColor) {\n            var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n            var secondHex8String = hex8String;\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n            if (secondColor) {\n                var s = tinycolor(secondColor);\n                secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n            }\n            return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n        },\n        toString: function toString(format) {\n            var formatSet = !!format;\n            format = format || this._format;\n            var formattedString = false;\n            var hasAlpha = this._a < 1 && this._a >= 0;\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n            if (needsAlphaFormat) {\n                // Special case for \"transparent\", all other non-alpha formats\n                // will return rgba when there is transparency.\n                if (format === \"name\" && this._a === 0) {\n                    return this.toName();\n                }\n                return this.toRgbString();\n            }\n            if (format === \"rgb\") {\n                formattedString = this.toRgbString();\n            }\n            if (format === \"prgb\") {\n                formattedString = this.toPercentageRgbString();\n            }\n            if (format === \"hex\" || format === \"hex6\") {\n                formattedString = this.toHexString();\n            }\n            if (format === \"hex3\") {\n                formattedString = this.toHexString(true);\n            }\n            if (format === \"hex4\") {\n                formattedString = this.toHex8String(true);\n            }\n            if (format === \"hex8\") {\n                formattedString = this.toHex8String();\n            }\n            if (format === \"name\") {\n                formattedString = this.toName();\n            }\n            if (format === \"hsl\") {\n                formattedString = this.toHslString();\n            }\n            if (format === \"hsv\") {\n                formattedString = this.toHsvString();\n            }\n            return formattedString || this.toHexString();\n        },\n        clone: function clone() {\n            return tinycolor(this.toString());\n        },\n        _applyModification: function _applyModification(fn, args) {\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\n            this._r = color._r;\n            this._g = color._g;\n            this._b = color._b;\n            this.setAlpha(color._a);\n            return this;\n        },\n        lighten: function lighten() {\n            return this._applyModification(_lighten, arguments);\n        },\n        brighten: function brighten() {\n            return this._applyModification(_brighten, arguments);\n        },\n        darken: function darken() {\n            return this._applyModification(_darken, arguments);\n        },\n        desaturate: function desaturate() {\n            return this._applyModification(_desaturate, arguments);\n        },\n        saturate: function saturate() {\n            return this._applyModification(_saturate, arguments);\n        },\n        greyscale: function greyscale() {\n            return this._applyModification(_greyscale, arguments);\n        },\n        spin: function spin() {\n            return this._applyModification(_spin, arguments);\n        },\n        _applyCombination: function _applyCombination(fn, args) {\n            return fn.apply(null, [this].concat([].slice.call(args)));\n        },\n        analogous: function analogous() {\n            return this._applyCombination(_analogous, arguments);\n        },\n        complement: function complement() {\n            return this._applyCombination(_complement, arguments);\n        },\n        monochromatic: function monochromatic() {\n            return this._applyCombination(_monochromatic, arguments);\n        },\n        splitcomplement: function splitcomplement() {\n            return this._applyCombination(_splitcomplement, arguments);\n        },\n        // Disabled until https://github.com/bgrins/TinyColor/issues/254\n        // polyad: function (number) {\n        //   return this._applyCombination(polyad, [number]);\n        // },\n        triad: function triad() {\n            return this._applyCombination(polyad, [3]);\n        },\n        tetrad: function tetrad() {\n            return this._applyCombination(polyad, [4]);\n        }\n    };\n\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\n    tinycolor.fromRatio = function (color, opts) {\n        if (_typeof(color) == \"object\") {\n            var newColor = {};\n            for (var i in color) {\n                if (color.hasOwnProperty(i)) {\n                    if (i === \"a\") {\n                        newColor[i] = color[i];\n                    } else {\n                        newColor[i] = convertToPercentage(color[i]);\n                    }\n                }\n            }\n            color = newColor;\n        }\n        return tinycolor(color, opts);\n    };\n\n    // Given a string or object, convert that input to RGB\n    // Possible string inputs:\n    //\n    //     \"red\"\n    //     \"#f00\" or \"f00\"\n    //     \"#ff0000\" or \"ff0000\"\n    //     \"#ff000000\" or \"ff000000\"\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n    //\n    function inputToRGB(color) {\n        var rgb = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var a = 1;\n        var s = null;\n        var v = null;\n        var l = null;\n        var ok = false;\n        var format = false;\n        if (typeof color == \"string\") {\n            color = stringInputToObject(color);\n        }\n        if (_typeof(color) == \"object\") {\n            if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n                rgb = rgbToRgb(color.r, color.g, color.b);\n                ok = true;\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n                s = convertToPercentage(color.s);\n                v = convertToPercentage(color.v);\n                rgb = hsvToRgb(color.h, s, v);\n                ok = true;\n                format = \"hsv\";\n            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n                s = convertToPercentage(color.s);\n                l = convertToPercentage(color.l);\n                rgb = hslToRgb(color.h, s, l);\n                ok = true;\n                format = \"hsl\";\n            }\n            if (color.hasOwnProperty(\"a\")) {\n                a = color.a;\n            }\n        }\n        a = boundAlpha(a);\n        return {\n            ok: ok,\n            format: color.format || format,\n            r: Math.min(255, Math.max(rgb.r, 0)),\n            g: Math.min(255, Math.max(rgb.g, 0)),\n            b: Math.min(255, Math.max(rgb.b, 0)),\n            a: a\n        };\n    }\n\n    // Conversion Functions\n    // --------------------\n\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n    // `rgbToRgb`\n    // Handle bounds / percentage checking to conform to CSS color spec\n    // <http://www.w3.org/TR/css3-color/>\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\n    // *Returns:* { r, g, b } in [0, 255]\n    function rgbToRgb(r, g, b) {\n        return {\n            r: bound01(r, 255) * 255,\n            g: bound01(g, 255) * 255,\n            b: bound01(b, 255) * 255\n        };\n    }\n\n    // `rgbToHsl`\n    // Converts an RGB color value to HSL.\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n    // *Returns:* { h, s, l } in [0,1]\n    function rgbToHsl(r, g, b) {\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n        var max = Math.max(r, g, b),\n            min = Math.min(r, g, b);\n        var h,\n            s,\n            l = (max + min) / 2;\n        if (max == min) {\n            h = s = 0; // achromatic\n        } else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return {\n            h: h,\n            s: s,\n            l: l\n        };\n    }\n\n    // `hslToRgb`\n    // Converts an HSL color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hslToRgb(h, s, l) {\n        var r, g, b;\n        h = bound01(h, 360);\n        s = bound01(s, 100);\n        l = bound01(l, 100);\n        function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        } else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n        return {\n            r: r * 255,\n            g: g * 255,\n            b: b * 255\n        };\n    }\n\n    // `rgbToHsv`\n    // Converts an RGB color value to HSV\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n    // *Returns:* { h, s, v } in [0,1]\n    function rgbToHsv(r, g, b) {\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n        var max = Math.max(r, g, b),\n            min = Math.min(r, g, b);\n        var h,\n            s,\n            v = max;\n        var d = max - min;\n        s = max === 0 ? 0 : d / max;\n        if (max == min) {\n            h = 0; // achromatic\n        } else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return {\n            h: h,\n            s: s,\n            v: v\n        };\n    }\n\n    // `hsvToRgb`\n    // Converts an HSV color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hsvToRgb(h, s, v) {\n        h = bound01(h, 360) * 6;\n        s = bound01(s, 100);\n        v = bound01(v, 100);\n        var i = Math.floor(h),\n            f = h - i,\n            p = v * (1 - s),\n            q = v * (1 - f * s),\n            t = v * (1 - (1 - f) * s),\n            mod = i % 6,\n            r = [v, q, p, p, t, v][mod],\n            g = [t, v, v, q, p, p][mod],\n            b = [p, p, t, v, v, q][mod];\n        return {\n            r: r * 255,\n            g: g * 255,\n            b: b * 255\n        };\n    }\n\n    // `rgbToHex`\n    // Converts an RGB color to hex\n    // Assumes r, g, and b are contained in the set [0, 255]\n    // Returns a 3 or 6 character hex\n    function rgbToHex(r, g, b, allow3Char) {\n        var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n        // Return a 3 character hex if possible\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n        }\n        return hex.join(\"\");\n    }\n\n    // `rgbaToHex`\n    // Converts an RGBA color plus alpha transparency to hex\n    // Assumes r, g, b are contained in the set [0, 255] and\n    // a in [0, 1]. Returns a 4 or 8 character rgba hex\n    function rgbaToHex(r, g, b, a, allow4Char) {\n        var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n        // Return a 4 character hex if possible\n        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n        }\n        return hex.join(\"\");\n    }\n\n    // `rgbaToArgbHex`\n    // Converts an RGBA color to an ARGB Hex8 string\n    // Rarely used, but required for \"toFilter()\"\n    function rgbaToArgbHex(r, g, b, a) {\n        var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n        return hex.join(\"\");\n    }\n\n    // `equals`\n    // Can be called with any tinycolor input\n    tinycolor.equals = function (color1, color2) {\n        if (!color1 || !color2) return false;\n        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n    };\n    tinycolor.random = function () {\n        return tinycolor.fromRatio({\n            r: Math.random(),\n            g: Math.random(),\n            b: Math.random()\n        });\n    };\n\n    // Modification Functions\n    // ----------------------\n    // Thanks to less.js for some of the basics here\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n    function _desaturate(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n    function _saturate(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n    function _greyscale(color) {\n        return tinycolor(color).desaturate(100);\n    }\n    function _lighten(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n    function _brighten(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var rgb = tinycolor(color).toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return tinycolor(rgb);\n    }\n    function _darken(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n    // Values outside of this range will be wrapped into this range.\n    function _spin(color, amount) {\n        var hsl = tinycolor(color).toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return tinycolor(hsl);\n    }\n\n    // Combination Functions\n    // ---------------------\n    // Thanks to jQuery xColor for some of the ideas behind these\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n    function _complement(color) {\n        var hsl = tinycolor(color).toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return tinycolor(hsl);\n    }\n    function polyad(color, number) {\n        if (isNaN(number) || number <= 0) {\n            throw new Error(\"Argument to polyad must be a positive number\");\n        }\n        var hsl = tinycolor(color).toHsl();\n        var result = [tinycolor(color)];\n        var step = 360 / number;\n        for (var i = 1; i < number; i++) {\n            result.push(tinycolor({\n                h: (hsl.h + i * step) % 360,\n                s: hsl.s,\n                l: hsl.l\n            }));\n        }\n        return result;\n    }\n    function _splitcomplement(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [tinycolor(color), tinycolor({\n            h: (h + 72) % 360,\n            s: hsl.s,\n            l: hsl.l\n        }), tinycolor({\n            h: (h + 216) % 360,\n            s: hsl.s,\n            l: hsl.l\n        })];\n    }\n    function _analogous(color, results, slices) {\n        results = results || 6;\n        slices = slices || 30;\n        var hsl = tinycolor(color).toHsl();\n        var part = 360 / slices;\n        var ret = [tinycolor(color)];\n        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(tinycolor(hsl));\n        }\n        return ret;\n    }\n    function _monochromatic(color, results) {\n        results = results || 6;\n        var hsv = tinycolor(color).toHsv();\n        var h = hsv.h,\n            s = hsv.s,\n            v = hsv.v;\n        var ret = [];\n        var modification = 1 / results;\n        while (results--) {\n            ret.push(tinycolor({\n                h: h,\n                s: s,\n                v: v\n            }));\n            v = (v + modification) % 1;\n        }\n        return ret;\n    }\n\n    // Utility Functions\n    // ---------------------\n\n    tinycolor.mix = function (color1, color2, amount) {\n        amount = amount === 0 ? 0 : amount || 50;\n        var rgb1 = tinycolor(color1).toRgb();\n        var rgb2 = tinycolor(color2).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a\n        };\n        return tinycolor(rgba);\n    };\n\n    // Readability Functions\n    // ---------------------\n    // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n    // `contrast`\n    // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n    tinycolor.readability = function (color1, color2) {\n        var c1 = tinycolor(color1);\n        var c2 = tinycolor(color2);\n        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n    };\n\n    // `isReadable`\n    // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n    // The third argument is an optional Object.\n    //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n    //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n    // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n    // *Example*\n    //    tinycolor.isReadable(\"#000\", \"#111\") => false\n    //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n    tinycolor.isReadable = function (color1, color2, wcag2) {\n        var readability = tinycolor.readability(color1, color2);\n        var wcag2Parms, out;\n        out = false;\n        wcag2Parms = validateWCAG2Parms(wcag2);\n        switch (wcag2Parms.level + wcag2Parms.size) {\n            case \"AAsmall\":\n            case \"AAAlarge\":\n                out = readability >= 4.5;\n                break;\n            case \"AAlarge\":\n                out = readability >= 3;\n                break;\n            case \"AAAsmall\":\n                out = readability >= 7;\n                break;\n        }\n        return out;\n    };\n\n    // `mostReadable`\n    // Given a base color and a list of possible foreground or background\n    // colors for that base, returns the most readable color.\n    // Optionally returns Black or White if the most readable color is unreadable.\n    // *Example*\n    //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n    //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n    //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n    //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n    tinycolor.mostReadable = function (baseColor, colorList, args) {\n        var bestColor = null;\n        var bestScore = 0;\n        var readability;\n        var includeFallbackColors, level, size;\n        args = args || {};\n        includeFallbackColors = args.includeFallbackColors;\n        level = args.level;\n        size = args.size;\n        for (var i = 0; i < colorList.length; i++) {\n            readability = tinycolor.readability(baseColor, colorList[i]);\n            if (readability > bestScore) {\n                bestScore = readability;\n                bestColor = tinycolor(colorList[i]);\n            }\n        }\n        if (tinycolor.isReadable(baseColor, bestColor, {\n            level: level,\n            size: size\n        }) || !includeFallbackColors) {\n            return bestColor;\n        } else {\n            args.includeFallbackColors = false;\n            return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n        }\n    };\n\n    // Big List of Colors\n    // ------------------\n    // <https://www.w3.org/TR/css-color-4/#named-colors>\n    var names = tinycolor.names = {\n        aliceblue: \"f0f8ff\",\n        antiquewhite: \"faebd7\",\n        aqua: \"0ff\",\n        aquamarine: \"7fffd4\",\n        azure: \"f0ffff\",\n        beige: \"f5f5dc\",\n        bisque: \"ffe4c4\",\n        black: \"000\",\n        blanchedalmond: \"ffebcd\",\n        blue: \"00f\",\n        blueviolet: \"8a2be2\",\n        brown: \"a52a2a\",\n        burlywood: \"deb887\",\n        burntsienna: \"ea7e5d\",\n        cadetblue: \"5f9ea0\",\n        chartreuse: \"7fff00\",\n        chocolate: \"d2691e\",\n        coral: \"ff7f50\",\n        cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\",\n        crimson: \"dc143c\",\n        cyan: \"0ff\",\n        darkblue: \"00008b\",\n        darkcyan: \"008b8b\",\n        darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\",\n        darkgreen: \"006400\",\n        darkgrey: \"a9a9a9\",\n        darkkhaki: \"bdb76b\",\n        darkmagenta: \"8b008b\",\n        darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\",\n        darkorchid: \"9932cc\",\n        darkred: \"8b0000\",\n        darksalmon: \"e9967a\",\n        darkseagreen: \"8fbc8f\",\n        darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\",\n        darkslategrey: \"2f4f4f\",\n        darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\",\n        deeppink: \"ff1493\",\n        deepskyblue: \"00bfff\",\n        dimgray: \"696969\",\n        dimgrey: \"696969\",\n        dodgerblue: \"1e90ff\",\n        firebrick: \"b22222\",\n        floralwhite: \"fffaf0\",\n        forestgreen: \"228b22\",\n        fuchsia: \"f0f\",\n        gainsboro: \"dcdcdc\",\n        ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\",\n        goldenrod: \"daa520\",\n        gray: \"808080\",\n        green: \"008000\",\n        greenyellow: \"adff2f\",\n        grey: \"808080\",\n        honeydew: \"f0fff0\",\n        hotpink: \"ff69b4\",\n        indianred: \"cd5c5c\",\n        indigo: \"4b0082\",\n        ivory: \"fffff0\",\n        khaki: \"f0e68c\",\n        lavender: \"e6e6fa\",\n        lavenderblush: \"fff0f5\",\n        lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\",\n        lightblue: \"add8e6\",\n        lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\",\n        lightgoldenrodyellow: \"fafad2\",\n        lightgray: \"d3d3d3\",\n        lightgreen: \"90ee90\",\n        lightgrey: \"d3d3d3\",\n        lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\",\n        lightseagreen: \"20b2aa\",\n        lightskyblue: \"87cefa\",\n        lightslategray: \"789\",\n        lightslategrey: \"789\",\n        lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\",\n        lime: \"0f0\",\n        limegreen: \"32cd32\",\n        linen: \"faf0e6\",\n        magenta: \"f0f\",\n        maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\",\n        mediumblue: \"0000cd\",\n        mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370db\",\n        mediumseagreen: \"3cb371\",\n        mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\",\n        mediumturquoise: \"48d1cc\",\n        mediumvioletred: \"c71585\",\n        midnightblue: \"191970\",\n        mintcream: \"f5fffa\",\n        mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\",\n        navajowhite: \"ffdead\",\n        navy: \"000080\",\n        oldlace: \"fdf5e6\",\n        olive: \"808000\",\n        olivedrab: \"6b8e23\",\n        orange: \"ffa500\",\n        orangered: \"ff4500\",\n        orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\",\n        palegreen: \"98fb98\",\n        paleturquoise: \"afeeee\",\n        palevioletred: \"db7093\",\n        papayawhip: \"ffefd5\",\n        peachpuff: \"ffdab9\",\n        peru: \"cd853f\",\n        pink: \"ffc0cb\",\n        plum: \"dda0dd\",\n        powderblue: \"b0e0e6\",\n        purple: \"800080\",\n        rebeccapurple: \"663399\",\n        red: \"f00\",\n        rosybrown: \"bc8f8f\",\n        royalblue: \"4169e1\",\n        saddlebrown: \"8b4513\",\n        salmon: \"fa8072\",\n        sandybrown: \"f4a460\",\n        seagreen: \"2e8b57\",\n        seashell: \"fff5ee\",\n        sienna: \"a0522d\",\n        silver: \"c0c0c0\",\n        skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\",\n        slategray: \"708090\",\n        slategrey: \"708090\",\n        snow: \"fffafa\",\n        springgreen: \"00ff7f\",\n        steelblue: \"4682b4\",\n        tan: \"d2b48c\",\n        teal: \"008080\",\n        thistle: \"d8bfd8\",\n        tomato: \"ff6347\",\n        turquoise: \"40e0d0\",\n        violet: \"ee82ee\",\n        wheat: \"f5deb3\",\n        white: \"fff\",\n        whitesmoke: \"f5f5f5\",\n        yellow: \"ff0\",\n        yellowgreen: \"9acd32\"\n    };\n\n    // Make it easy to access colors via `hexNames[hex]`\n    var hexNames = tinycolor.hexNames = flip(names);\n\n    // Utilities\n    // ---------\n\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n    function flip(o) {\n        var flipped = {};\n        for (var i in o) {\n            if (o.hasOwnProperty(i)) {\n                flipped[o[i]] = i;\n            }\n        }\n        return flipped;\n    }\n\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\n    function boundAlpha(a) {\n        a = parseFloat(a);\n        if (isNaN(a) || a < 0 || a > 1) {\n            a = 1;\n        }\n        return a;\n    }\n\n    // Take input from [0, n] and return it as [0, 1]\n    function bound01(n, max) {\n        if (isOnePointZero(n)) n = \"100%\";\n        var processPercent = isPercentage(n);\n        n = Math.min(max, Math.max(0, parseFloat(n)));\n\n        // Automatically convert percentage into number\n        if (processPercent) {\n            n = parseInt(n * max, 10) / 100;\n        }\n\n        // Handle floating point rounding errors\n        if (Math.abs(n - max) < 0.000001) {\n            return 1;\n        }\n\n        // Convert into [0, 1] range if it isn't already\n        return n % max / parseFloat(max);\n    }\n\n    // Force a number between 0 and 1\n    function clamp01(val) {\n        return Math.min(1, Math.max(0, val));\n    }\n\n    // Parse a base-16 hex value into a base-10 integer\n    function parseIntFromHex(val) {\n        return parseInt(val, 16);\n    }\n\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n    function isOnePointZero(n) {\n        return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n    }\n\n    // Check to see if string passed in is a percentage\n    function isPercentage(n) {\n        return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n    }\n\n    // Force a hex value to have 2 characters\n    function pad2(c) {\n        return c.length == 1 ? \"0\" + c : \"\" + c;\n    }\n\n    // Replace a decimal with it's percentage value\n    function convertToPercentage(n) {\n        if (n <= 1) {\n            n = n * 100 + \"%\";\n        }\n        return n;\n    }\n\n    // Converts a decimal to a hex value\n    function convertDecimalToHex(d) {\n        return Math.round(parseFloat(d) * 255).toString(16);\n    }\n    // Converts a hex value to a decimal\n    function convertHexToDecimal(h) {\n        return parseIntFromHex(h) / 255;\n    }\n    var matchers = function () {\n        // <http://www.w3.org/TR/css3-values/#integers>\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n        // <http://www.w3.org/TR/css3-values/#number-value>\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n        // Actual matching.\n        // Parentheses and commas are optional, but not required.\n        // Whitespace can take the place of commas or opening paren\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n        return {\n            CSS_UNIT: new RegExp(CSS_UNIT),\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n        };\n    }();\n\n    // `isValidCSSUnit`\n    // Take in a single string / number and check to see if it looks like a CSS unit\n    // (see `matchers` above for definition).\n    function isValidCSSUnit(color) {\n        return !!matchers.CSS_UNIT.exec(color);\n    }\n\n    // `stringInputToObject`\n    // Permissive string parsing.  Take in a number of formats, and output an object\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n    function stringInputToObject(color) {\n        color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n        var named = false;\n        if (names[color]) {\n            color = names[color];\n            named = true;\n        } else if (color == \"transparent\") {\n            return {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0,\n                format: \"name\"\n            };\n        }\n\n        // Try to match string input using regular expressions.\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n        // Just return an object and let the conversion functions handle that.\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\n        var match;\n        if (match = matchers.rgb.exec(color)) {\n            return {\n                r: match[1],\n                g: match[2],\n                b: match[3]\n            };\n        }\n        if (match = matchers.rgba.exec(color)) {\n            return {\n                r: match[1],\n                g: match[2],\n                b: match[3],\n                a: match[4]\n            };\n        }\n        if (match = matchers.hsl.exec(color)) {\n            return {\n                h: match[1],\n                s: match[2],\n                l: match[3]\n            };\n        }\n        if (match = matchers.hsla.exec(color)) {\n            return {\n                h: match[1],\n                s: match[2],\n                l: match[3],\n                a: match[4]\n            };\n        }\n        if (match = matchers.hsv.exec(color)) {\n            return {\n                h: match[1],\n                s: match[2],\n                v: match[3]\n            };\n        }\n        if (match = matchers.hsva.exec(color)) {\n            return {\n                h: match[1],\n                s: match[2],\n                v: match[3],\n                a: match[4]\n            };\n        }\n        if (match = matchers.hex8.exec(color)) {\n            return {\n                r: parseIntFromHex(match[1]),\n                g: parseIntFromHex(match[2]),\n                b: parseIntFromHex(match[3]),\n                a: convertHexToDecimal(match[4]),\n                format: named ? \"name\" : \"hex8\"\n            };\n        }\n        if (match = matchers.hex6.exec(color)) {\n            return {\n                r: parseIntFromHex(match[1]),\n                g: parseIntFromHex(match[2]),\n                b: parseIntFromHex(match[3]),\n                format: named ? \"name\" : \"hex\"\n            };\n        }\n        if (match = matchers.hex4.exec(color)) {\n            return {\n                r: parseIntFromHex(match[1] + \"\" + match[1]),\n                g: parseIntFromHex(match[2] + \"\" + match[2]),\n                b: parseIntFromHex(match[3] + \"\" + match[3]),\n                a: convertHexToDecimal(match[4] + \"\" + match[4]),\n                format: named ? \"name\" : \"hex8\"\n            };\n        }\n        if (match = matchers.hex3.exec(color)) {\n            return {\n                r: parseIntFromHex(match[1] + \"\" + match[1]),\n                g: parseIntFromHex(match[2] + \"\" + match[2]),\n                b: parseIntFromHex(match[3] + \"\" + match[3]),\n                format: named ? \"name\" : \"hex\"\n            };\n        }\n        return false;\n    }\n    function validateWCAG2Parms(parms) {\n        // return valid WCAG2 parms for isReadable.\n        // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n        var level, size;\n        parms = parms || {\n            level: \"AA\",\n            size: \"small\"\n        };\n        level = (parms.level || \"AA\").toUpperCase();\n        size = (parms.size || \"small\").toLowerCase();\n        if (level !== \"AA\" && level !== \"AAA\") {\n            level = \"AA\";\n        }\n        if (size !== \"small\" && size !== \"large\") {\n            size = \"small\";\n        }\n        return {\n            level: level,\n            size: size\n        };\n    }\n\n    return tinycolor;\n\n}));\n","jquery/bootstrap/collapse.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): collapse.js and base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([\n    \"jquery\",\n    \"./util/index\",\n    \"./dom/data\",\n    \"./dom/event-handler\",\n    \"./dom/manipulator\",\n    \"./dom/selector-engine\"\n], function($, Util, Data, EventHandler, Manipulator, SelectorEngine) {\n    'use strict';\n\n    const defineJQueryPlugin = Util.defineJQueryPlugin;\n    const executeAfterTransition = Util.executeAfterTransition;\n    const getElement = Util.getElement;\n    const getSelectorFromElement = Util.getSelectorFromElement;\n    const getElementFromSelector = Util.getElementFromSelector;\n    const reflow = Util.reflow;\n    const typeCheckConfig = Util.typeCheckConfig;\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const VERSION = '5.1.3';\n    const NAME = 'collapse';\n    const DATA_KEY = 'bs.collapse';\n    const EVENT_KEY = `.${DATA_KEY}`;\n    const DATA_API_KEY = '.data-api';\n\n    const Default = {\n        toggle: true,\n        parent: null\n    };\n\n    const DefaultType = {\n        toggle: 'boolean',\n        parent: '(null|element)'\n    };\n\n    const EVENT_SHOW = `show${EVENT_KEY}`;\n    const EVENT_SHOWN = `shown${EVENT_KEY}`;\n    const EVENT_HIDE = `hide${EVENT_KEY}`;\n    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\n\n    const CLASS_NAME_SHOW = 'show';\n    const CLASS_NAME_COLLAPSE = 'collapse';\n    const CLASS_NAME_COLLAPSING = 'collapsing';\n    const CLASS_NAME_COLLAPSED = 'collapsed';\n    const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\n    const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n\n    const WIDTH = 'width';\n    const HEIGHT = 'height';\n\n    const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]';\n\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n    var Collapse = function(element, config) {\n        element = getElement(element);\n\n        if (!element) {\n            return;\n        }\n\n        this._element = element;\n        Data.set(this._element, DATA_KEY, this);\n\n        this._isTransitioning = false;\n        this._config = this._getConfig(config);\n        this._triggerArray = [];\n\n        const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE);\n\n        for (let i = 0, len = toggleList.length; i < len; i++) {\n            const elem = toggleList[i];\n            const selector = getSelectorFromElement(elem);\n            const filterElement = SelectorEngine.find(selector)\n                .filter(foundElem => foundElem === this._element);\n\n            if (selector !== null && filterElement.length) {\n                this._selector = selector;\n                this._triggerArray.push(elem);\n            }\n        }\n\n        this._initializeChildren();\n\n        if (!this._config.parent) {\n            this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n        }\n\n        if (this._config.toggle) {\n            this.toggle();\n        }\n    }\n\n    // Getters\n\n    Collapse.VERSION = VERSION;\n\n    Collapse.Default = Default;\n\n    Collapse.NAME = NAME;\n\n    Collapse.DATA_KEY = 'bs.' + Collapse.NAME;\n\n    Collapse.EVENT_KEY = '.' + Collapse.DATA_KEY;\n\n    // Public\n\n    Collapse.prototype.dispose = function() {\n        Data.remove(this._element, this.constructor.DATA_KEY);\n        EventHandler.off(this._element, this.constructor.EVENT_KEY);\n\n        Object.getOwnPropertyNames(this).forEach(propertyName => {\n            this[propertyName] = null;\n        })\n    }\n\n    Collapse.prototype._queueCallback = function(callback, element, isAnimated = true) {\n        executeAfterTransition(callback, element, isAnimated);\n    }\n\n    Collapse.prototype.toggle = function() {\n        if (this._isShown()) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    Collapse.prototype.show = function() {\n        if (this._isTransitioning || this._isShown()) {\n            return;\n        }\n\n        let actives = [];\n        let activesData;\n\n        if (this._config.parent) {\n            const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n            actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth\n        }\n\n        const container = SelectorEngine.findOne(this._selector);\n        if (actives.length) {\n            const tempActiveData = actives.find(elem => container !== elem);\n            activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;\n\n            if (activesData && activesData._isTransitioning) {\n                return;\n            }\n        }\n\n        const startEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n        if (startEvent.defaultPrevented) {\n            return;\n        }\n\n        actives.forEach(elemActive => {\n            if (container !== elemActive) {\n                Collapse.getOrCreateInstance(elemActive, {toggle: false}).hide();\n            }\n\n            if (!activesData) {\n                Data.set(elemActive, DATA_KEY, null);\n            }\n        })\n\n        const dimension = this._getDimension();\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSE);\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n        this._element.style[dimension] = 0;\n\n        this._addAriaAndCollapsedClass(this._triggerArray, true);\n        this._isTransitioning = true;\n\n        const complete = () => {\n            this._isTransitioning = false;\n\n            this._element.classList.remove(CLASS_NAME_COLLAPSING);\n            this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n            this._element.style[dimension] = '';\n\n            EventHandler.trigger(this._element, EVENT_SHOWN);\n        };\n\n        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n        const scrollSize = `scroll${capitalizedDimension}`;\n\n        this._queueCallback(complete, this._element, true);\n        this._element.style[dimension] = `${this._element[scrollSize]}px`;\n    }\n\n    Collapse.prototype.hide = function() {\n        if (this._isTransitioning || !this._isShown()) {\n            return;\n        }\n\n        const startEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n        if (startEvent.defaultPrevented) {\n            return;\n        }\n\n        const dimension = this._getDimension();\n\n        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n\n        reflow(this._element);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);\n\n        const triggerArrayLength = this._triggerArray.length;\n        for (let i = 0; i < triggerArrayLength; i++) {\n            const trigger = this._triggerArray[i];\n            const elem = getElementFromSelector(trigger);\n\n            if (elem && !this._isShown(elem)) {\n                this._addAriaAndCollapsedClass([trigger], false);\n            }\n        }\n\n        this._isTransitioning = true;\n\n        const complete = () => {\n            this._isTransitioning = false;\n            this._element.classList.remove(CLASS_NAME_COLLAPSING);\n            this._element.classList.add(CLASS_NAME_COLLAPSE);\n            EventHandler.trigger(this._element, EVENT_HIDDEN);\n        };\n\n        this._element.style[dimension] = '';\n\n        this._queueCallback(complete, this._element, true);\n    }\n\n    Collapse.prototype._isShown = function(element = this._element) {\n        return element.classList.contains(CLASS_NAME_SHOW);\n    }\n\n    // Private\n\n    Collapse.prototype._getConfig = function(config) {\n        config = {\n            ...Default,\n            ...Manipulator.getDataAttributes(this._element),\n            ...config\n        };\n        config.toggle = Boolean(config.toggle); // Coerce string values\n        config.parent = getElement(config.parent);\n        typeCheckConfig(NAME, config, DefaultType);\n        return config;\n    }\n\n    Collapse.prototype._getDimension = function() {\n        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n    }\n\n    Collapse.prototype._initializeChildren = function() {\n        if (!this._config.parent) {\n            return;\n        }\n\n        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n        SelectorEngine.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(elem => !children.includes(elem))\n            .forEach(element => {\n                const selected = getElementFromSelector(element);\n\n                if (selected) {\n                    this._addAriaAndCollapsedClass([element], this._isShown(selected));\n                }\n            })\n    }\n\n    Collapse.prototype._addAriaAndCollapsedClass = function(triggerArray, isOpen) {\n        if (!triggerArray.length) {\n            return;\n        }\n\n        triggerArray.forEach(elem => {\n            if (isOpen) {\n                elem.classList.remove(CLASS_NAME_COLLAPSED);\n            } else {\n                elem.classList.add(CLASS_NAME_COLLAPSED);\n            }\n\n            elem.setAttribute('aria-expanded', isOpen);\n        })\n    }\n\n    // Static\n\n    Collapse.getInstance = function(element) {\n        return Data.get(getElement(element), this.DATA_KEY);\n    }\n\n    Collapse.getOrCreateInstance = function(element, config = {}) {\n        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n    }\n\n    Collapse.jQueryInterface = function(config) {\n        return this.each(function () {\n            const _config = {};\n            if (typeof config === 'string' && /show|hide/.test(config)) {\n                _config.toggle = false;\n            }\n\n            const data = Collapse.getOrCreateInstance(this, _config);\n\n            if (typeof config === 'string') {\n                if (typeof data[config] === 'undefined') {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n\n                data[config]();\n            }\n        })\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n        if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n            event.preventDefault();\n        }\n\n        const selector = getSelectorFromElement(this);\n        const selectorElements = SelectorEngine.find(selector);\n\n        selectorElements.forEach(element => {\n            Collapse.getOrCreateInstance(element, {toggle: false}).toggle();\n        })\n    })\n\n    /**\n     * ------------------------------------------------------------------------\n     * jQuery\n     * ------------------------------------------------------------------------\n     * add .Collapse to jQuery only if jQuery is present\n     */\n\n    defineJQueryPlugin(Collapse);\n\n    return Collapse;\n});\n","jquery/bootstrap/tab.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): tab.js and base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([\n    \"./util/index\",\n    \"./dom/event-handler\",\n    \"./dom/selector-engine\"\n], function(Util, EventHandler, SelectorEngine) {\n    'use strict';\n\n    const defineJQueryPlugin = Util.defineJQueryPlugin;\n    const executeAfterTransition = Util.executeAfterTransition;\n    const getElement = Util.getElement;\n    const getElementFromSelector = Util.getElementFromSelector;\n    const isDisabled = Util.isDisabled;\n    const reflow = Util.reflow;\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const VERSION = '5.1.3';\n    const NAME = 'tab';\n    const DATA_KEY = 'bs.tab';\n    const EVENT_KEY = `.${DATA_KEY}`;\n    const DATA_API_KEY = '.data-api';\n\n    const EVENT_HIDE = `hide${EVENT_KEY}`;\n    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n    const EVENT_SHOW = `show${EVENT_KEY}`;\n    const EVENT_SHOWN = `shown${EVENT_KEY}`;\n    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\n\n    const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n    const CLASS_NAME_ACTIVE = 'active';\n    const CLASS_NAME_FADE = 'fade';\n    const CLASS_NAME_SHOW = 'show';\n\n    const SELECTOR_DROPDOWN = '.dropdown';\n    const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n    const SELECTOR_ACTIVE = '.active';\n    const SELECTOR_ACTIVE_UL = ':scope > li > .active';\n    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\n    const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n    const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n    function Tab(element) {\n        element = getElement(element);\n\n        if (!element) {\n            return;\n        }\n\n        this._element = element;\n        Data.set(this._element, DATA_KEY, this);\n    }\n\n    // Getters\n\n    Tab.VERSION = VERSION;\n\n    Tab.NAME = NAME;\n\n    Tab.DATA_KEY = 'bs.' + Tab.NAME;\n\n    Tab.EVENT_KEY = '.' + Tab.DATA_KEY;\n\n    // Public\n\n    Tab.prototype.dispose = function() {\n        Data.remove(this._element, this.constructor.DATA_KEY);\n        EventHandler.off(this._element, this.constructor.EVENT_KEY);\n\n        Object.getOwnPropertyNames(this).forEach(propertyName => {\n            this[propertyName] = null;\n        })\n    }\n\n    Tab.prototype._queueCallback = function(callback, element, isAnimated = true) {\n        executeAfterTransition(callback, element, isAnimated);\n    }\n\n    Tab.prototype.show = function() {\n        if ((this._element.parentNode &&\n            this._element.parentNode.nodeType === Node.ELEMENT_NODE &&\n            this._element.classList.contains(CLASS_NAME_ACTIVE))) {\n            return;\n        }\n\n        let previous;\n        const target = getElementFromSelector(this._element);\n        const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);\n\n        if (listElement) {\n            const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n            previous = SelectorEngine.find(itemSelector, listElement);\n            previous = previous[previous.length - 1];\n        }\n\n        const hideEvent = previous ?\n            EventHandler.trigger(previous, EVENT_HIDE, {\n                relatedTarget: this._element\n            }) :\n            null;\n\n        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, {\n            relatedTarget: previous\n        });\n\n        if (showEvent.defaultPrevented || (hideEvent !== null && hideEvent.defaultPrevented)) {\n            return;\n        }\n\n        this._activate(this._element, listElement);\n\n        const complete = () => {\n            EventHandler.trigger(previous, EVENT_HIDDEN, {\n                relatedTarget: this._element\n            });\n            EventHandler.trigger(this._element, EVENT_SHOWN, {\n                relatedTarget: previous\n            });\n        };\n\n        if (target) {\n            this._activate(target, target.parentNode, complete);\n        } else {\n            complete();\n        }\n    }\n\n    // Private\n\n    Tab.prototype._activate = function(element, container, callback) {\n        const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ?\n            SelectorEngine.find(SELECTOR_ACTIVE_UL, container) :\n            SelectorEngine.children(container, SELECTOR_ACTIVE);\n\n        const active = activeElements[0];\n        const isTransitioning = callback && (active && active.classList.contains(CLASS_NAME_FADE));\n\n        const complete = () => this._transitionComplete(element, active, callback);\n\n        if (active && isTransitioning) {\n            active.classList.remove(CLASS_NAME_SHOW);\n            this._queueCallback(complete, element, true);\n        } else {\n            complete();\n        }\n    }\n\n    Tab.prototype._transitionComplete = function(element, active, callback) {\n        if (active) {\n            active.classList.remove(CLASS_NAME_ACTIVE);\n\n            const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n            if (dropdownChild) {\n                dropdownChild.classList.remove(CLASS_NAME_ACTIVE);\n            }\n\n            if (active.getAttribute('role') === 'tab') {\n                active.setAttribute('aria-selected', false);\n            }\n        }\n\n        element.classList.add(CLASS_NAME_ACTIVE);\n        if (element.getAttribute('role') === 'tab') {\n            element.setAttribute('aria-selected', true);\n        }\n\n        reflow(element);\n\n        if (element.classList.contains(CLASS_NAME_FADE)) {\n            element.classList.add(CLASS_NAME_SHOW);\n        }\n\n        let parent = element.parentNode;\n        if (parent && parent.nodeName === 'LI') {\n            parent = parent.parentNode;\n        }\n\n        if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n            const dropdownElement = element.closest(SELECTOR_DROPDOWN);\n\n            if (dropdownElement) {\n                SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement)\n                    .forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));\n            }\n\n            element.setAttribute('aria-expanded', true);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    // Static\n\n    Tab.getInstance = function(element) {\n        return Data.get(getElement(element), this.DATA_KEY);\n    }\n\n    Tab.getOrCreateInstance = function(element, config = {}) {\n        return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n    }\n\n    Tab.jQueryInterface = function(config) {\n        return this.each(function () {\n            const data = Tab.getOrCreateInstance(this);\n\n            if (typeof config === 'string') {\n                if (typeof data[config] === 'undefined') {\n                    throw new TypeError(`No method named \"${config}\"`);\n                }\n\n                data[config]();\n            }\n        })\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n        if (['A', 'AREA'].includes(this.tagName)) {\n            event.preventDefault();\n        }\n\n        if (isDisabled(this)) {\n            return;\n        }\n\n        const data = Tab.getOrCreateInstance(this);\n        data.show();\n    })\n\n    /**\n     * ------------------------------------------------------------------------\n     * jQuery\n     * ------------------------------------------------------------------------\n     * add .Tab to jQuery only if jQuery is present\n     */\n\n    defineJQueryPlugin(Tab);\n\n    return Tab;\n});\n","jquery/bootstrap/util/index.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n\ndefine([\n    \"jquery\",\n    'domReady!'\n], function() {\n    'use strict';\n\n    const MAX_UID = 1000000;\n    const MILLISECONDS_MULTIPLIER = 1000;\n    const TRANSITION_END = 'transitionend';\n\n    // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n    const toType = obj => {\n        if (obj === null || obj === undefined) {\n            return `${obj}`\n        }\n\n        return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n    };\n\n    /**\n     * --------------------------------------------------------------------------\n     * Public Util Api\n     * --------------------------------------------------------------------------\n     */\n\n    const getUID = prefix => {\n        do {\n            prefix += Math.floor(Math.random() * MAX_UID)\n        } while (document.getElementById(prefix))\n\n        return prefix\n    };\n\n    const getSelector = element => {\n        let selector = element.getAttribute('data-bs-target');\n\n        if (!selector || selector === '#') {\n            let hrefAttr = element.getAttribute('href');\n\n            // The only valid content that could double as a selector are IDs or classes,\n            // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n            // `document.querySelector` will rightfully complain it is invalid.\n            // See https://github.com/twbs/bootstrap/issues/32273\n            if (!hrefAttr || (!hrefAttr.includes('#') && !hrefAttr.startsWith('.'))) {\n                return null\n            }\n\n            // Just in case some CMS puts out a full URL with the anchor appended\n            if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n                hrefAttr = `#${hrefAttr.split('#')[1]}`\n            }\n\n            selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n        }\n\n        return selector\n    };\n\n    const getSelectorFromElement = element => {\n        const selector = getSelector(element);\n\n        if (selector) {\n            return document.querySelector(selector) ? selector : null\n        }\n\n        return null\n    };\n\n    const getElementFromSelector = element => {\n        const selector = getSelector(element);\n\n        return selector ? document.querySelector(selector) : null\n    };\n\n    const getTransitionDurationFromElement = element => {\n        if (!element) {\n            return 0\n        }\n\n        // Get transition-duration of the element\n        let {transitionDuration, transitionDelay} = window.getComputedStyle(element);\n\n        const floatTransitionDuration = Number.parseFloat(transitionDuration);\n        const floatTransitionDelay = Number.parseFloat(transitionDelay);\n\n        // Return 0 if element or transition duration is not found\n        if (!floatTransitionDuration && !floatTransitionDelay) {\n            return 0\n        }\n\n        // If multiple durations are defined, take the first\n        transitionDuration = transitionDuration.split(',')[0]\n        transitionDelay = transitionDelay.split(',')[0]\n\n        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n    };\n\n    const triggerTransitionEnd = element => {\n        element.dispatchEvent(new Event(TRANSITION_END))\n    };\n\n    const isElement = obj => {\n        if (!obj || typeof obj !== 'object') {\n            return false\n        }\n\n        if (typeof obj.jquery !== 'undefined') {\n            obj = obj[0]\n        }\n\n        return typeof obj.nodeType !== 'undefined'\n    };\n\n    const getElement = obj => {\n        if (isElement(obj)) { // it's a jQuery object or a node element\n            return obj.jquery ? obj[0] : obj\n        }\n\n        if (typeof obj === 'string' && obj.length > 0) {\n            return document.querySelector(obj)\n        }\n\n        return null\n    };\n\n    const typeCheckConfig = (componentName, config, configTypes) => {\n        Object.keys(configTypes).forEach(property => {\n            const expectedTypes = configTypes[property];\n            const value = config[property];\n            const valueType = value && isElement(value) ? 'element' : toType(value);\n\n            if (!new RegExp(expectedTypes).test(valueType)) {\n                throw new TypeError(\n                    `${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n                )\n            }\n        })\n    };\n\n    const isVisible = element => {\n        if (!isElement(element) || element.getClientRects().length === 0) {\n            return false\n        }\n\n        return getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n    };\n\n    const isDisabled = element => {\n        if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n            return true\n        }\n\n        if (element.classList.contains('disabled')) {\n            return true\n        }\n\n        if (typeof element.disabled !== 'undefined') {\n            return element.disabled\n        }\n\n        return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n    };\n\n    const findShadowRoot = element => {\n        if (!document.documentElement.attachShadow) {\n            return null\n        }\n\n        // Can find the shadow root otherwise it'll return the document\n        if (typeof element.getRootNode === 'function') {\n            const root = element.getRootNode();\n            return root instanceof ShadowRoot ? root : null\n        }\n\n        if (element instanceof ShadowRoot) {\n            return element\n        }\n\n        // when we don't find a shadow root\n        if (!element.parentNode) {\n            return null\n        }\n\n        return findShadowRoot(element.parentNode)\n    };\n\n    const noop = () => {};\n\n    /**\n     * Trick to restart an element's animation\n     *\n     * @param {HTMLElement} element\n     * @return void\n     *\n     * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n     */\n    const reflow = element => {\n        // eslint-disable-next-line no-unused-expressions\n        element.offsetHeight\n    };\n\n    const getjQuery = () => {\n        const {jQuery} = window;\n\n        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n            return jQuery\n        }\n\n        return null\n    };\n\n    const DOMContentLoadedCallbacks = [];\n\n    const onDOMContentLoaded = callback => {\n        if (document.readyState === 'loading') {\n            // add listener on the first call when the document is in loading state\n            if (!DOMContentLoadedCallbacks.length) {\n                document.addEventListener('DOMContentLoaded', () => {\n                    DOMContentLoadedCallbacks.forEach(callback => callback())\n                })\n            }\n\n            DOMContentLoadedCallbacks.push(callback)\n        } else {\n            callback()\n        }\n    };\n\n    const isRTL = () => document.documentElement.dir === 'rtl';\n\n    const defineJQueryPlugin = plugin => {\n        onDOMContentLoaded(() => {\n            const $ = getjQuery();\n            /* istanbul ignore if */\n            if ($) {\n                const name = plugin.NAME;\n                const JQUERY_NO_CONFLICT = $.fn[name];\n                $.fn[name] = plugin.jQueryInterface\n                $.fn[name].Constructor = plugin\n                $.fn[name].noConflict = () => {\n                    $.fn[name] = JQUERY_NO_CONFLICT\n                    return plugin.jQueryInterface\n                }\n            }\n        })\n    };\n\n    const execute = callback => {\n        if (typeof callback === 'function') {\n            callback()\n        }\n    };\n\n    const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n        if (!waitForTransition) {\n            execute(callback)\n            return\n        }\n\n        const durationPadding = 5;\n        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n\n        let called = false;\n\n        const handler = ({ target }) => {\n            if (target !== transitionElement) {\n                return\n            }\n\n            called = true\n            transitionElement.removeEventListener(TRANSITION_END, handler)\n            execute(callback)\n        };\n\n        transitionElement.addEventListener(TRANSITION_END, handler)\n        setTimeout(() => {\n            if (!called) {\n                triggerTransitionEnd(transitionElement)\n            }\n        }, emulatedDuration)\n    };\n\n    /**\n     * Return the previous/next element of a list.\n     *\n     * @param {array} list    The list of elements\n     * @param activeElement   The active element\n     * @param shouldGetNext   Choose to get next or previous element\n     * @param isCycleAllowed\n     * @return {Element|elem} The proper element\n     */\n    const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n        let index = list.indexOf(activeElement);\n\n        // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n        if (index === -1) {\n            return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0]\n        }\n\n        const listLength = list.length;\n\n        index += shouldGetNext ? 1 : -1\n\n        if (isCycleAllowed) {\n            index = (index + listLength) % listLength\n        }\n\n        return list[Math.max(0, Math.min(index, listLength - 1))]\n    };\n\n    return {\n        getElement,\n        getUID,\n        getSelectorFromElement,\n        getElementFromSelector,\n        getTransitionDurationFromElement,\n        triggerTransitionEnd,\n        isElement,\n        typeCheckConfig,\n        isVisible,\n        isDisabled,\n        findShadowRoot,\n        noop,\n        getNextActiveElement,\n        reflow,\n        getjQuery,\n        onDOMContentLoaded,\n        isRTL,\n        defineJQueryPlugin,\n        execute,\n        executeAfterTransition\n    };\n});\n","jquery/bootstrap/dom/event-handler.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([\n    \"../util/index\"\n], function(Util) {\n    'use strict';\n\n    const getjQuery = Util.getjQuery;\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n    const stripNameRegex = /\\..*/;\n    const stripUidRegex = /::\\d+$/;\n    const eventRegistry = {}; // Events storage\n    let uidEvent = 1;\n    const customEvents = {\n        mouseenter: 'mouseover',\n        mouseleave: 'mouseout'\n    };\n    const customEventsRegex = /^(mouseenter|mouseleave)/i;\n    const nativeEvents = new Set([\n        'click',\n        'dblclick',\n        'mouseup',\n        'mousedown',\n        'contextmenu',\n        'mousewheel',\n        'DOMMouseScroll',\n        'mouseover',\n        'mouseout',\n        'mousemove',\n        'selectstart',\n        'selectend',\n        'keydown',\n        'keypress',\n        'keyup',\n        'orientationchange',\n        'touchstart',\n        'touchmove',\n        'touchend',\n        'touchcancel',\n        'pointerdown',\n        'pointermove',\n        'pointerup',\n        'pointerleave',\n        'pointercancel',\n        'gesturestart',\n        'gesturechange',\n        'gestureend',\n        'focus',\n        'blur',\n        'change',\n        'reset',\n        'select',\n        'submit',\n        'focusin',\n        'focusout',\n        'load',\n        'unload',\n        'beforeunload',\n        'resize',\n        'move',\n        'DOMContentLoaded',\n        'readystatechange',\n        'error',\n        'abort',\n        'scroll'\n    ]);\n\n    /**\n     * ------------------------------------------------------------------------\n     * Private methods\n     * ------------------------------------------------------------------------\n     */\n\n    function getUidEvent(element, uid) {\n        return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n    }\n\n    function getEvent(element) {\n        const uid = getUidEvent(element);\n\n        element.uidEvent = uid\n        eventRegistry[uid] = eventRegistry[uid] || {}\n\n        return eventRegistry[uid]\n    }\n\n    function bootstrapHandler(element, fn) {\n        return function handler(event) {\n            event.delegateTarget = element\n\n            if (handler.oneOff) {\n                EventHandler.off(element, event.type, fn)\n            }\n\n            return fn.apply(element, [event])\n        }\n    }\n\n    function bootstrapDelegationHandler(element, selector, fn) {\n        return function handler(event) {\n            const domElements = element.querySelectorAll(selector);\n\n            for (let {target} = event; target && target !== this; target = target.parentNode) {\n                for (let i = domElements.length; i--;) {\n                    if (domElements[i] === target) {\n                        event.delegateTarget = target\n\n                        if (handler.oneOff) {\n                            EventHandler.off(element, event.type, selector, fn)\n                        }\n\n                        return fn.apply(target, [event])\n                    }\n                }\n            }\n\n            // To please ESLint\n            return null\n        }\n    }\n\n    function findHandler(events, handler, delegationSelector = null) {\n        const uidEventList = Object.keys(events);\n\n        for (let i = 0, len = uidEventList.length; i < len; i++) {\n            const event = events[uidEventList[i]];\n\n            if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n                return event\n            }\n        }\n\n        return null\n    }\n\n    function normalizeParams(originalTypeEvent, handler, delegationFn) {\n        const delegation = typeof handler === 'string';\n        const originalHandler = delegation ? delegationFn : handler;\n\n        let typeEvent = getTypeEvent(originalTypeEvent);\n        const isNative = nativeEvents.has(typeEvent);\n\n        if (!isNative) {\n            typeEvent = originalTypeEvent\n        }\n\n        return [delegation, originalHandler, typeEvent]\n    }\n\n    function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n        if (typeof originalTypeEvent !== 'string' || !element) {\n            return\n        }\n\n        if (!handler) {\n            handler = delegationFn\n            delegationFn = null\n        }\n\n        // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n        // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n        if (customEventsRegex.test(originalTypeEvent)) {\n            const wrapFn = fn => {\n                return function (event) {\n                    if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n                        return fn.call(this, event)\n                    }\n                }\n            };\n\n            if (delegationFn) {\n                delegationFn = wrapFn(delegationFn)\n            } else {\n                handler = wrapFn(handler)\n            }\n        }\n\n        const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n        const events = getEvent(element);\n        const handlers = events[typeEvent] || (events[typeEvent] = {});\n        const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n        if (previousFn) {\n            previousFn.oneOff = previousFn.oneOff && oneOff\n\n            return\n        }\n\n        const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n        const fn = delegation ?\n            bootstrapDelegationHandler(element, handler, delegationFn) :\n            bootstrapHandler(element, handler);\n\n        fn.delegationSelector = delegation ? handler : null\n        fn.originalHandler = originalHandler\n        fn.oneOff = oneOff\n        fn.uidEvent = uid\n        handlers[uid] = fn\n\n        element.addEventListener(typeEvent, fn, delegation)\n    }\n\n    function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n        const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n        if (!fn) {\n            return\n        }\n\n        element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n        delete events[typeEvent][fn.uidEvent]\n    }\n\n    function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n        const storeElementEvent = events[typeEvent] || {};\n\n        Object.keys(storeElementEvent).forEach(handlerKey => {\n            if (handlerKey.includes(namespace)) {\n                const event = storeElementEvent[handlerKey];\n\n                removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n            }\n        })\n    }\n\n    function getTypeEvent(event) {\n        // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n        event = event.replace(stripNameRegex, '')\n        return customEvents[event] || event\n    }\n\n    return {\n        on: function(element, event, handler, delegationFn) {\n            addHandler(element, event, handler, delegationFn, false)\n        },\n\n        one: function(element, event, handler, delegationFn) {\n            addHandler(element, event, handler, delegationFn, true)\n        },\n\n        off: function(element, originalTypeEvent, handler, delegationFn) {\n            if (typeof originalTypeEvent !== 'string' || !element) {\n                return\n            }\n\n            const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n            const inNamespace = typeEvent !== originalTypeEvent;\n            const events = getEvent(element);\n            const isNamespace = originalTypeEvent.startsWith('.');\n\n            if (typeof originalHandler !== 'undefined') {\n                // Simplest case: handler is passed, remove that listener ONLY.\n                if (!events || !events[typeEvent]) {\n                    return\n                }\n\n                removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null)\n                return\n            }\n\n            if (isNamespace) {\n                Object.keys(events).forEach(elementEvent => {\n                    removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n                })\n            }\n\n            const storeElementEvent = events[typeEvent] || {};\n            Object.keys(storeElementEvent).forEach(keyHandlers => {\n                const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n                if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n                    const event = storeElementEvent[keyHandlers];\n\n                    removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n                }\n            })\n        },\n\n        trigger: function(element, event, args) {\n            if (typeof event !== 'string' || !element) {\n                return null\n            }\n\n            const $ = getjQuery();\n            const typeEvent = getTypeEvent(event);\n            const inNamespace = event !== typeEvent;\n            const isNative = nativeEvents.has(typeEvent);\n\n            let jQueryEvent;\n            let bubbles = true;\n            let nativeDispatch = true;\n            let defaultPrevented = false;\n            let evt = null;\n\n            if (inNamespace && $) {\n                jQueryEvent = $.Event(event, args)\n\n                $(element).trigger(jQueryEvent)\n                bubbles = !jQueryEvent.isPropagationStopped()\n                nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n                defaultPrevented = jQueryEvent.isDefaultPrevented()\n            }\n\n            if (isNative) {\n                evt = document.createEvent('HTMLEvents')\n                evt.initEvent(typeEvent, bubbles, true)\n            } else {\n                evt = new CustomEvent(event, {\n                    bubbles,\n                    cancelable: true\n                })\n            }\n\n            // merge custom information in our event\n            if (typeof args !== 'undefined') {\n                Object.keys(args).forEach(key => {\n                    Object.defineProperty(evt, key, {\n                        get() {\n                            return args[key]\n                        }\n                    })\n                })\n            }\n\n            if (defaultPrevented) {\n                evt.preventDefault()\n            }\n\n            if (nativeDispatch) {\n                element.dispatchEvent(evt)\n            }\n\n            if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n                jQueryEvent.preventDefault()\n            }\n\n            return evt\n        }\n    }\n});\n","jquery/bootstrap/dom/selector-engine.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([\n    \"../util/index\"\n], function(Util) {\n    'use strict';\n\n    const isDisabled = Util.isDisabled;\n    const isVisible = Util.isVisible;\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const NODE_TEXT = 3;\n\n    return {\n        find: function(selector, element = document.documentElement) {\n            return [].concat(...Element.prototype.querySelectorAll.call(element, selector))\n        },\n\n        findOne: function(selector, element = document.documentElement) {\n            return Element.prototype.querySelector.call(element, selector)\n        },\n\n        children: function(element, selector) {\n            return [].concat(...element.children)\n                .filter(child => child.matches(selector))\n        },\n\n        parents: function(element, selector) {\n            const parents = [];\n\n            let ancestor = element.parentNode;\n\n            while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n                if (ancestor.matches(selector)) {\n                    parents.push(ancestor)\n                }\n\n                ancestor = ancestor.parentNode\n            }\n\n            return parents\n        },\n\n        prev: function(element, selector) {\n            let previous = element.previousElementSibling;\n\n            while (previous) {\n                if (previous.matches(selector)) {\n                    return [previous]\n                }\n\n                previous = previous.previousElementSibling\n            }\n\n            return []\n        },\n\n        next: function(element, selector) {\n            let next = element.nextElementSibling;\n\n            while (next) {\n                if (next.matches(selector)) {\n                    return [next]\n                }\n\n                next = next.nextElementSibling\n            }\n\n            return []\n        },\n\n        focusableChildren: function(element) {\n            const focusables = [\n                'a',\n                'button',\n                'input',\n                'textarea',\n                'select',\n                'details',\n                '[tabindex]',\n                '[contenteditable=\"true\"]'\n            ].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(', ');\n\n            return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))\n        }\n    }\n});\n","jquery/bootstrap/dom/data.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([], function() {\n    'use strict';\n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    const elementMap = new Map();\n\n    return {\n        set: function (element, key, instance) {\n            if (!elementMap.has(element)) {\n                elementMap.set(element, new Map())\n            }\n\n            const instanceMap = elementMap.get(element);\n\n            // make it clear we only want one instance per element\n            // can be removed later when multiple key/instances are fine to be used\n            if (!instanceMap.has(key) && instanceMap.size !== 0) {\n                // eslint-disable-next-line no-console\n                console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`)\n                return\n            }\n\n            instanceMap.set(key, instance)\n        },\n\n        get: function (element, key) {\n            if (elementMap.has(element)) {\n                return elementMap.get(element).get(key) || null\n            }\n\n            return null\n        },\n\n        remove: function (element, key) {\n            if (!elementMap.has(element)) {\n                return\n            }\n\n            const instanceMap = elementMap.get(element);\n\n            instanceMap.delete(key)\n\n            // free up element references if there are no instances left for an element\n            if (instanceMap.size === 0) {\n                elementMap.delete(element)\n            }\n        }\n    }\n});\n","jquery/bootstrap/dom/manipulator.js":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\ndefine([], function() {\n    'use strict';\n\n    function normalizeData(val) {\n        if (val === 'true') {\n            return true\n        }\n\n        if (val === 'false') {\n            return false\n        }\n\n        if (val === Number(val).toString()) {\n            return Number(val)\n        }\n\n        if (val === '' || val === 'null') {\n            return null\n        }\n\n        return val\n    }\n\n    function normalizeDataKey(key) {\n        return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n    }\n\n    return {\n        setDataAttribute: function(element, key, value) {\n            element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n        },\n\n        removeDataAttribute: function(element, key) {\n            element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n        },\n\n        getDataAttributes: function(element) {\n            if (!element) {\n                return {}\n            }\n\n            const attributes = {};\n\n            Object.keys(element.dataset)\n                .filter(key => key.startsWith('bs'))\n                .forEach(key => {\n                    let pureKey = key.replace(/^bs/, '');\n                    pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n                    attributes[pureKey] = normalizeData(element.dataset[key])\n                })\n\n            return attributes\n        },\n\n        getDataAttribute: function(element, key) {\n            return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n        },\n\n        offset: function(element) {\n            const rect = element.getBoundingClientRect();\n\n            return {\n                top: rect.top + window.pageYOffset,\n                left: rect.left + window.pageXOffset\n            }\n        },\n\n        position: function(element) {\n            return {\n                top: element.offsetTop,\n                left: element.offsetLeft\n            }\n        }\n    }\n});\n"}
}});
